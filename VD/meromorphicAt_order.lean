import Mathlib.Analysis.Meromorphic.Order
import VD.meromorphicAt

open Filter Topology

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} {z‚ÇÄ : ùïú}


--------------------------

/-- Helper lemma, required to state analyticAt_order_centeredMonomial below -/
lemma meromorphicAt_centeredMonomial (z‚ÇÄ : ùïú) (n : ‚Ñ§) :
    MeromorphicAt ((¬∑ - z‚ÇÄ) ^ n) z‚ÇÄ := by fun_prop

/-- Simplifier lemma for the order of a centered monomial -/
@[simp]
lemma meromorphicAt_order_centeredMonomial {z‚ÇÄ : ùïú} {n : ‚Ñ§} :
    (meromorphicAt_centeredMonomial z‚ÇÄ n).order = n := by
  rw [MeromorphicAt.order_eq_int_iff]
  use 1
  simp only [Pi.one_apply, ne_eq, one_ne_zero, not_false_eq_true, Pi.pow_apply, smul_eq_mul,
    mul_one, eventually_true, and_self, and_true]
  exact analyticAt_const

--------------------------

/-- Helper lemma for AnalyticAt.order_add: adding a locally vanishing function does not
affect the order. -/
lemma MeromorphicAt.order_add_top (hf‚ÇÅ : MeromorphicAt f‚ÇÅ z‚ÇÄ) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ z‚ÇÄ)
    (h : hf‚ÇÇ.order = ‚ä§) :
    (hf‚ÇÅ.add hf‚ÇÇ).order = hf‚ÇÅ.order := by
  rw [eq_comm]
  apply hf‚ÇÅ.order_congr
  filter_upwards [hf‚ÇÇ.order_eq_top_iff.1 h]
  intro a h‚ÇÅa
  simp [h‚ÇÅa]

/-- The order of a sub at least the minimum of the orders of the summands. -/
theorem MermomorphicAt.order_add (hf‚ÇÅ : MeromorphicAt f‚ÇÅ z‚ÇÄ) (hf‚ÇÇ : MeromorphicAt f‚ÇÇ z‚ÇÄ) :
    min hf‚ÇÅ.order hf‚ÇÇ.order ‚â§ (hf‚ÇÅ.add hf‚ÇÇ).order := by
  -- Trivial case: f‚ÇÅ vanishes identically around z‚ÇÄ
  by_cases h‚ÇÅf‚ÇÅ : hf‚ÇÅ.order = ‚ä§
  ¬∑ rw [h‚ÇÅf‚ÇÅ]
    simp only [le_top, inf_of_le_right]
    simp_rw [AddCommMagma.add_comm f‚ÇÅ f‚ÇÇ]
    rw [MeromorphicAt.order_add_top hf‚ÇÇ hf‚ÇÅ h‚ÇÅf‚ÇÅ]
  -- Trivial case: f‚ÇÇ vanishes identically around z‚ÇÄ
  by_cases h‚ÇÅf‚ÇÇ : hf‚ÇÇ.order = ‚ä§
  ¬∑ rw [h‚ÇÅf‚ÇÇ]
    simp only [le_top, inf_of_le_left]
    rw [MeromorphicAt.order_add_top hf‚ÇÅ hf‚ÇÇ h‚ÇÅf‚ÇÇ]
  -- General case
  lift hf‚ÇÅ.order to ‚Ñ§ using h‚ÇÅf‚ÇÅ with n‚ÇÅ hn‚ÇÅ
  lift hf‚ÇÇ.order to ‚Ñ§ using h‚ÇÅf‚ÇÇ with n‚ÇÇ hn‚ÇÇ
  rw [eq_comm, MeromorphicAt.order_eq_int_iff] at *
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hn‚ÇÅ
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hn‚ÇÇ
  let m := min n‚ÇÅ n‚ÇÇ
  let G := fun z ‚Ü¶ (z - z‚ÇÄ) ^ (n‚ÇÅ - m) ‚Ä¢ g‚ÇÅ z + (z - z‚ÇÄ) ^ (n‚ÇÇ - m) ‚Ä¢ g‚ÇÇ z
  have hG : AnalyticAt ùïú G z‚ÇÄ := by
    apply AnalyticAt.add
    apply AnalyticAt.smul _ h‚ÇÅg‚ÇÅ
    apply AnalyticAt.fun_zpow_nonneg
    fun_prop
    rw [sub_nonneg]
    exact Int.min_le_left n‚ÇÅ n‚ÇÇ
    apply AnalyticAt.smul _ h‚ÇÅg‚ÇÇ
    apply AnalyticAt.fun_zpow_nonneg
    fun_prop
    rw [sub_nonneg]
    exact Int.min_le_right n‚ÇÅ n‚ÇÇ
  have : f‚ÇÅ + f‚ÇÇ =·∂†[ùìù[‚â†] z‚ÇÄ] (¬∑ - z‚ÇÄ) ^ m ‚Ä¢ G := by
    dsimp [G]
    filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ]
    intro a h‚ÇÅa h‚ÇÇa
    simp only [Pi.add_apply, h‚ÇÅa, h‚ÇÇa, Pi.smul_apply', Pi.pow_apply, smul_add, G]
    congr 1
    simp [‚Üê smul_assoc, smul_eq_mul, ‚Üê zpow_add, m]
    sorry

  rw [(hf‚ÇÅ.add hf‚ÇÇ).order_congr this, MeromorphicAt.order_smul _ hG.meromorphicAt,
    meromorphicAt_order_centeredMonomial]
  simp only [m, G, ‚Üê WithTop.coe_min]
  by_cases h‚ÇÅG : hG.order = ‚ä§
  ¬∑ simp [hG.meromorphicAt_order, h‚ÇÅG]
  ¬∑ have : hG.meromorphicAt.order ‚â† ‚ä§ := by
      sorry
    lift hG.meromorphicAt.order to ‚Ñ§ using this with n hn
    rw [‚Üê WithTop.coe_add]
    rw [WithTop.le_coe_iff]
    simp
    rw [hG.meromorphicAt_order, ‚Üê hn]

    sorry

  exact le_self_add

/-- Helper lemma for AnalyticAt.order_add_of_unequal_order -/
lemma AnalyticAt.order_add_of_order_lt_order (hf‚ÇÅ : AnalyticAt ùïú f‚ÇÅ z‚ÇÄ) (hf‚ÇÇ : AnalyticAt ùïú f‚ÇÇ z‚ÇÄ)
    (h : hf‚ÇÅ.order < hf‚ÇÇ.order) :
    (hf‚ÇÅ.add hf‚ÇÇ).order = hf‚ÇÅ.order := by
  -- Trivial case: f‚ÇÇ vanishes identically around z‚ÇÄ
  by_cases h‚ÇÅf‚ÇÇ : hf‚ÇÇ.order = ‚ä§
  ¬∑ apply AnalyticAt.order_congr hf‚ÇÅ
    filter_upwards [hf‚ÇÇ.order_eq_top_iff.1 h‚ÇÅf‚ÇÇ]
    intro a h‚ÇÅa
    simp [h‚ÇÅa]
  -- General case
  lift hf‚ÇÇ.order to ‚Ñï using h‚ÇÅf‚ÇÇ with n‚ÇÇ hn‚ÇÇ
  lift hf‚ÇÅ.order to ‚Ñï using h.ne_top with n‚ÇÅ hn‚ÇÅ
  rw [Nat.cast_lt] at h
  rw [eq_comm] at hn‚ÇÅ hn‚ÇÇ
  rw [AnalyticAt.order_eq_nat_iff] at *
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hn‚ÇÅ
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hn‚ÇÇ
  use g‚ÇÅ + (¬∑ - z‚ÇÄ) ^ (n‚ÇÇ - n‚ÇÅ) ‚Ä¢ g‚ÇÇ, by fun_prop
  constructor
  ¬∑ simpa [Nat.sub_ne_zero_iff_lt.mpr h]
  ¬∑ filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ]
    intro a h‚ÇÅa h‚ÇÇa
    simp only [Pi.add_apply, h‚ÇÅa, h‚ÇÇa, Pi.smul_apply', Pi.pow_apply, smul_add, ‚Üê smul_assoc,
      smul_eq_mul, add_right_inj]
    rw [‚Üê pow_add, add_comm, eq_comm, Nat.sub_add_cancel (Nat.le_of_succ_le h)]

/-- If two functions have unequal orders, then the order of their sum is exactly the minimum
of the orders of the summands. -/
theorem AnalyticAt.order_add_of_unequal_order (hf‚ÇÅ : AnalyticAt ùïú f‚ÇÅ z‚ÇÄ) (hf‚ÇÇ : AnalyticAt ùïú f‚ÇÇ z‚ÇÄ)
    (h : hf‚ÇÅ.order ‚â† hf‚ÇÇ.order) :
    (hf‚ÇÅ.add hf‚ÇÇ).order = min hf‚ÇÅ.order hf‚ÇÇ.order := by
  by_cases h‚ÇÅ : hf‚ÇÅ.order < hf‚ÇÇ.order
  ¬∑ rw [min_eq_left (le_of_lt h‚ÇÅ)]
    exact hf‚ÇÅ.order_add_of_order_lt_order hf‚ÇÇ h‚ÇÅ
  ¬∑ rw [min_eq_right (le_of_not_lt h‚ÇÅ)]
    simp_rw [AddCommMagma.add_comm f‚ÇÅ f‚ÇÇ]
    exact hf‚ÇÇ.order_add_of_order_lt_order hf‚ÇÅ (lt_of_le_of_ne (le_of_not_lt h‚ÇÅ) h.symm)
