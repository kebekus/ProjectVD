import Mathlib.Analysis.Analytic.Meromorphic
import VD.ToMathlib.meromorphicAt

--open scoped Topology
--open Real Filter

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] [CompleteSpace E]
  {f : ùïú ‚Üí E}

/-- The set where a meromorphic function has infinite order is clopen in its domain of meromorphy. -/
theorem MeromorphicOn.clopen_of_order_eq_top {U : Set ùïú} (h‚ÇÅf : MeromorphicOn f U) :
    IsClopen { u : U | (h‚ÇÅf u.1 u.2).order = ‚ä§ } := by
  constructor
  ¬∑ rw [‚Üê isOpen_compl_iff, isOpen_iff_forall_mem_open]
    intro z hz
    rcases (h‚ÇÅf z.1 z.2).eventually_eq_zero_or_eventually_ne_zero with h | h
    ¬∑ -- Case: f is locally zero in a punctured neighborhood of z
      rw [‚Üê (h‚ÇÅf z.1 z.2).order_eq_top_iff] at h
      tauto
    ¬∑ -- Case: f is locally nonzero in a punctured neighborhood of z
      obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := eventually_nhds_iff.1 (eventually_nhdsWithin_iff.1
        (h.and (h‚ÇÅf z.1 z.2).eventually_analyticAt))
      use Subtype.val ‚Åª¬π' t'
      constructor
      ¬∑ intro w hw
        simp
        by_cases h‚ÇÅw : w = z
        ¬∑ rwa [h‚ÇÅw]
        ¬∑ have h‚ÇÇf := (h‚ÇÅt' w hw) (Subtype.coe_ne_coe.mpr h‚ÇÅw)
          simp [h‚ÇÇf.2.meromorphicAt_order, h‚ÇÇf.2.order_eq_zero_iff.2 h‚ÇÇf.1]
      ¬∑ exact ‚ü®isOpen_induced h‚ÇÇt', h‚ÇÉt'‚ü©
  ¬∑ apply isOpen_iff_forall_mem_open.mpr
    intro z hz
    simp_rw [MeromorphicAt.order_eq_top_iff, eventually_nhdsWithin_iff, eventually_nhds_iff] at *
    obtain ‚ü®t', h‚ÇÅt', h‚ÇÇt', h‚ÇÉt'‚ü© := hz
    use Subtype.val ‚Åª¬π' t'
    simp [isOpen_induced h‚ÇÇt', h‚ÇÉt']
    intro w hw
    simp
    -- Trivial case: w = z
    by_cases h‚ÇÅw : w = z
    ¬∑ rw [h‚ÇÅw]
      tauto
    -- Nontrivial case: w ‚â† z
    use t' \ {z.1}, fun y hy _ ‚Ü¶ h‚ÇÅt' y (Set.mem_of_mem_diff hy) (Set.mem_of_mem_inter_right hy)
    constructor
    ¬∑ exact h‚ÇÇt'.sdiff isClosed_singleton
    ¬∑ apply (Set.mem_diff w).1
      exact ‚ü®hw, Set.mem_singleton_iff.not.1 (Subtype.coe_ne_coe.2 h‚ÇÅw)‚ü©

theorem MeromorphicOn.exists_order_ne_top_iff_all_order_ne_top {U : Set ùïú} (hf : MeromorphicOn f U)
    (hU : IsConnected U) :
    (‚àÉ u : U, (hf u u.2).order ‚â† ‚ä§) ‚Üî (‚àÄ u : U, (hf u u.2).order ‚â† ‚ä§) := by
  constructor
  ¬∑ intro h‚ÇÇf
    have := isPreconnected_iff_preconnectedSpace.1 hU.isPreconnected
    rcases isClopen_iff.1 hf.clopen_of_order_eq_top with h | h
    ¬∑ intro u
      have : u ‚àâ (‚àÖ : Set U) := by exact fun a => a
      rw [‚Üê h] at this
      tauto
    ¬∑ obtain ‚ü®u, hU‚ü© := h‚ÇÇf
      have : u ‚àà Set.univ := by trivial
      rw [‚Üê h] at this
      tauto
  ¬∑ intro h‚ÇÇf
    obtain ‚ü®v, hv‚ü© := hU.nonempty
    use ‚ü®v, hv‚ü©, h‚ÇÇf ‚ü®v, hv‚ü©

theorem MeromorphicOn.order_ne_top_of_order_ne_top {U : Set ùïú} {x y : U} (hf : MeromorphicOn f U)
    (hU : IsPreconnected U) (hx : (hf x x.2).order ‚â† ‚ä§) :
    (hf y y.2).order ‚â† ‚ä§ :=
  (hf.exists_order_ne_top_iff_all_order_ne_top ‚ü®Set.nonempty_of_mem (Subtype.coe_prop x), hU‚ü©).1
    (by use x) y
