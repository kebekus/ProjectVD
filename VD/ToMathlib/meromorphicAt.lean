import Mathlib.Analysis.Analytic.Meromorphic


variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f g : ùïú ‚Üí ùïú} {z‚ÇÄ : ùïú}

/-- Helper lemma for `MeromorphicAt.order_mul` -/
lemma MeromorphicAt.order_of_locallyZero_mul_meromorphic
  (hf : MeromorphicAt f z‚ÇÄ) (hg : MeromorphicAt g z‚ÇÄ) (h'f : hf.order = ‚ä§) :
    (hf.mul hg).order = ‚ä§ := by
  rw [MeromorphicAt.order_eq_top_iff, eventually_nhdsWithin_iff, eventually_nhds_iff] at *
  obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt‚ü© := h'f
  use t
  simp
  tauto

/-- The order is additive when multiplying meromorphic functions -/
theorem MeromorphicAt.order_mul (hf : MeromorphicAt f z‚ÇÄ) (hg : MeromorphicAt g z‚ÇÄ) :
    (hf.mul hg).order = hf.order + hg.order := by
  -- Trivial cases: one of the functions vanishes around z‚ÇÄ
  by_cases h‚ÇÇf : hf.order = ‚ä§
  ¬∑ simp [hf.order_of_locallyZero_mul_meromorphic hg, h‚ÇÇf]
  by_cases h‚ÇÇg : hg.order = ‚ä§
  ¬∑ simp [mul_comm f g, hg.order_of_locallyZero_mul_meromorphic hf, h‚ÇÇg]
  -- Non-trivial case: both functions do not vanish around z‚ÇÄ
  have h‚ÇÉf := (hf.order.coe_untop h‚ÇÇf).symm
  have h‚ÇÉg := (hg.order.coe_untop h‚ÇÇg).symm
  rw [h‚ÇÉf, h‚ÇÉg, ‚Üê WithTop.coe_add, MeromorphicAt.order_eq_int_iff]
  obtain ‚ü®F, h‚ÇÅF, h‚ÇÇF, h‚ÇÉF‚ü© := (hf.order_eq_int_iff (hf.order.untop h‚ÇÇf)).1 h‚ÇÉf
  obtain ‚ü®G, h‚ÇÅG, h‚ÇÇG, h‚ÇÉG‚ü© := (hg.order_eq_int_iff (hg.order.untop h‚ÇÇg)).1 h‚ÇÉg
  clear h‚ÇÉf h‚ÇÉg
  use F * G, h‚ÇÅF.mul h‚ÇÅG, by simp; tauto
  rw [eventually_nhdsWithin_iff, eventually_nhds_iff] at *
  obtain ‚ü®s, h‚ÇÅs, h‚ÇÇs, h‚ÇÉs‚ü© := h‚ÇÉF
  obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := h‚ÇÉG
  use s ‚à© t
  constructor
  ¬∑ intro y h‚ÇÅy h‚ÇÇy
    simp [h‚ÇÅs y h‚ÇÅy.1 h‚ÇÇy, h‚ÇÅt y h‚ÇÅy.2 h‚ÇÇy, zpow_add' (by left; exact sub_ne_zero_of_ne h‚ÇÇy)]
    group
  ¬∑ exact ‚ü®IsOpen.inter h‚ÇÇs h‚ÇÇt, Set.mem_inter h‚ÇÉs h‚ÇÉt‚ü©
