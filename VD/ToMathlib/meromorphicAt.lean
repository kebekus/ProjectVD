import Mathlib.Analysis.Analytic.Meromorphic


variable {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f g : ùïú ‚Üí ùïú} {z‚ÇÄ : ùïú}

/-- Helper lemma for `MeromorphicAt.order_mul` -/
lemma MeromorphicAt.order_of_locallyZero_mul_meromorphic
  (hf : MeromorphicAt f z‚ÇÄ) (hg : MeromorphicAt g z‚ÇÄ) (h'f : hf.order = ‚ä§) :
    (hf.mul hg).order = ‚ä§ := by
  rw [MeromorphicAt.order_eq_top_iff, eventually_nhdsWithin_iff, eventually_nhds_iff] at *
  obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt‚ü© := h'f
  use t
  simp [h‚ÇÇt]
  tauto

/-- The order is additive when multiplying meromorphic functions -/
theorem MeromorphicAt.order_mul
  (hf : MeromorphicAt f z‚ÇÄ)
  (hg : MeromorphicAt g z‚ÇÄ) :
  (hf.mul hg).order = hf.order + hg.order := by
  -- Trivial cases: one of the functions vanishes around z‚ÇÄ
  by_cases h‚ÇÇf : hf.order = ‚ä§
  ¬∑ simp [hf.order_of_locallyZero_mul_meromorphic hg h‚ÇÇf, h‚ÇÇf]
  by_cases h‚ÇÇg : hg.order = ‚ä§
  ¬∑ have : f * g = g * f := by simp_rw [mul_comm]
    simp [this, hg.order_of_locallyZero_mul_meromorphic hf h‚ÇÇg, h‚ÇÇg]

  -- Non-trivial case: both functions do not vanish around z‚ÇÄ
  have h‚ÇÉf‚ÇÅ := (WithTop.coe_untop hf.order h‚ÇÇf).symm
  have h‚ÇÉf‚ÇÇ := (WithTop.coe_untop hg.order h‚ÇÇg).symm
  obtain ‚ü®F, h‚ÇÅF, h‚ÇÇF, h‚ÇÉF‚ü© := (hf.order_eq_int_iff (hf.order.untop h‚ÇÇf)).1 h‚ÇÉf‚ÇÅ
  obtain ‚ü®G, h‚ÇÅG, h‚ÇÇG, h‚ÇÉG‚ü© := (hg.order_eq_int_iff (hg.order.untop h‚ÇÇg)).1 h‚ÇÉf‚ÇÇ
  rw [h‚ÇÉf‚ÇÅ, h‚ÇÉf‚ÇÇ, ‚Üê WithTop.coe_add, MeromorphicAt.order_eq_int_iff]
  use F * G, h‚ÇÅF.mul h‚ÇÅG
  constructor
  ¬∑ simp; tauto
  ¬∑ rw [eventually_nhdsWithin_iff, eventually_nhds_iff] at *
    obtain ‚ü®t‚ÇÅ, h‚ÇÅt‚ÇÅ, h‚ÇÇt‚ÇÅ, h‚ÇÉt‚ÇÅ‚ü© := h‚ÇÉF
    obtain ‚ü®t‚ÇÇ, h‚ÇÅt‚ÇÇ, h‚ÇÇt‚ÇÇ, h‚ÇÉt‚ÇÇ‚ü© := h‚ÇÉG
    use t‚ÇÅ ‚à© t‚ÇÇ
    constructor
    ¬∑ intro y h‚ÇÅy h‚ÇÇy
      simp [h‚ÇÅt‚ÇÅ y h‚ÇÅy.1 h‚ÇÇy, h‚ÇÅt‚ÇÇ y h‚ÇÅy.2 h‚ÇÇy, zpow_add' (by left; exact sub_ne_zero_of_ne h‚ÇÇy)]
      group
    ¬∑ exact ‚ü®IsOpen.inter h‚ÇÇt‚ÇÅ h‚ÇÇt‚ÇÇ, Set.mem_inter h‚ÇÉt‚ÇÅ h‚ÇÉt‚ÇÇ‚ü©


/-- The order multiplies by `n` when taking an analytic function to its `n`th power -/
theorem MeromorphicAt.order_pow (hf : MeromorphicAt f z‚ÇÄ) {n : ‚Ñï} :
    (hf.pow n).order = n * hf.order := by
  induction' n with n hn
  ¬∑ simp [AnalyticAt.order_eq_zero_iff]
  ¬∑ simp [add_mul, pow_add, (hf.pow n).order_mul hf, hn]


-- TODO: `order_zpow` is not yet ported to mathlib

-- TODO: `order_inv` is not yet ported to mathlib
