/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Calculus.ContDiff.Basic
import Mathlib.Analysis.Calculus.ContDiff.Operations
import Mathlib.Analysis.InnerProductSpace.CanonicalTensor
import VD.ToMathlib.IteratedFDeriv_two

/-!
# The Laplace Operator

This file defines the Laplace operator for functions `f : E ‚Üí F` on real,
finite-dimensional, inner product spaces `E`. In essence, we define the
Laplacian of `f` as the second derivative, applied to the canonical covariant
tensor of `E`, as defined and discussed in
`Mathlib.Analysis.InnerProductSpace.CanonicalTensor`.

We show that the Laplace operator is `‚ÑÇ`-linear on continuously differentiable
functions, and establish the standard formula for computing the Laplace operator
in terms of orthonormal bases of `E`.
-/

open InnerProductSpace TensorProduct Topology

section secondDerivativeAPI

/-!
## Supporting API

The definition of the Laplace Operator of a function `f : E ‚Üí F` involves the
notion of the second derivative, which can be seen as a continous multilinear
map `ContinuousMultilinearMap ùïú (fun (i : Fin 2) ‚Ü¶ E) F`, a bilinear map `E
‚Üí‚Çó[ùïú] E ‚Üí‚Çó[ùïú] F`, or a linear map on tensors `E ‚äó[ùïú] E ‚Üí‚Çó[ùïú] F`. This
section provides convenience API to convert between these notions.
-/

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ùïú G]

variable (ùïú) in
/--
Convenience reformulation of the second iterated derivative, as a map from `E`
to bilinear maps `E ‚Üí‚Çó[‚Ñù] E ‚Üí‚Çó[‚Ñù] ‚Ñù
-/
noncomputable def bilinear_of_iteratedFDeriv_two (f : E ‚Üí F) : E ‚Üí E ‚Üí‚Çó[ùïú] E ‚Üí‚Çó[ùïú] F :=
  fun x ‚Ü¶ (fderiv ùïú (fderiv ùïú f) x).toLinearMap‚ÇÇ

/--
Expression of `bilinear_of_iteratedFDeriv_two` in terms of `iteratedFDeriv`.
-/
lemma bilinear_of_iteratedFDeriv_two_eq_iteratedFDeriv (f : E ‚Üí F) (e e‚ÇÅ e‚ÇÇ : E) :
    bilinear_of_iteratedFDeriv_two ùïú f e e‚ÇÅ e‚ÇÇ = iteratedFDeriv ùïú 2 f e ![e‚ÇÅ, e‚ÇÇ] := by
  simp [iteratedFDeriv_two_apply f e ![e‚ÇÅ, e‚ÇÇ], bilinear_of_iteratedFDeriv_two]

variable (ùïú) in
/--
Convenience reformulation of the second iterated derivative, as a map from `E`
to linear maps `E ‚äó[ùïú] E ‚Üí‚Çó[ùïú] F`.
-/
noncomputable def tensor_of_iteratedFDeriv_two (f : E ‚Üí F) : E ‚Üí E ‚äó[ùïú] E ‚Üí‚Çó[ùïú] F :=
  fun e ‚Ü¶ lift (bilinear_of_iteratedFDeriv_two ùïú f e)

/--
Expression of `tensor_of_iteratedFDeriv_two` in terms of `iteratedFDeriv`.
-/
lemma tensor_of_iteratedFDeriv_two_eq_iteratedFDeriv (f : E ‚Üí F) (e e‚ÇÅ e‚ÇÇ : E) :
    tensor_of_iteratedFDeriv_two ùïú f e (e‚ÇÅ ‚äó‚Çú[ùïú] e‚ÇÇ) = iteratedFDeriv ùïú 2 f e ![e‚ÇÅ, e‚ÇÇ] := by
  rw [‚Üê bilinear_of_iteratedFDeriv_two_eq_iteratedFDeriv, tensor_of_iteratedFDeriv_two]
  rfl

end secondDerivativeAPI

/-!
## Definition of the Laplace Operator
-/

variable
  {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  {f f‚ÇÅ f‚ÇÇ : E ‚Üí F} {x : E}

variable (f) in
/--
Definition of the Laplace operator for functions on real inner product spaces.
-/
noncomputable def Real.Laplace : E ‚Üí F :=
  fun x ‚Ü¶ tensor_of_iteratedFDeriv_two ‚Ñù f x (InnerProductSpace.canonicalCovariantTensor E)

/--
Introduce `Œî` as a notation for the Laplace operator.
-/
notation "Œî" => Real.Laplace

/-!
## Computation of Œî in Terms of Orthonormal Bases
-/

variable (f) in
/--
Standard formula, computing the Laplace operator from any orthonormal basis.
-/
theorem laplace_eq_iteratedFDeriv_orthonormalBasis {Œπ : Type*} [Fintype Œπ]
    (v : OrthonormalBasis Œπ ‚Ñù E) :
    Œî f = fun x ‚Ü¶ ‚àë i, iteratedFDeriv ‚Ñù 2 f x ![v i, v i] := by
  ext x
  simp [Real.Laplace, canonicalCovariantTensor_eq_sum E v,
    tensor_of_iteratedFDeriv_two_eq_iteratedFDeriv]

variable (f) in
/--
Standard formula, computing the Laplace operator from the standard orthonormal
basis of a real inner product space.
-/
theorem laplace_eq_iteratedFDeriv_stdOrthonormalBasis :
    Œî f = fun x ‚Ü¶
      ‚àë i, iteratedFDeriv ‚Ñù 2 f x ![(stdOrthonormalBasis ‚Ñù E) i, (stdOrthonormalBasis ‚Ñù E) i] :=
  laplace_eq_iteratedFDeriv_orthonormalBasis f (stdOrthonormalBasis ‚Ñù E)

/--
Special case of the standard formula for functions on `‚ÑÇ`, with the standard
structure as a real inner product space.
-/
theorem laplace_eq_iteratedFDeriv_complexPlane (f : ‚ÑÇ ‚Üí F) :
    Œî f = fun x ‚Ü¶
      iteratedFDeriv ‚Ñù 2 f x ![1, 1] + iteratedFDeriv ‚Ñù 2 f x ![Complex.I, Complex.I] := by
  simp [laplace_eq_iteratedFDeriv_orthonormalBasis f Complex.orthonormalBasisOneI]

/-!
## Congruence Lemma for Œî
-/

theorem laplace_congr_nhds (h : f‚ÇÅ =·∂†[ùìù x] f‚ÇÇ) :
    Œî f‚ÇÅ =·∂†[ùìù x] Œî f‚ÇÇ := by
  filter_upwards [Filter.EventuallyEq.iteratedFDeriv ‚Ñù h 2] with x hx
  simp [laplace_eq_iteratedFDeriv_stdOrthonormalBasis, hx]

/-!
## ‚ÑÇ-Linearity of Œî on Continuously Differentiable Functions
-/

theorem ContDiffAt.laplace_add (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ + f‚ÇÇ) x = (Œî f‚ÇÅ) x + (Œî f‚ÇÇ) x := by
  simp [laplace_eq_iteratedFDeriv_stdOrthonormalBasis,
    ‚Üê Finset.sum_add_distrib, iteratedFDeriv_add_apply h‚ÇÅ h‚ÇÇ]

theorem ContDiffAt.laplace_add_nhd (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ + f‚ÇÇ) =·∂†[ùìù x] (Œî f‚ÇÅ) + (Œî f‚ÇÇ):= by
  filter_upwards [h‚ÇÅ.eventually (by simp), h‚ÇÇ.eventually (by simp)] with x h‚ÇÅx h‚ÇÇx
  exact h‚ÇÅx.laplace_add h‚ÇÇx

theorem laplace_smul (v : ‚Ñù) (hf : ContDiffAt ‚Ñù 2 f x) : Œî (v ‚Ä¢ f) x = v ‚Ä¢ (Œî f) x := by
  simp [laplace_eq_iteratedFDeriv_stdOrthonormalBasis, iteratedFDeriv_const_smul_apply hf,
    Finset.smul_sum]

/-!
## Commutativity of Œî with Linear Operators

This section establishes commutativity with linear operators, showing in
particular that `Œî` commutes with taking real and imaginary parts of
complex-valued functions.
-/

theorem ContDiffAt.laplace_CLM_comp {l : F ‚ÜíL[‚Ñù] G} (h : ContDiffAt ‚Ñù 2 f x) :
    Œî (l ‚àò f) x = (l ‚àò (Œî f)) x := by
  simp [laplace_eq_iteratedFDeriv_stdOrthonormalBasis,
    l.iteratedFDeriv_comp_left h, (by rfl : (2 : ‚Ñï‚àû) = (2 : ‚Ñï))]

theorem laplace_CLE_comp {l : F ‚âÉL[‚Ñù] G} :
    Œî (l ‚àò f) = l ‚àò (Œî f) := by
  ext x
  simp [laplace_eq_iteratedFDeriv_stdOrthonormalBasis, l.iteratedFDeriv_comp_left]
