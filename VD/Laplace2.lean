/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Calculus.ContDiff.Basic
import Mathlib.Analysis.InnerProductSpace.CanonicalTensor
import VD.IteratedFDeriv_two

/-!
# The Laplace Operator

This file defines the Laplace operator for functions on real,
finite-dimensional, inner product spaces. It provides supporting API and
establishes the standard formula, computing the Laplace operator from any
orthonormal basis.
-/

variable
  {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  {f f‚ÇÅ f‚ÇÇ : E ‚Üí F} {x : E}

open InnerProductSpace TensorProduct Topology

/-!
## Definition of the Laplace Operator
-/

variable (f) in
/--
Definition of the Laplace operator for functions on real inner product spaces.
-/
noncomputable def Real.Laplace : E ‚Üí F :=
  fun x ‚Ü¶ tensor_of_iteratedFDeriv_two ‚Ñù f x (InnerProductSpace.canonicalCovariantTensor E)

/--
Introduce `Œî` as a notation for the Laplace operator.
-/
notation "Œî" => Real.Laplace

/-!
## Computation in Terms of Orthonormal Bases
-/

variable (f) in
/--
Standard formula, computing the Laplace operator from any orthonormal basis.
-/
theorem laplace_eq_iteratedFDeriv_orthonormalBasis {Œπ : Type*} [Fintype Œπ]
    (v : OrthonormalBasis Œπ ‚Ñù E) :
    Œî f = fun x ‚Ü¶ ‚àë i, iteratedFDeriv ‚Ñù 2 f x ![v i, v i] := by
  ext x
  simp [Real.Laplace, canonicalCovariantTensor_eq_sum E v,
    tensor_of_iteratedFDeriv_two_eq_iteratedFDeriv]

variable (f) in
/--
Standard formula, computing the Laplace operator from the standard orthonormal
basis of a real inner product space.
-/
theorem laplace_eq_iteratedFDeriv_stdOrthonormalBasis :
    Œî f = fun x ‚Ü¶
      ‚àë i, iteratedFDeriv ‚Ñù 2 f x ![(stdOrthonormalBasis ‚Ñù E) i, (stdOrthonormalBasis ‚Ñù E) i] :=
  laplace_eq_iteratedFDeriv_orthonormalBasis f (stdOrthonormalBasis ‚Ñù E)

/--
Special case of the standard formula for functions on `‚ÑÇ`, considered as a real
inner product space.
-/
theorem laplace_eq_iteratedFDeriv_complexPlane (f : ‚ÑÇ ‚Üí F) :
    Œî f = fun x ‚Ü¶
      iteratedFDeriv ‚Ñù 2 f x ![1, 1] + iteratedFDeriv ‚Ñù 2 f x ![Complex.I, Complex.I] := by
  simp [laplace_eq_iteratedFDeriv_orthonormalBasis f Complex.orthonormalBasisOneI]

/-!
## Congruence Lemmata
-/

theorem laplace_eventuallyEq' (h : f‚ÇÅ =·∂†[ùìù x] f‚ÇÇ) : Œî f‚ÇÅ =·∂†[ùìù x] Œî f‚ÇÇ := by
  sorry

/-!
## ‚ÑÇ-Linearity on Continuously Differentiable Functions
-/

theorem ContDiffAt.laplace_add_nhd (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ + f‚ÇÇ) =·∂†[ùìù x] (Œî f‚ÇÅ) + (Œî f‚ÇÇ):= by
  sorry

theorem ContDiffAt.laplace_add (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ + f‚ÇÇ) x = (Œî f‚ÇÅ) x + (Œî f‚ÇÇ) x := by
  sorry

theorem ContDiffAt.laplace_sub_nhd (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ - f‚ÇÇ) =·∂†[ùìù x] (Œî f‚ÇÅ) - (Œî f‚ÇÇ):= by
  sorry

theorem ContDiffAt.laplace_sub (h‚ÇÅ : ContDiffAt ‚Ñù 2 f‚ÇÅ x) (h‚ÇÇ : ContDiffAt ‚Ñù 2 f‚ÇÇ x) :
    Œî (f‚ÇÅ - f‚ÇÇ) x = (Œî f‚ÇÅ) x - (Œî f‚ÇÇ) x := by
  sorry

theorem laplace_smul : ‚àÄ v : ‚Ñù, Œî (v ‚Ä¢ f) = v ‚Ä¢ (Œî f) := by
  sorry

/-!
## Commutativity with Linear Operators

This section establishes commutativity with linear operators, showing in
particular that `Œî` commutes with taking real and imaginary parts of
complex-valued functions.
-/

theorem ContDiffAt.laplace_CLM_comp {l : F ‚ÜíL[‚Ñù] G} (h : ContDiffAt ‚Ñù 2 f x) :
    Œî (l ‚àò f) x = (l ‚àò (Œî f)) x := by
  sorry

theorem laplace_CLE_comp {l : F ‚âÉL[‚Ñù] G} :
    Œî (l ‚àò f) = l ‚àò (Œî f) := by
  sorry
