/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import VD.ProximityFunction
import VD.ToMathlib.CharacteristicFunction

/-!
# The First Main Theorem of Value Distribution Theory

The First Main Theorem of Value Distribution Theory is a two-part statement,
establishing invariance of the characteristic function `characteristic f ‚ä§`
under modifications of `f`.

- If `f` is meromorphic on the complex plane, then the characteristic functions
  for the value `‚ä§` of the function `f` and `f‚Åª¬π` agree up to a constant, see
  Proposition 2.1 on p. 168 of [Lang, *Introduction to Complex Hyperbolic
  Spaces*][MR886677].

- If `f` is meromorphic on the complex plane, then the characteristic functions
  for the value `‚ä§` of the function `f` and `f - const` agree up to a constant,
  see Proposition 2.2 on p. 168 of [Lang, *Introduction to Complex Hyperbolic
  Spaces*][MR886677]

See Section~VI.2 of [Lang, *Introduction to Complex Hyperbolic
Spaces*][MR886677] or Section~1.1 of [Noguchi-Winkelmann, *Nevanlinna Theory in
Several Complex Variables and Diophantine Approximation*][MR3156076] for a
detailed discussion.

### TODO

- Formalize the first part of the First Main Theorem.
-/



/-!
# Circle Averages
-/

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E] [SMulCommClass ‚Ñù ùïú E]
  {f f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚Ñù} {c : ‚ÑÇ} {R : ‚Ñù} {a : ùïú}

open Real

/--
If `f x` is smaller than `a` on for every point of the circle, then the circle
average of `f` is smaller than `a`.
-/
theorem circleAverage_const {a : ‚Ñù} :
    circleAverage (fun _ ‚Ü¶ a) c R = a := by
  simp only [circleAverage, mul_inv_rev, intervalIntegral.integral_const, sub_zero, smul_eq_mul]
  ring_nf
  simp [mul_inv_cancel‚ÇÄ pi_ne_zero]

/--
If `f x` is smaller than `a` on for every point of the circle, then the circle
average of `f` is smaller than `a`.
-/
theorem circleAverage_le_of_le {a : ‚Ñù} (hf : CircleIntegrable f c R)
    (h‚ÇÇf : ‚àÄ x ‚àà Metric.sphere c |R|, f x < a) :
    circleAverage f c R ‚â§ a := by
  rw [‚Üê circleAverage_const (a := a) (c := c) (R := |R|)]
  unfold circleAverage
  rw [smul_eq_mul, smul_eq_mul]
  rw [mul_le_mul_iff_of_pos_left]
  apply intervalIntegral.integral_mono_on_of_le_Ioo

  unfold CircleIntegrable at hf
  have : 0 ‚â§ 2 * œÄ := by sorry
  have Z := intervalIntegral.integral_mono_on_of_le_Ioo this hf (g := fun z ‚Ü¶ a)


  sorry



namespace ValueDistribution

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E]
  {f : ‚ÑÇ ‚Üí E} {a‚ÇÄ : E}

open Asymptotics Real

/-!
## Second part of the First Main Theorem
-/

/--
Second part of the First Main Theorem of Value Distribution Theory, quantitative
version: If `f` is meromorphic on the complex plane, then the characteristic
functions (for value `‚ä§`) of `f` and `f - a‚ÇÄ` differ at most by `log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log
2`.
-/
theorem FirstMainTheorem‚ÇÇ {r : ‚Ñù} (h : MeromorphicOn f ‚ä§) :
    |characteristic f ‚ä§ r - characteristic (f ¬∑ - a‚ÇÄ) ‚ä§ r| ‚â§ log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
  rw [‚Üê Pi.sub_apply, characteristic_sub_characteristic_eq_proximity_sub_proximity h]
  simp only [proximity, reduceDIte, Pi.sub_apply]
  rw [‚Üê circleAverage_sub]
  rw [circleAverage]

  let g := f - (fun _ ‚Ü¶ a‚ÇÄ)

  have t‚ÇÄ‚ÇÄ (x : ‚Ñù) : log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ ‚â§ log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ + log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
    unfold g
    simp only [Pi.sub_apply]

    calc log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ
    _ = log‚Å∫ ‚Äñg (circleMap 0 r x) + a‚ÇÄ‚Äñ := by
      unfold g
      simp
    _ ‚â§ log‚Å∫ (‚Äñg (circleMap 0 r x)‚Äñ + ‚Äña‚ÇÄ‚Äñ) := by
      apply monotoneOn_posLog
      refine Set.mem_Ici.mpr ?_
      apply norm_nonneg
      refine Set.mem_Ici.mpr ?_
      apply add_nonneg
      apply norm_nonneg
      apply norm_nonneg
      --
      apply norm_add_le
    _ ‚â§ log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ + log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
      convert posLog_add using 1
      ring

  have t‚ÇÅ‚ÇÄ (x : ‚Ñù) : log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ - log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ ‚â§ log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
    rw [sub_le_iff_le_add]
    nth_rw 1 [add_comm]
    rw [‚Üêadd_assoc]
    apply t‚ÇÄ‚ÇÄ x
  clear t‚ÇÄ‚ÇÄ

  have t‚ÇÄ‚ÇÅ (x : ‚Ñù) : log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ ‚â§ log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ + log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
    unfold g
    simp only [Pi.sub_apply]

    calc log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ
    _ = log‚Å∫ ‚Äñf (circleMap 0 r x) - a‚ÇÄ‚Äñ := by
      unfold g
      simp
    _ ‚â§ log‚Å∫ (‚Äñf (circleMap 0 r x)‚Äñ + ‚Äña‚ÇÄ‚Äñ) := by
      apply monotoneOn_posLog
      refine Set.mem_Ici.mpr ?_
      apply norm_nonneg
      refine Set.mem_Ici.mpr ?_
      apply add_nonneg
      apply norm_nonneg
      apply norm_nonneg
      --
      apply norm_sub_le
    _ ‚â§ log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ + log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
      convert posLog_add using 1
      ring

  have t‚ÇÅ‚ÇÅ (x : ‚Ñù) : log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ - log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ ‚â§ log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
    rw [sub_le_iff_le_add]
    nth_rw 1 [add_comm]
    rw [‚Üêadd_assoc]
    apply t‚ÇÄ‚ÇÅ x
  clear t‚ÇÄ‚ÇÅ

  have t‚ÇÇ {x : ‚Ñù} : ‚Äñlog‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ - log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ‚Äñ ‚â§ log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
    by_cases h : 0 ‚â§ log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ - log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ
    ¬∑ rw [norm_of_nonneg h]
      exact t‚ÇÅ‚ÇÄ x
    ¬∑ rw [norm_of_nonpos (by linarith)]
      rw [neg_sub]
      exact t‚ÇÅ‚ÇÅ x
  clear t‚ÇÅ‚ÇÄ t‚ÇÅ‚ÇÅ

  have s‚ÇÄ : ‚Äñ‚à´ (x : ‚Ñù) in (0)..(2 * œÄ), log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ - log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ‚Äñ ‚â§ (log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2) * |2 * œÄ - 0| := by
    apply intervalIntegral.norm_integral_le_of_norm_le_const
    intro x hx
    exact t‚ÇÇ
  clear t‚ÇÇ
  simp only [norm_eq_abs, sub_zero] at s‚ÇÄ
  rw [smul_eq_mul, abs_mul]

  have s‚ÇÅ : |(2 * œÄ)‚Åª¬π| * |‚à´ (x : ‚Ñù) in (0)..(2 * œÄ), log‚Å∫ ‚Äñf (circleMap 0 r x)‚Äñ - log‚Å∫ ‚Äñg (circleMap 0 r x)‚Äñ| ‚â§ |(2 * œÄ)‚Åª¬π| * ((log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2) * |2 * œÄ|) := by
    apply mul_le_mul_of_nonneg_left
    exact s‚ÇÄ
    apply abs_nonneg
  have : |(2 * œÄ)‚Åª¬π| * ((log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2) * |2 * œÄ|) = log‚Å∫ ‚Äña‚ÇÄ‚Äñ + log 2 := by
    rw [mul_comm, mul_assoc]
    have : |2 * œÄ| * |(2 * œÄ)‚Åª¬π| = 1 := by
      rw [abs_mul, abs_inv, abs_mul]
      rw [abs_of_pos pi_pos]
      simp [pi_ne_zero]
      ring_nf
      simp [pi_ne_zero]
    rw [this]
    simp
  rw [this] at s‚ÇÅ
  assumption
  --
  apply MeromorphicOn.circleIntegrable_posLog_norm
  exact fun x a => h x trivial
  --
  apply MeromorphicOn.circleIntegrable_posLog_norm (f := fun z ‚Ü¶ f z - a‚ÇÄ)
  apply MeromorphicOn.sub
  exact fun x a => h x trivial
  apply MeromorphicOn.const a‚ÇÄ

/--
Second part of the First Main Theorem of Value Distribution Theory, qualitative
version: If `f` is meromorphic on the complex plane, then the characteristic
functions for the value `‚ä§` of the function `f` and `f - a‚ÇÄ` agree
asymptotically up to a bounded function.
-/
theorem FirstMainTheorem‚ÇÇ' (h : MeromorphicOn f ‚ä§) :
    |(characteristic f ‚ä§) - (characteristic (f ¬∑ - a‚ÇÄ) ‚ä§)| =O[Filter.atTop] (1 : ‚Ñù ‚Üí ‚Ñù) := by
  simp_rw [isBigO_iff', Filter.eventually_atTop]
  use posLog ‚Äña‚ÇÄ‚Äñ + log 2, add_pos_of_nonneg_of_pos posLog_nonneg (log_pos one_lt_two), 0
  simp [FirstMainTheorem‚ÇÇ h]

end ValueDistribution
