import Mathlib.Analysis.Complex.ValueDistribution.CountingFunction

open MeromorphicOn Metric Real Set Classical

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] [ProperSpace E]
  {U : Set ùïú} {f g : ùïú ‚Üí E} {a : WithTop E} {a‚ÇÄ : E}

theorem finsum_le_finsum
    {Œ± R : Type*} [AddCommMonoid R] [LinearOrder R] [AddLeftMono R]
    (f‚ÇÅ f‚ÇÇ : Œ± ‚Üí R) (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hf‚ÇÅ : f‚ÇÅ.support.Finite) (hf‚ÇÇ : f‚ÇÇ.support.Finite) :
    ‚àë·∂† (a : Œ±), f‚ÇÅ a ‚â§ ‚àë·∂† (a : Œ±), f‚ÇÇ a := by
  rw [finsum_eq_sum_of_support_subset f‚ÇÅ (by simp : f‚ÇÅ.support ‚äÜ (hf‚ÇÅ.toFinset ‚à™ hf‚ÇÇ.toFinset : Finset Œ±))]
  rw [finsum_eq_sum_of_support_subset f‚ÇÇ (by simp : f‚ÇÇ.support ‚äÜ (hf‚ÇÅ.toFinset ‚à™ hf‚ÇÇ.toFinset : Finset Œ±))]
  exact Finset.sum_le_sum fun a _ ‚Ü¶ hf a

namespace MeromorphicOn


end MeromorphicOn

/-!
Statements about functions with locally finite support
-/

namespace Function.locallyFinsuppWithin

variable
  {X : Type*} [TopologicalSpace X] {U : Set X}
  {Y : Type*} [AddCommGroup Y] [LinearOrder Y]

theorem posPart_le
    (f‚ÇÅ f‚ÇÇ : Function.locallyFinsuppWithin U Y) (h : f‚ÇÅ ‚â§ f‚ÇÇ):
    f‚ÇÅ‚Å∫ ‚â§ f‚ÇÇ‚Å∫ := by
  intro x
  by_cases hf : f‚ÇÅ x ‚â§ 0
  ¬∑ simp [instPosPart, hf]
  ¬∑ simp [instPosPart, h x, (lt_of_lt_of_le (not_le.1 hf) (h x)).le]

theorem negPart_le
    (f‚ÇÅ f‚ÇÇ : Function.locallyFinsuppWithin U Y) (h : f‚ÇÅ ‚â§ f‚ÇÇ):
    f‚ÇÅ‚Åª ‚â§ f‚ÇÇ‚Åª := by
  intro x
  by_cases hf : 0 ‚â§ f‚ÇÅ x
  ¬∑ simp [instNegPart]
    sorry
  ¬∑ simp [instNegPart]
    sorry

variable [IsOrderedAddMonoid Y]

theorem posPart_add
    (f‚ÇÅ f‚ÇÇ : Function.locallyFinsuppWithin U Y) :
    (f‚ÇÅ + f‚ÇÇ)‚Å∫ ‚â§ f‚ÇÅ‚Å∫ + f‚ÇÇ‚Å∫ := by
  rw [instPosPart, Function.locallyFinsuppWithin.le_def]
  intro x
  simp only [Function.locallyFinsuppWithin.max_apply, Function.locallyFinsuppWithin.coe_add,
    Pi.add_apply, Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, sup_le_iff]
  constructor
  ¬∑ simp [add_le_add]
  ¬∑ simp [add_nonneg]

theorem negPart_add
    (f‚ÇÅ f‚ÇÇ : Function.locallyFinsuppWithin U Y) :
    (f‚ÇÅ + f‚ÇÇ)‚Åª ‚â§ f‚ÇÅ‚Åª + f‚ÇÇ‚Åª := by
  rw [instNegPart, Function.locallyFinsuppWithin.le_def]
  intro x
  simp only [neg_add_rev, Function.locallyFinsuppWithin.max_apply,
    Function.locallyFinsuppWithin.coe_add, Function.locallyFinsuppWithin.coe_neg, Pi.add_apply,
    Pi.neg_apply, Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, sup_le_iff]
  constructor
  ¬∑ simp [add_comm, add_le_add]
  ¬∑ simp [add_nonneg]

theorem logCounting_le (f‚ÇÅ f‚ÇÇ : locallyFinsuppWithin (univ : Set E) ‚Ñ§) (h : f‚ÇÅ ‚â§ f‚ÇÇ) :
    logCounting f‚ÇÅ‚Å∫ ‚â§ logCounting f‚ÇÇ‚Å∫ := by
  intro r
  have hr : 1 < r := sorry
  simp [logCounting]
  apply add_le_add
  ¬∑ apply finsum_le_finsum
    ¬∑ intro a
      simp
      apply mul_le_mul
      ¬∑ sorry
      ¬∑ sorry
      ¬∑ sorry
      ¬∑ sorry
    ¬∑ sorry
    ¬∑ sorry
  ¬∑ apply mul_le_mul
    ¬∑ simpa using posPart_le f‚ÇÅ f‚ÇÇ h 0
    ¬∑ rfl
    ¬∑ exact (log_pos hr).le
    ¬∑ simpa using posPart_nonneg f‚ÇÇ 0

end Function.locallyFinsuppWithin

namespace ValueDistribution

variable [ProperSpace ùïú]

/--
The counting function counting zeros of `f * g` is less than or equal to the sum
of the counting functions counting zeros of `f` and `g`, respectively.
-/
@[simp] theorem logCounting_mul {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí ùïú} (hf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (hf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) :
    logCounting (f‚ÇÅ * f‚ÇÇ) 0 ‚â§ logCounting f‚ÇÅ 0 + logCounting f‚ÇÇ 0 := by
  unfold logCounting
  simp only [WithTop.zero_ne_top, ‚ÜìreduceDIte, WithTop.untop‚ÇÄ_zero, sub_zero]
  rw [divisor_mul hf‚ÇÅ hf‚ÇÇ]
  rw [‚Üê Function.locallyFinsuppWithin.logCounting.map_add]
  simp
  sorry

end ValueDistribution
