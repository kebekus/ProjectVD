/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.InnerProductSpace.Harmonic.Analytic
import Mathlib.Analysis.Complex.HasPrimitives

open Complex InnerProductSpace Metric

variable
  {f : ‚ÑÇ ‚Üí ‚Ñù} {x : ‚ÑÇ}

/-
If a function `f : ‚ÑÇ ‚Üí ‚Ñù' is harmonic on an open ball, then `f` is the real part
of a function `F : ‚ÑÇ ‚Üí ‚ÑÇ` that is holomorphic on the ball.
-/
theorem harmonic_is_realOfHolomorphic {z : ‚ÑÇ} {R : ‚Ñù} (hR : 0 < R)
    (hf : HarmonicOnNhd f (ball z R)) :
    ‚àÉ F, (AnalyticOnNhd ‚ÑÇ F (ball z R)) ‚àß ((ball z R).EqOn (Complex.reCLM ‚àò F) f) := by
  let g := ofRealCLM ‚àò (fderiv ‚Ñù f ¬∑ 1) - I ‚Ä¢ ofRealCLM ‚àò (fderiv ‚Ñù f ¬∑ I)
  have hg : DifferentiableOn ‚ÑÇ g (ball z R) := by
    intro x hx
    apply DifferentiableAt.differentiableWithinAt
    exact HarmonicAt.differentiableAt_complex_partial (hf x hx)
  obtain ‚ü®F‚ÇÄ, hF‚ÇÄ‚ü© := hg.isExactOn_ball
  let F := fun x ‚Ü¶ F‚ÇÄ x - F‚ÇÄ z + f z
  have h‚ÇÅF : ‚àÄ z‚ÇÅ ‚àà ball z R, HasDerivAt F (g z‚ÇÅ) z‚ÇÅ := by
    simp_all [F]
  have h‚ÇÇF : DifferentiableOn ‚ÑÇ F (ball z R) :=
    fun x hx ‚Ü¶ (h‚ÇÅF x hx).differentiableAt.differentiableWithinAt
  have h‚ÇÉF : DifferentiableOn ‚Ñù F (ball z R) :=
    h‚ÇÇF.restrictScalars (ùïú := ‚Ñù) (ùïú' := ‚ÑÇ)
  use F, h‚ÇÇF.analyticOnNhd isOpen_ball
  intro x hx
  apply (convex_ball z R).eqOn_of_fderivWithin_eq (ùïú := ‚Ñù) (x := z)
  ¬∑ apply reCLM.differentiable.differentiableOn.comp (t := Set.univ) h‚ÇÉF
    tauto
  ¬∑ intro y hy
    apply DifferentiableAt.differentiableWithinAt
    apply ContDiffAt.differentiableAt (hf y hy).1 one_le_two
  ¬∑ exact isOpen_ball.uniqueDiffOn
  ¬∑ intro y hy
    have h‚ÇÑF := (h‚ÇÅF y hy).differentiableAt
    have h‚ÇÖF := h‚ÇÑF.restrictScalars (ùïú := ‚Ñù) (ùïú' := ‚ÑÇ)
    rw [fderivWithin_eq_fderiv (isOpen_ball.uniqueDiffWithinAt hy) (reCLM.differentiableAt.comp y h‚ÇÖF)]
    rw [fderivWithin_eq_fderiv (isOpen_ball.uniqueDiffWithinAt hy) ((hf y hy).1.differentiableAt one_le_two)]
    rw [fderiv_comp y (by fun_prop) h‚ÇÖF]
    rw [ContinuousLinearMap.fderiv]
    rw [h‚ÇÑF.fderiv_restrictScalars (ùïú := ‚Ñù)]
    ext a
    nth_rw 2 [(by simp : a = a.re ‚Ä¢ (1 : ‚ÑÇ) + a.im ‚Ä¢ (I : ‚ÑÇ))]
    rw [ContinuousLinearMap.map_add, ContinuousLinearMap.map_smul, ContinuousLinearMap.map_smul]
    simp [HasDerivAt.deriv (h‚ÇÅF y hy), g]
  ¬∑ simp [hR]
  ¬∑ simp [F]
  ¬∑ assumption
