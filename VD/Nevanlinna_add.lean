import VD.ToMathlib.Nevanlinna_mul

open MeromorphicOn Metric Real Set Classical

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] [ProperSpace E]
  {U : Set ùïú} {f g : ùïú ‚Üí E} {a : WithTop E} {a‚ÇÄ : E}


/-- Circle averages commute with addition. -/
theorem circleAverage_add_fun {c : ‚ÑÇ} {R : ‚Ñù} {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} (hf‚ÇÅ : CircleIntegrable f‚ÇÅ c R)
    (hf‚ÇÇ : CircleIntegrable f‚ÇÇ c R) :
    circleAverage (fun z ‚Ü¶ f‚ÇÅ z + f‚ÇÇ z) c R = circleAverage f‚ÇÅ c R + circleAverage f‚ÇÇ c R :=
  circleAverage_add hf‚ÇÅ hf‚ÇÇ

namespace Function.locallyFinsuppWithin

variable
  {X : Type*} [TopologicalSpace X] {U : Set X}
  {Y : Type*} [AddCommGroup Y] [LinearOrder Y] [IsOrderedAddMonoid Y]

end Function.locallyFinsuppWithin

namespace ValueDistribution

variable [ProperSpace ùïú]

theorem proximity_top_add_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) :
    proximity (f‚ÇÅ + f‚ÇÇ) ‚ä§ ‚â§ (proximity f‚ÇÅ ‚ä§) + (proximity f‚ÇÇ ‚ä§) + (fun _ ‚Ü¶ log 2) := by
  simp only [proximity, reduceDIte, Pi.add_apply]
  intro r
  have h‚ÇÇf‚ÇÅ : MeromorphicOn f‚ÇÅ (sphere 0 |r|) := fun x _ ‚Ü¶ h‚ÇÅf‚ÇÅ x trivial
  have h‚ÇÇf‚ÇÇ : MeromorphicOn f‚ÇÇ (sphere 0 |r|) := fun x _ ‚Ü¶ h‚ÇÅf‚ÇÇ x trivial
  have h‚ÇÉf‚ÇÅ := circleIntegrable_posLog_norm_meromorphicOn h‚ÇÇf‚ÇÅ
  have h‚ÇÉf‚ÇÇ := circleIntegrable_posLog_norm_meromorphicOn h‚ÇÇf‚ÇÇ
  calc circleAverage (fun x ‚Ü¶ log‚Å∫ ‚Äñf‚ÇÅ x + f‚ÇÇ x‚Äñ) 0 r
  _ ‚â§ circleAverage (fun x ‚Ü¶ log‚Å∫ ‚Äñf‚ÇÅ x‚Äñ + log‚Å∫ ‚Äñf‚ÇÇ x‚Äñ + log 2) 0 r :=
    circleAverage_mono (circleIntegrable_posLog_norm_meromorphicOn (fun_add h‚ÇÇf‚ÇÅ h‚ÇÇf‚ÇÇ))
      ((h‚ÇÉf‚ÇÅ.add h‚ÇÉf‚ÇÇ).add (circleIntegrable_const (log 2) 0 r))
      fun x _ ‚Ü¶ posLog_norm_add_le (f‚ÇÅ x) (f‚ÇÇ x)
  _ = circleAverage (log‚Å∫ ‚Äñf‚ÇÅ ¬∑‚Äñ) 0 r + circleAverage (log‚Å∫ ‚Äñf‚ÇÇ ¬∑‚Äñ) 0 r + log 2 := by
    rw [‚Üê circleAverage_add h‚ÇÉf‚ÇÅ h‚ÇÉf‚ÇÇ, ‚Üê circleAverage_const (log 2),
      ‚Üê circleAverage_add (h‚ÇÉf‚ÇÅ.add h‚ÇÉf‚ÇÇ) (circleIntegrable_const (log 2) 0 r)]
    congr 1
    ext
    simp [circleAverage_const]

end ValueDistribution
