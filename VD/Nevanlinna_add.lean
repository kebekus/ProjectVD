import VD.ToMathlib.Nevanlinna_mul

open MeromorphicOn Metric Real Set Classical

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {U : Set ùïú} {f g : ùïú ‚Üí E} {a : WithTop E} {a‚ÇÄ : E}


@[simp]
theorem WithTop.max_untop‚ÇÄ {Œ± : Type*} [AddCommGroup Œ±] [LinearOrder Œ±] {a b : WithTop Œ±}
    (ha : a ‚â† ‚ä§) (hb : b ‚â† ‚ä§) :
    (max a b).untop‚ÇÄ = max a.untop‚ÇÄ b.untop‚ÇÄ := by
  lift a to Œ± using ha
  lift b to Œ± using hb
  simp only [untop‚ÇÄ_coe]
  by_cases h : a ‚â§ b
  ¬∑ simp [max_eq_right h, max_eq_right (coe_le_coe.mpr h)]
  rw [not_le] at h
  simp [max_eq_left h.le, max_eq_left (coe_lt_coe.mpr h).le]

@[simp]
theorem WithTop.min_untop‚ÇÄ {Œ± : Type*} [AddCommGroup Œ±] [LinearOrder Œ±] {a b : WithTop Œ±}
    (ha : a ‚â† ‚ä§) (hb : b ‚â† ‚ä§) :
    (min a b).untop‚ÇÄ = min a.untop‚ÇÄ b.untop‚ÇÄ := by
  lift a to Œ± using ha
  lift b to Œ± using hb
  simp only [untop‚ÇÄ_coe]
  by_cases h : a ‚â§ b
  ¬∑ simp [min_eq_left h, min_eq_left (coe_le_coe.mpr h)]
  rw [not_le] at h
  simp [min_eq_right h.le, min_eq_right (coe_lt_coe.mpr h).le]

@[simp]
theorem WithTop.le_of_untop‚ÇÄ_le_untop‚ÇÄ {Œ± : Type*} [AddCommGroup Œ±] [LinearOrder Œ±] {a b : WithTop Œ±}
    (ha : a ‚â† ‚ä§) (h : a.untop‚ÇÄ ‚â§ b.untop‚ÇÄ) :
    a ‚â§ b := by
  lift a to Œ± using ha
  by_cases hb : b = ‚ä§
  ¬∑ simp_all
  lift b to Œ± using hb
  simp_all

@[simp]
theorem WithTop.untop‚ÇÄ_le_untop‚ÇÄ_of_le {Œ± : Type*} [AddCommGroup Œ±] [LinearOrder Œ±] {a b : WithTop Œ±}
    (hb : b ‚â† ‚ä§) (h : a ‚â§ b) :
    a.untop‚ÇÄ ‚â§ b.untop‚ÇÄ := by
  lift b to Œ± using hb
  by_cases ha : a = ‚ä§
  ¬∑ simp_all
  lift a to Œ± using ha
  simp_all

namespace Function.locallyFinsuppWithin

variable
  {X : Type*} [TopologicalSpace X] {U : Set X}
  {Y : Type*} [AddCommGroup Y] [LinearOrder Y]

lemma posPart_apply (a : locallyFinsuppWithin U Y) (x : X) :
    a‚Å∫ x = (a x)‚Å∫ := by rfl

lemma negPart_apply (a : locallyFinsuppWithin U Y) (x : X) :
    a‚Åª x = (a x)‚Åª := by rfl

variable [IsOrderedAddMonoid Y]

theorem neg_min (a b : locallyFinsuppWithin U Y) :
    (min a b)‚Åª = max a‚Åª b‚Åª := by
  ext x
  rw [max_apply, negPart_apply, negPart_apply, negPart_apply, min_apply]
  rcases lt_trichotomy (a x) (b x) with h | h | h
  ¬∑ rw [min_eq_left h.le, max_comm, max_eq_right ((le_iff_posPart_negPart (a x) (b x)).1 h.le).2]
  ¬∑ simp_all
  ¬∑ rw [min_comm, min_eq_left h.le, max_eq_right ((le_iff_posPart_negPart (b x) (a x)).1 h.le).2]

end Function.locallyFinsuppWithin

namespace ValueDistribution

variable [ProperSpace ùïú]


theorem xx‚ÇÅ {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} {U : Set ‚ÑÇ} (hf‚ÇÅ : MeromorphicOn f‚ÇÅ U)  (hf‚ÇÇ : MeromorphicOn f‚ÇÇ U)
    (h‚ÇÅz : z ‚àà U) (h‚ÇÉ : meromorphicOrderAt (f‚ÇÅ + f‚ÇÇ) z ‚â† ‚ä§) :
    min (divisor f‚ÇÅ U z) (divisor f‚ÇÇ U z) ‚â§ divisor (f‚ÇÅ + f‚ÇÇ) U z := by
  by_cases hz : z ‚àâ U
  ¬∑ simp_all
  simp only [Decidable.not_not] at hz
  rw [divisor_apply hf‚ÇÅ hz, divisor_apply hf‚ÇÇ hz, divisor_apply (hf‚ÇÅ.add hf‚ÇÇ) hz]
  by_cases h‚ÇÅ : meromorphicOrderAt f‚ÇÅ z = ‚ä§
  ¬∑ sorry
  have h‚ÇÇ : meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§ := by sorry
  rw [‚Üê WithTop.min_untop‚ÇÄ h‚ÇÅ h‚ÇÇ]
  apply WithTop.untop‚ÇÄ_le_untop‚ÇÄ_of_le (h‚ÇÉ z hz)
  exact meromorphicOrderAt_add (hf‚ÇÅ z hz) (hf‚ÇÇ z hz)


theorem xx‚ÇÇ {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} {U : Set ‚ÑÇ} (hf‚ÇÅ : MeromorphicOn f‚ÇÅ U)  (hf‚ÇÇ : MeromorphicOn f‚ÇÇ U) :
    (divisor (f‚ÇÅ + f‚ÇÇ) U)‚Åª ‚â§ (divisor f‚ÇÅ U)‚Åª + (divisor f‚ÇÇ U)‚Åª := by
  intro z
  by_cases hz : z ‚àâ U
  ¬∑ simp [hz]
  simp at hz
  simp [Function.locallyFinsuppWithin.negPart_apply]
  by_cases hf‚ÇÅ‚ÇÇ : meromorphicOrderAt (f‚ÇÅ + f‚ÇÇ) z = ‚ä§
  ¬∑ sorry

  have := xx‚ÇÅ hf‚ÇÅ hf‚ÇÇ hz hf‚ÇÅ‚ÇÇ

  have A := ((le_iff_posPart_negPart (min (divisor f‚ÇÅ U z) (divisor f‚ÇÇ U z)) (divisor (f‚ÇÅ + f‚ÇÇ) U z)).1 this).2
  rw [Function.locallyFinsuppWithin.neg_min] at A
  intro z

  intro z
  simp
  rw [negPart]
  --rw [instNegPart]
  simp [instNegPart]
  rw [Function.locallyFinsuppWithin.min_apply]

  rw [Function.locallyFinsuppWithin.instNegPart]
  sorry

/--
The counting function of `f + g` at `‚ä§` is less than or equal to the sum of the
counting functions of `f` and `g`.
-/
theorem counting_top_add_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) :
    logCounting (f‚ÇÅ + f‚ÇÇ) ‚ä§ ‚â§ (logCounting f‚ÇÅ ‚ä§) + (logCounting f‚ÇÇ ‚ä§) := by
  simp [logCounting]
  sorry

end ValueDistribution
