/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Normed.Field.Basic
import VD.ToMathlib.codiscreteWithin

/-!
# Divisors on subsets of normed fields

This file defines divisors, a standard book-keeping tool in complex analysis
used to keep track of pole/vanishing orders of meromorphic objects, typically
functions or differential forms.

## TODOs

- Restriction and extension of divisors as group morphisms
- Decomposition into positive/negative components
- Constructions: The divisor of a meromorphic function, behavior under product
  of meromorphic functions, behavior under addition, behavior under restriction
- Local finiteness of the support
- Degree
- Nevanlinna counting functions
- Construction: The divisor of a rational polynomial
-/

open Filter Set Topology

variable {ùïú : Type u_1} [NontriviallyNormedField ùïú] {U : Set ùïú}

/-!
## Definition
-/

structure Divisor (U : Set ùïú) where
  toFun : ùïú ‚Üí ‚Ñ§
  supportInU : toFun.support ‚äÜ U
  supportDiscreteWithinU : toFun =·∂†[Filter.codiscreteWithin U] 0

instance (U : Set ùïú) : CoeFun (Divisor U) (fun _ ‚Ü¶ ùïú ‚Üí ‚Ñ§) where
  coe := Divisor.toFun

attribute [coe] Divisor.toFun

noncomputable def Divisor.deg (D : Divisor U) : ‚Ñ§ := ‚àë·∂† z, D.toFun z


/-!
## Instances and basic extensionality
-/

instance instFunLike : FunLike (Divisor U) ùïú ‚Ñ§ where
  coe := fun D ‚Ü¶ D.toFun
  coe_injective' := by
    rintro ‚ü®D‚ÇÅ, h‚ÇÅD‚ÇÅ, h‚ÇÇD‚ÇÅ‚ü© ‚ü®D‚ÇÇ, h‚ÇÅD‚ÇÇ, h‚ÇÇD‚ÇÇ‚ü©
    simp

@[ext]
theorem ext {D‚ÇÅ D‚ÇÇ : Divisor U} (h : ‚àÄ a, D‚ÇÅ.toFun a = D‚ÇÇ.toFun a) : D‚ÇÅ = D‚ÇÇ := DFunLike.ext _ _ h

/-!
## Ordered group structure
-/

instance instZero : Zero (Divisor U) where
  zero := ‚ü®fun _ ‚Ü¶ 0, by simp, Eq.eventuallyEq rfl‚ü©

@[simp]
theorem zero_fun : (0 : Divisor U).toFun = 0 := rfl

instance : Add (Divisor U) where
  add := by
    intro D‚ÇÅ D‚ÇÇ
    exact {
      toFun := D‚ÇÅ.toFun + D‚ÇÇ.toFun
      supportInU := by
        intro x
        contrapose
        intro hx
        have h‚ÇÅx : D‚ÇÅ x = 0 := Function.nmem_support.mp fun a ‚Ü¶ hx (D‚ÇÅ.supportInU a)
        have h‚ÇÇx : D‚ÇÇ x = 0 := Function.nmem_support.mp fun a ‚Ü¶ hx (D‚ÇÇ.supportInU a)
        simp [h‚ÇÅx, h‚ÇÇx]
      supportDiscreteWithinU := by
        apply EventuallyEq.add (f := D‚ÇÅ) (g := 0) (f' := D‚ÇÇ) (g' := 0)
        exact D‚ÇÅ.supportDiscreteWithinU
        exact D‚ÇÇ.supportDiscreteWithinU
    }

@[simp]
theorem add_fun {D‚ÇÅ D‚ÇÇ : Divisor U} : (D‚ÇÅ + D‚ÇÇ).toFun = D‚ÇÅ.toFun + D‚ÇÇ.toFun := rfl

instance : Neg (Divisor U) where
  neg := by
    intro D
    exact {
      toFun := -D.toFun
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx
      supportDiscreteWithinU := by
        apply EventuallyEq.neg (f := D) (g := 0)
        exact D.supportDiscreteWithinU
    }

@[simp]
theorem neg_fun {D : Divisor U} : (-D).toFun = -(D.toFun) := rfl

instance nsmul : SMul ‚Ñï (Divisor U) where
  smul := by
    intro n D
    exact {
      toFun := fun z ‚Ü¶ n * D z
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx.2
      supportDiscreteWithinU := by
        filter_upwards [D.supportDiscreteWithinU]
        intro x hx
        simp [hx]
    }

@[simp]
theorem nsmul_fun {D : Divisor U} {n : ‚Ñï} : (n ‚Ä¢ D).toFun = n ‚Ä¢ (D.toFun) := rfl

instance zsmul : SMul ‚Ñ§ (Divisor U) where
  smul := fun n D ‚Ü¶
    {
      toFun := fun z ‚Ü¶ n * D z
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx.2
      supportDiscreteWithinU := by
        filter_upwards [D.supportDiscreteWithinU]
        intro x hx
        simp [hx]
    }

@[simp]
theorem zsmul_fun {D : Divisor U} {n : ‚Ñ§} : (n ‚Ä¢ D).toFun = n ‚Ä¢ (D.toFun) := rfl

instance : LE (Divisor U) where
  le := fun D‚ÇÅ D‚ÇÇ ‚Ü¶ D‚ÇÅ.toFun ‚â§ D‚ÇÇ.toFun

@[simp]
theorem le_fun {D‚ÇÅ D‚ÇÇ : Divisor U} : D‚ÇÅ ‚â§ D‚ÇÇ ‚Üî D‚ÇÅ.toFun ‚â§ D‚ÇÇ.toFun := ‚ü®(¬∑),(¬∑)‚ü©

instance : OrderedAddCommGroup (Divisor U) where
  add := (¬∑ + ¬∑ )
  add_assoc := fun _ _ _ ‚Ü¶ by ext; simp [add_assoc]
  zero := 0
  zero_add := fun _ ‚Ü¶ by ext; simp
  add_zero := fun _ ‚Ü¶ by ext; simp
  nsmul := (¬∑ ‚Ä¢ ¬∑)
  neg := (- ¬∑)
  zsmul := (¬∑ ‚Ä¢ ¬∑)
  neg_add_cancel := fun _ ‚Ü¶ by ext; simp
  add_comm := fun _ _ ‚Ü¶ by ext; simp [add_comm]
  nsmul_zero := fun _ ‚Ü¶ by ext; simp
  nsmul_succ := fun _ _ ‚Ü¶ by ext; simp [add_one_mul]
  zsmul_zero' := fun _ ‚Ü¶ by ext; simp
  zsmul_succ' := fun _ _ ‚Ü¶ by ext; simp [add_one_mul]
  zsmul_neg' := fun _ _ ‚Ü¶ by ext; simp; apply negSucc_zsmul
  le := (¬∑ ‚â§ ¬∑)
  le_refl := by tauto
  le_trans := fun D‚ÇÅ D‚ÇÇ D‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ ‚Ü¶ by simp [le_fun,
    Preorder.le_trans (D‚ÇÅ.toFun) (D‚ÇÇ.toFun) (D‚ÇÉ.toFun) h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ]
  le_antisymm := fun _ _ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ ‚Ü¶ by ext x; exact Int.le_antisymm (h‚ÇÅ‚ÇÇ x) (h‚ÇÇ‚ÇÅ x)
  add_le_add_left := fun _ _ _ _ ‚Ü¶ by simpa

/-!
## Elementary properties of the support
-/

theorem Divisor.discreteSupport (D : Divisor U) :
    DiscreteTopology D.toFun.support := by
  have : Function.support D = {x | D x = 0}·∂ú ‚à© U := by
    ext x
    constructor
    ¬∑ exact fun hx ‚Ü¶ ‚ü®by tauto, D.supportInU hx‚ü©
    ¬∑ intro hx
      rw [mem_inter_iff, mem_compl_iff, mem_setOf_eq] at hx
      tauto
  convert discreteTopology_of_codiscreteWithin (D.supportDiscreteWithinU)

theorem Divisor.closedSupport (D : Divisor U) (hU : IsClosed U) :
    IsClosed D.toFun.support := by
  rw [‚Üê isOpen_compl_iff, isOpen_iff_eventually]
  intro x hx
  by_cases h‚ÇÅx : x ‚àà U
  ¬∑ have Z‚ÇÅ := D.supportDiscreteWithinU
    rw [EventuallyEq, Filter.Eventually, mem_codiscreteWithin] at Z‚ÇÅ
    filter_upwards [eventually_nhdsWithin_iff.1 (Filter.disjoint_principal_right.1 (Z‚ÇÅ x h‚ÇÅx))]
    intro a ha
    by_cases h‚ÇÇa : a = x
    ¬∑ simp [hx, h‚ÇÇa]
    ¬∑ have W := ha h‚ÇÇa
      simp at W
      by_cases h‚ÇÉa : a ‚àà U
      ¬∑ tauto
      ¬∑ have := D.supportInU
        by_contra hCon
        tauto
  ¬∑ rw [eventually_iff_exists_mem]
    use U·∂ú, hU.compl_mem_nhds h‚ÇÅx
    intro y hy
    simp
    exact Function.nmem_support.mp fun a ‚Ü¶ hy (D.supportInU a)

theorem Divisor.finiteSupport (D : Divisor U) (hU : IsCompact U) :
    Set.Finite D.toFun.support :=
  (hU.of_isClosed_subset (D.closedSupport hU.isClosed) D.supportInU).finite D.discreteSupport
