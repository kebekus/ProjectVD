/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Normed.Field.Basic
import VD.ToMathlib.codiscreteWithin

/-!
# Divisors on subsets of normed fields

This file defines divisors, a standard book-keeping tool in complex analysis
used to keep track of pole/vanishing orders of meromorphic objects, typically
functions or differential forms.

## TODOs

- Extensionality lemmas
- Group structure
- Partial ordering
- Restriction and extension of divisors as group morphisms
- Decomposition into positive/negative components
- Constructions: The divisor of a meromorphic function, behavior under product
  of meromorphic functions, behavior under addition, behavior under restriction
- Local finiteness of the support
- Degree
- Nevanlinna counting functions
- Construction: The divisor of a rational polynomial
-/

open Filter Set Topology

variable {ùïú : Type u_1} [NontriviallyNormedField ùïú] {U : Set ùïú}

/-!
## Definition
-/

structure Divisor (U : Set ùïú)
  where
  toFun : ùïú ‚Üí ‚Ñ§
  supportInU : toFun.support ‚äÜ U
  supportDiscreteWithinU : toFun =·∂†[Filter.codiscreteWithin U] 0

instance (U : Set ùïú) : CoeFun (Divisor U) (fun _ ‚Ü¶ ùïú ‚Üí ‚Ñ§)
  where
  coe := Divisor.toFun

attribute [coe] Divisor.toFun

/-!
## Instances and basic extensionality
-/

instance instFunLike : FunLike (Divisor U) ùïú ‚Ñ§ where
  coe := fun D ‚Ü¶ D.toFun
  coe_injective' := by
    rintro ‚ü®D‚ÇÅ, h‚ÇÅD‚ÇÅ, h‚ÇÇD‚ÇÅ‚ü© ‚ü®D‚ÇÇ, h‚ÇÅD‚ÇÇ, h‚ÇÇD‚ÇÇ‚ü©
    simp

@[ext]
theorem ext {D‚ÇÅ D‚ÇÇ : Divisor U} (h : ‚àÄ a, D‚ÇÅ.toFun a = D‚ÇÇ.toFun a) : D‚ÇÅ = D‚ÇÇ := DFunLike.ext _ _ h

lemma ne_iff {D‚ÇÅ D‚ÇÇ : Divisor U} : D‚ÇÅ ‚â† D‚ÇÇ ‚Üî ‚àÉ a, D‚ÇÅ a ‚â† D‚ÇÇ a := DFunLike.ne_iff

--

instance instZero : Zero (Divisor U) where
  zero := ‚ü®fun _ ‚Ü¶ 0, by simp, Eq.eventuallyEq rfl‚ü©

@[simp]
theorem zero_fun : (0 : Divisor U).toFun = 0 := rfl

lemma support_add (D‚ÇÅ D‚ÇÇ : Divisor U) :
    (D‚ÇÅ.toFun + D‚ÇÇ.toFun).support ‚äÜ D‚ÇÅ.toFun.support ‚à™ D‚ÇÇ.toFun.support := by
  intro x
  contrapose
  intro h‚ÇÅ h‚ÇÇ
  simp_all [h‚ÇÅ, h‚ÇÇ]

instance : Add (Divisor U) where
  add := by
    intro D‚ÇÅ D‚ÇÇ
    exact {
      toFun := D‚ÇÅ.toFun + D‚ÇÇ.toFun
      supportInU := by
        intro x hx
        have Z := support_add D‚ÇÅ D‚ÇÇ hx
        rcases Z with h | h
        ¬∑ exact D‚ÇÅ.supportInU h
        ¬∑ exact D‚ÇÇ.supportInU h
      supportDiscreteWithinU := by
        apply EventuallyEq.add (f := D‚ÇÅ) (g := 0) (f' := D‚ÇÇ) (g' := 0)
        exact D‚ÇÅ.supportDiscreteWithinU
        exact D‚ÇÇ.supportDiscreteWithinU
    }

@[simp]
theorem add_fun {D‚ÇÅ D‚ÇÇ : Divisor U} : (D‚ÇÅ + D‚ÇÇ).toFun = D‚ÇÅ.toFun + D‚ÇÇ.toFun := rfl

instance : Neg (Divisor U) where
  neg := by
    intro D
    exact {
      toFun := -D.toFun
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx
      supportDiscreteWithinU := by
        apply EventuallyEq.neg (f := D) (g := 0)
        exact D.supportDiscreteWithinU
    }

@[simp]
theorem neg_fun {D : Divisor U} : (-D).toFun = -(D.toFun)  := rfl

instance instAddCommGroup : AddCommGroup (Divisor U) where
  add := (¬∑ + ¬∑ )
  add_assoc := by
    intro _ _ _
    ext
    simp [add_assoc]
  zero := 0
  zero_add := by
    intro _
    ext
    simp
  add_zero := by
    intro _
    ext
    simp
  nsmul := by
    intro n D
    exact {
      toFun := fun z ‚Ü¶ n * D z
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx.2
      supportDiscreteWithinU := by
        apply EventuallyEq.mul (f := n) (g := n) (f' := D) (g' := 0)
        exact Eq.eventuallyEq rfl
        exact D.supportDiscreteWithinU
    }
  neg := (- ¬∑)
  zsmul := by
    intro n D
    exact {
      toFun := fun z ‚Ü¶ n * D z
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx.2
      supportDiscreteWithinU := by
        sorry
    }
  neg_add_cancel := by
    intros
    ext z
    simp
  add_comm := by
    intro D‚ÇÅ D‚ÇÇ
    ext
    simp
  nsmul_zero := by
    intro D
    ext z
    simp
  nsmul_succ := by
    intro n D
    ext z
    simp
    ring
  zsmul_zero' := by
    intro D
    ext
    simp
  zsmul_succ' := by
    intro n D
    ext
    simp
    ring
  zsmul_neg' := by
    intro n D
    ext
    simp
    sorry


/-
section Basic

variable [Zero M]



@[simp]
theorem mem_support_iff {f : Œ± ‚Üí‚ÇÄ M} : ‚àÄ {a : Œ±}, a ‚àà f.support ‚Üî f a ‚â† 0 :=
  @(f.mem_support_toFun)

@[simp, norm_cast]
theorem fun_support_eq (f : Œ± ‚Üí‚ÇÄ M) : Function.support f = f.support :=
  Set.ext fun _x => mem_support_iff.symm

theorem not_mem_support_iff {f : Œ± ‚Üí‚ÇÄ M} {a} : a ‚àâ f.support ‚Üî f a = 0 :=
  not_iff_comm.1 mem_support_iff.symm

@[simp, norm_cast]
theorem coe_eq_zero {f : Œ± ‚Üí‚ÇÄ M} : (f : Œ± ‚Üí M) = 0 ‚Üî f = 0 := by rw [‚Üê coe_zero, DFunLike.coe_fn_eq]

theorem ext_iff' {f g : Œ± ‚Üí‚ÇÄ M} : f = g ‚Üî f.support = g.support ‚àß ‚àÄ x ‚àà f.support, f x = g x :=
  ‚ü®fun h => h ‚ñ∏ ‚ü®rfl, fun _ _ => rfl‚ü©, fun ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© =>
    ext fun a => by
      classical
      exact if h : a ‚àà f.support then h‚ÇÇ a h else by
        have hf : f a = 0 := not_mem_support_iff.1 h
        have hg : g a = 0 := by rwa [h‚ÇÅ, not_mem_support_iff] at h
        rw [hf, hg]‚ü©

@[simp]
theorem support_eq_empty {f : Œ± ‚Üí‚ÇÄ M} : f.support = ‚àÖ ‚Üî f = 0 :=
  mod_cast @Function.support_eq_empty_iff _ _ _ f

theorem support_nonempty_iff {f : Œ± ‚Üí‚ÇÄ M} : f.support.Nonempty ‚Üî f ‚â† 0 := by
  simp only [Finsupp.support_eq_empty, Finset.nonempty_iff_ne_empty, Ne]

theorem card_support_eq_zero {f : Œ± ‚Üí‚ÇÄ M} : #f.support = 0 ‚Üî f = 0 := by simp

instance instDecidableEq [DecidableEq Œ±] [DecidableEq M] : DecidableEq (Œ± ‚Üí‚ÇÄ M) := fun f g =>
  decidable_of_iff (f.support = g.support ‚àß ‚àÄ a ‚àà f.support, f a = g a) ext_iff'.symm

theorem finite_support (f : Œ± ‚Üí‚ÇÄ M) : Set.Finite (Function.support f) :=
  f.fun_support_eq.symm ‚ñ∏ f.support.finite_toSet

theorem support_subset_iff {s : Set Œ±} {f : Œ± ‚Üí‚ÇÄ M} :
    ‚Üëf.support ‚äÜ s ‚Üî ‚àÄ a ‚àâ s, f a = 0 := by
  simp only [Set.subset_def, mem_coe, mem_support_iff]; exact forall_congr' fun a => not_imp_comm

/-- Given `Finite Œ±`, `equivFunOnFinite` is the `Equiv` between `Œ± ‚Üí‚ÇÄ Œ≤` and `Œ± ‚Üí Œ≤`.
  (All functions on a finite type are finitely supported.) -/
@[simps]
def equivFunOnFinite [Finite Œ±] : (Œ± ‚Üí‚ÇÄ M) ‚âÉ (Œ± ‚Üí M) where
  toFun := (‚áë)
  invFun f := mk (Function.support f).toFinite.toFinset f fun _a => Set.Finite.mem_toFinset _
  left_inv _f := ext fun _x => rfl
  right_inv _f := rfl

@[simp]
theorem equivFunOnFinite_symm_coe {Œ±} [Finite Œ±] (f : Œ± ‚Üí‚ÇÄ M) : equivFunOnFinite.symm f = f :=
  equivFunOnFinite.symm_apply_apply f

@[simp]
lemma coe_equivFunOnFinite_symm {Œ±} [Finite Œ±] (f : Œ± ‚Üí M) : ‚áë(equivFunOnFinite.symm f) = f := rfl

/--
If `Œ±` has a unique term, the type of finitely supported functions `Œ± ‚Üí‚ÇÄ Œ≤` is equivalent to `Œ≤`.
-/
@[simps!]
noncomputable def _root_.Equiv.finsuppUnique {Œπ : Type*} [Unique Œπ] : (Œπ ‚Üí‚ÇÄ M) ‚âÉ M :=
  Finsupp.equivFunOnFinite.trans (Equiv.funUnique Œπ M)

@[ext]
theorem unique_ext [Unique Œ±] {f g : Œ± ‚Üí‚ÇÄ M} (h : f default = g default) : f = g :=
  ext fun a => by rwa [Unique.eq_default a]

end Basic

-/
/-!
## Elementary properties of the support
-/

theorem Divisor.discreteSupport (D : Divisor U) :
    DiscreteTopology D.toFun.support := by
  have : Function.support D = {x | D x = 0}·∂ú ‚à© U := by
    ext x
    constructor
    ¬∑ exact fun hx ‚Ü¶ ‚ü®by tauto, D.supportInU hx‚ü©
    ¬∑ intro hx
      rw [mem_inter_iff, mem_compl_iff, mem_setOf_eq] at hx
      tauto
  convert discreteTopology_of_codiscreteWithin (D.supportDiscreteWithinU)

theorem Divisor.closedSupport (D : Divisor U) (hU : IsClosed U) :
    IsClosed D.toFun.support := by
  rw [‚Üê isOpen_compl_iff, isOpen_iff_eventually]
  intro x hx
  by_cases h‚ÇÅx : x ‚àà U
  ¬∑ have Z‚ÇÅ := D.supportDiscreteWithinU
    rw [EventuallyEq, Filter.Eventually, mem_codiscreteWithin] at Z‚ÇÅ
    filter_upwards [eventually_nhdsWithin_iff.1 (Filter.disjoint_principal_right.1 (Z‚ÇÅ x h‚ÇÅx))]
    intro a ha
    by_cases h‚ÇÇa : a = x
    ¬∑ simp [hx, h‚ÇÇa]
    ¬∑ have W := ha h‚ÇÇa
      simp at W
      by_cases h‚ÇÉa : a ‚àà U
      ¬∑ tauto
      ¬∑ have := D.supportInU
        by_contra hCon
        tauto
  ¬∑ rw [eventually_iff_exists_mem]
    use U·∂ú, hU.compl_mem_nhds h‚ÇÅx
    intro y hy
    simp
    exact Function.nmem_support.mp fun a ‚Ü¶ hy (D.supportInU a)

theorem Divisor.finiteSupport (D : Divisor U) (hU : IsCompact U) :
    Set.Finite D.toFun.support :=
  (hU.of_isClosed_subset (D.closedSupport hU.isClosed) D.supportInU).finite D.discreteSupport
