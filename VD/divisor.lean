/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Normed.Field.Basic
import Mathlib.Analysis.SpecialFunctions.Log.Basic
import VD.ToMathlib.codiscreteWithin

/-!
# Divisors on subsets of normed fields

This file defines divisors, a standard book-keeping tool in complex analysis
used to keep track of pole/vanishing orders of meromorphic objects, typically
functions or differential forms.

Throughout the present file, `ùïú` denotes a nontrivially normed field, and `U` a
subset of `ùïú`.

## TODOs

- Decomposition into positive/negative components
- Constructions: The divisor of a meromorphic function, behavior under product
  of meromorphic functions, behavior under addition, behavior under restriction
- Construction: The divisor of a rational polynomial
-/

open Filter Set Topology

variable {ùïú : Type u_1} [NontriviallyNormedField ùïú] {U : Set ùïú}

/-!
## Definition
-/

/-- A divisor on `U` is a function `ùïú ‚Üí ‚Ñ§` whose support is discrete within `U`
and entirely contained within `U`. -/
structure Divisor (U : Set ùïú) where
  toFun : ùïú ‚Üí ‚Ñ§
  supportInU : toFun.support ‚äÜ U
  supportDiscreteWithinU : toFun =·∂†[Filter.codiscreteWithin U] 0

/-!
## Coercion to functions and basic extensionality
-/

/-- A divisor can be coerced into a function ùïú ‚Üí ‚Ñ§ -/
instance (U : Set ùïú) : CoeFun (Divisor U) (fun _ ‚Ü¶ ùïú ‚Üí ‚Ñ§) where
  coe := Divisor.toFun

attribute [coe] Divisor.toFun

/-- Divisors are `FunLike`: the coercion from divisors to functions is injective. -/
instance : FunLike (Divisor U) ùïú ‚Ñ§ where
  coe := fun D ‚Ü¶ D.toFun
  coe_injective' := fun ‚ü®_, _, _‚ü© ‚ü®_, _, _‚ü© ‚Ü¶ by simp

/-- Helper lemma for the `ext` tactic: two divisors are equal if their
associated functions agree. -/
@[ext]
theorem ext {D‚ÇÅ D‚ÇÇ : Divisor U} (h : ‚àÄ a, D‚ÇÅ.toFun a = D‚ÇÇ.toFun a) : D‚ÇÅ = D‚ÇÇ := DFunLike.ext _ _ h

/-!
## Ordered group structure

This section equips divisors on `U` with the standard structure of an ordered
group, where addition and comparison of divisors are addition and pointwise
comparison of functions.
-/

/-- Divisors have a zero -/
instance : Zero (Divisor U) where
  zero := ‚ü®fun _ ‚Ü¶ 0, by simp, Eq.eventuallyEq rfl‚ü©

/-- Helper lemma for the `simp` tactic: the function of the zero-divisor is the
zero function. -/
@[simp]
theorem zero_fun : (0 : Divisor U).toFun = 0 := rfl

/-- Divisors can be added -/
instance : Add (Divisor U) where
  add := by
    intro D‚ÇÅ D‚ÇÇ
    exact {
      toFun := D‚ÇÅ.toFun + D‚ÇÇ.toFun
      supportInU := by
        intro x
        contrapose
        intro hx
        simp [Function.nmem_support.1 fun a ‚Ü¶ hx (D‚ÇÅ.supportInU a),
          Function.nmem_support.1 fun a ‚Ü¶ hx (D‚ÇÇ.supportInU a)]
      supportDiscreteWithinU := D‚ÇÅ.supportDiscreteWithinU.add D‚ÇÇ.supportDiscreteWithinU
    }

/-- Helper lemma for the `simp` tactic: the function of the sum of two divisors
is the sum of the associated functions. -/
@[simp]
lemma add_fun {D‚ÇÅ D‚ÇÇ : Divisor U} : (D‚ÇÅ + D‚ÇÇ).toFun = D‚ÇÅ.toFun + D‚ÇÇ.toFun := rfl

/-- Divisors have a negative -/
instance : Neg (Divisor U) where
  neg := by
    intro D
    exact {
      toFun := -D.toFun
      supportInU := by
        intro x hx
        rw [Function.support_neg', Function.mem_support, ne_eq] at hx
        exact D.supportInU hx
      supportDiscreteWithinU := D.supportDiscreteWithinU.neg
    }

/-- Helper lemma for the `simp` tactic: the function of the negative divisor
is the negative of the associated function. -/
@[simp]
lemma neg_fun {D : Divisor U} : (-D).toFun = -(D.toFun) := rfl

/-- Divisors have scalar multiplication with natural numbers -/
instance : SMul ‚Ñï (Divisor U) where
  smul := by
    intro n D
    exact {
      toFun := fun z ‚Ü¶ n * D z
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx.2
      supportDiscreteWithinU := by
        filter_upwards [D.supportDiscreteWithinU]
        intro x hx
        simp [hx]
    }

/-- Helper lemma for the `simp` tactic: the function of a scalar product
(natural number)¬∑divisor is the scalar product of the natural number with the
associated function of the divisor. -/
@[simp]
lemma nsmul_fun {D : Divisor U} {n : ‚Ñï} : (n ‚Ä¢ D).toFun = n ‚Ä¢ (D.toFun) := rfl

/-- Divisors have scalar multiplication with integers -/
instance : SMul ‚Ñ§ (Divisor U) where
  smul := fun n D ‚Ü¶
    {
      toFun := fun z ‚Ü¶ n * D z
      supportInU := by
        intro x hx
        simp at hx
        exact D.supportInU hx.2
      supportDiscreteWithinU := by
        filter_upwards [D.supportDiscreteWithinU]
        intro _ hx
        simp [hx]
    }

/-- Helper lemma for the `simp` tactic: the function of a scalar product
(integer)¬∑divisor is the scalar product of the integer with the associated
function of the divisor. -/
@[simp]
lemma zsmul_fun {D : Divisor U} {n : ‚Ñ§} : (n ‚Ä¢ D).toFun = n ‚Ä¢ (D.toFun) := rfl

/-- Divisors have a partial ordering by pointwise comparison of the associated
functions. -/
instance : LE (Divisor U) where
  le := fun D‚ÇÅ D‚ÇÇ ‚Ü¶ D‚ÇÅ.toFun ‚â§ D‚ÇÇ.toFun

/-- Helper lemma for the `simp` tactic: a divisor is smaller than another one
if the same relation holds with the associated functions. -/
@[simp]
lemma le_fun {D‚ÇÅ D‚ÇÇ : Divisor U} : D‚ÇÅ ‚â§ D‚ÇÇ ‚Üî D‚ÇÅ.toFun ‚â§ D‚ÇÇ.toFun := ‚ü®(¬∑),(¬∑)‚ü©

/-- Divisors form an ordered commutative group -/
instance : OrderedAddCommGroup (Divisor U) where
  add := (¬∑ + ¬∑ )
  add_assoc := fun _ _ _ ‚Ü¶ by ext; simp [add_assoc]
  zero := 0
  zero_add := fun _ ‚Ü¶ by ext; simp
  add_zero := fun _ ‚Ü¶ by ext; simp
  nsmul := (¬∑ ‚Ä¢ ¬∑)
  neg := (- ¬∑)
  zsmul := (¬∑ ‚Ä¢ ¬∑)
  neg_add_cancel := fun _ ‚Ü¶ by ext; simp
  add_comm := fun _ _ ‚Ü¶ by ext; simp [add_comm]
  nsmul_zero := fun _ ‚Ü¶ by ext; simp
  nsmul_succ := fun _ _ ‚Ü¶ by ext; simp [add_one_mul]
  zsmul_zero' := fun _ ‚Ü¶ by ext; simp
  zsmul_succ' := fun _ _ ‚Ü¶ by ext; simp [add_one_mul]
  zsmul_neg' := fun _ _ ‚Ü¶ by ext; simp; apply negSucc_zsmul
  le := (¬∑ ‚â§ ¬∑)
  le_refl := by tauto
  le_trans := fun D‚ÇÅ D‚ÇÇ D‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ ‚Ü¶ by simp [le_fun,
    Preorder.le_trans (D‚ÇÅ.toFun) (D‚ÇÇ.toFun) (D‚ÇÉ.toFun) h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ]
  le_antisymm := fun _ _ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ ‚Ü¶ by ext x; exact Int.le_antisymm (h‚ÇÅ‚ÇÇ x) (h‚ÇÇ‚ÇÅ x)
  add_le_add_left := fun _ _ _ _ ‚Ü¶ by simpa

/-!
## Elementary properties of the support
-/

theorem Divisor.discreteSupport (D : Divisor U) :
    DiscreteTopology D.toFun.support := by
  have : Function.support D = {x | D x = 0}·∂ú ‚à© U := by
    ext x
    constructor
    ¬∑ exact fun hx ‚Ü¶ ‚ü®by tauto, D.supportInU hx‚ü©
    ¬∑ intro hx
      rw [mem_inter_iff, mem_compl_iff, mem_setOf_eq] at hx
      tauto
  convert discreteTopology_of_codiscreteWithin (D.supportDiscreteWithinU)

theorem Divisor.closedSupport (D : Divisor U) (hU : IsClosed U) :
    IsClosed D.toFun.support := by
  rw [‚Üê isOpen_compl_iff, isOpen_iff_eventually]
  intro x hx
  by_cases h‚ÇÅx : x ‚àà U
  ¬∑ have Z‚ÇÅ := D.supportDiscreteWithinU
    rw [EventuallyEq, Filter.Eventually, mem_codiscreteWithin] at Z‚ÇÅ
    filter_upwards [eventually_nhdsWithin_iff.1 (Filter.disjoint_principal_right.1 (Z‚ÇÅ x h‚ÇÅx))]
    intro a ha
    by_cases h‚ÇÇa : a = x
    ¬∑ simp [hx, h‚ÇÇa]
    ¬∑ have W := ha h‚ÇÇa
      simp at W
      by_cases h‚ÇÉa : a ‚àà U
      ¬∑ tauto
      ¬∑ have := D.supportInU
        by_contra hCon
        tauto
  ¬∑ rw [eventually_iff_exists_mem]
    use U·∂ú, hU.compl_mem_nhds h‚ÇÅx
    intro y hy
    simp only [mem_compl_iff, Function.mem_support, ne_eq, Decidable.not_not]
    exact Function.nmem_support.mp fun a ‚Ü¶ hy (D.supportInU a)

theorem Divisor.finiteSupport (D : Divisor U) (hU : IsCompact U) :
    Set.Finite D.toFun.support :=
  (hU.of_isClosed_subset (D.closedSupport hU.isClosed) D.supportInU).finite D.discreteSupport

/-!
## Restriction
-/

noncomputable def Divisor.restrict {V : Set ùïú} (D : Divisor U) (h : V ‚äÜ U) :
    Divisor V where
  toFun := by
    classical
    exact fun z ‚Ü¶ if hz : z ‚àà V then D z else 0
  supportInU := by
    intro x hx
    simp_rw [dite_eq_ite, Function.mem_support, ne_eq, ite_eq_right_iff,
      Classical.not_imp] at hx
    exact hx.1
  supportDiscreteWithinU := by
    apply Filter.codiscreteWithin.mono h
    filter_upwards [D.supportDiscreteWithinU]
    intro x hx
    simp [hx]

noncomputable def Divisor.restrict_orderHom {V : Set ùïú} (h : V ‚äÜ U) : Divisor U ‚Üío Divisor V where
  toFun := fun D ‚Ü¶ D.restrict h
  monotone' := by
    intro D‚ÇÅ D‚ÇÇ h‚ÇÅ‚ÇÇ
    simp only [le_fun, Divisor.restrict]
    intro x
    by_cases hx : x ‚àà V
    <;> simp [hx, reduceDIte, h‚ÇÅ‚ÇÇ x]

noncomputable def Divisor.restrict_groupHom {V : Set ùïú} (h : V ‚äÜ U) : Divisor U ‚Üí+ Divisor V where
  toFun := fun D ‚Ü¶ D.restrict h
  map_zero' := by
    ext x
    simp [Divisor.restrict]
  map_add' := by
    intro D‚ÇÅ D‚ÇÇ
    ext x
    by_cases hx : x ‚àà V
    <;> simp [Divisor.restrict, hx]

/-!
## Derived invariants
-/

/-- The degree of a divisor is the sum of its values, or 0 if the support is
infinite. -/
noncomputable def Divisor.deg (D : Divisor U) : ‚Ñ§ := ‚àë·∂† z, D z
