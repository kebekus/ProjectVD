import Mathlib.Analysis.Analytic.IsolatedZeros
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Analytic.Linear
import VD.ToMathlib.analyticAt

open Topology

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {E : Type*} [NormedAddCommGroup E]
  [NormedSpace ùïú E] {s : E} {p q : FormalMultilinearSeries ùïú ùïú E} {f g : ùïú ‚Üí E} {n : ‚Ñï} {z z‚ÇÄ : ùïú}


theorem eventually_nhds_comp_composition
  {f‚ÇÅ f‚ÇÇ ‚Ñì : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : ‚àÄ·∂† (z : ‚ÑÇ) in nhds (‚Ñì z‚ÇÄ), f‚ÇÅ z = f‚ÇÇ z)
  (h‚Ñì : Continuous ‚Ñì) :
  ‚àÄ·∂† (z : ‚ÑÇ) in nhds z‚ÇÄ, (f‚ÇÅ ‚àò ‚Ñì) z = (f‚ÇÇ ‚àò ‚Ñì) z := by
  obtain ‚ü®t, h‚ÇÅt, h‚ÇÇt, h‚ÇÉt‚ü© := eventually_nhds_iff.1 hf
  apply eventually_nhds_iff.2
  use ‚Ñì‚Åª¬π' t
  exact ‚ü®fun y hy ‚Ü¶ h‚ÇÅt (‚Ñì y) hy, h‚ÇÇt.preimage h‚Ñì, h‚ÇÉt‚ü©


theorem AnalyticAt.order_congr
  {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf‚ÇÅ : AnalyticAt ‚ÑÇ f‚ÇÅ z‚ÇÄ)
  (hf : f‚ÇÅ =·∂†[ùìù z‚ÇÄ] f‚ÇÇ) :
  hf‚ÇÅ.order = (hf‚ÇÅ.congr hf).order := by

  by_cases h‚ÇÅf‚ÇÅ : hf‚ÇÅ.order = ‚ä§
  ¬∑ rw [h‚ÇÅf‚ÇÅ, eq_comm, AnalyticAt.order_eq_top_iff]
    exact Filter.EventuallyEq.rw (hf‚ÇÅ.order_eq_top_iff.1 h‚ÇÅf‚ÇÅ) (fun x ‚Ü¶ Eq (f‚ÇÇ x)) hf.symm

  rw [‚Üê ENat.coe_toNat h‚ÇÅf‚ÇÅ, eq_comm, AnalyticAt.order_eq_nat_iff]
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := (hf‚ÇÅ.order_eq_nat_iff hf‚ÇÅ.order.toNat).1 (ENat.coe_toNat h‚ÇÅf‚ÇÅ).symm
  use g
  simpa [h‚ÇÅg, h‚ÇÇg] using Filter.EventuallyEq.rw h‚ÇÉg (fun x ‚Ü¶ Eq (f‚ÇÇ x)) hf.symm


theorem AnalyticAt.localIdentity
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : AnalyticAt ‚ÑÇ f z‚ÇÄ)
  (hg : AnalyticAt ‚ÑÇ g z‚ÇÄ)
  (hfg : f =·∂†[ùìù[‚â†] z‚ÇÄ] g) :
    f =·∂†[ùìù z‚ÇÄ] g := by
  apply Filter.eventuallyEq_iff_sub.mpr
  rcases ((hf.sub hg).eventually_eq_zero_or_eventually_ne_zero) with h | h
  ¬∑ exact h
  ¬∑ simpa using (Filter.eventually_and.2 ‚ü®Filter.eventuallyEq_iff_sub.mp hfg, h‚ü©).exists


theorem AnalyticAt.mul‚ÇÅ
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (hf : AnalyticAt ‚ÑÇ f z)
  (hg : AnalyticAt ‚ÑÇ g z) :
  AnalyticAt ‚ÑÇ (f * g) z := by
  exact hf.mul hg


theorem analyticAt_finprod
  {Œ± : Type}
  {f : Œ± ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (hf : ‚àÄ a, AnalyticAt ‚ÑÇ (f a) z) :
  AnalyticAt ‚ÑÇ (‚àè·∂† a, f a) z := by
  by_cases h‚ÇÅf : f.mulSupport.Finite
  ¬∑ simp [finprod_eq_prod f h‚ÇÅf, h‚ÇÅf.toFinset.prod_fn f, h‚ÇÅf.toFinset.analyticAt_prod (fun a _ ‚Ü¶ hf a)]
  ¬∑ simpa [finprod_of_infinite_mulSupport h‚ÇÅf] using analyticAt_const


lemma AnalyticAt.zpow_nonneg
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  {n : ‚Ñ§}
  (hf : AnalyticAt ‚ÑÇ f z‚ÇÄ)
  (hn : 0 ‚â§ n) :
  AnalyticAt ‚ÑÇ (fun x ‚Ü¶ (f x) ^ n) z‚ÇÄ := by
  simp_rw [(Eq.symm (Int.toNat_of_nonneg hn) : n = OfNat.ofNat n.toNat), zpow_ofNat]
  apply AnalyticAt.pow hf


theorem AnalyticAt.zpow
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  {n : ‚Ñ§}
  (h‚ÇÅf : AnalyticAt ‚ÑÇ f z‚ÇÄ)
  (h‚ÇÇf : f z‚ÇÄ ‚â† 0) :
  AnalyticAt ‚ÑÇ (fun x ‚Ü¶ (f x) ^ n) z‚ÇÄ := by
  by_cases hn : 0 ‚â§ n
  ¬∑ exact zpow_nonneg h‚ÇÅf hn
  ¬∑ rw [(Int.eq_neg_comm.mp rfl : n = - (- n))]
    conv => arg 2; intro x; rw [zpow_neg]
    exact (h‚ÇÅf.zpow_nonneg (by linarith)).inv (zpow_ne_zero (-n) h‚ÇÇf)


/- A function is analytic at a point iff it is analytic after multiplication
  with a non-vanishing analytic function -/
theorem analyticAt_of_mul_analytic
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅg : AnalyticAt ‚ÑÇ g z‚ÇÄ)
  (h‚ÇÇg : g z‚ÇÄ ‚â† 0) :
  AnalyticAt ‚ÑÇ f z‚ÇÄ ‚Üî AnalyticAt ‚ÑÇ (f * g) z‚ÇÄ := by
  constructor
  ¬∑ exact fun a ‚Ü¶ AnalyticAt.mul‚ÇÅ a h‚ÇÅg
  ¬∑ intro hprod
    have : f =·∂†[ùìù z‚ÇÄ] f * g * g‚Åª¬π := by
      apply Filter.eventually_iff_exists_mem.mpr
      use g‚Åª¬π' {0}·∂ú
      constructor
      ¬∑ exact h‚ÇÅg.continuousAt.preimage_mem_nhds (compl_singleton_mem_nhds_iff.mpr h‚ÇÇg)
      ¬∑ intro y hy
        simp at hy
        simp [hy]
    rw [analyticAt_congr this]
    exact hprod.mul (h‚ÇÅg.inv h‚ÇÇg)
