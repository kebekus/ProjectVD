/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Meromorphic.Divisor
import Mathlib.Analysis.SpecialFunctions.Log.PosLog
import Mathlib.MeasureTheory.Integral.CircleAverage
import VD.meromorphicOn_integrability

/-!
# Circle Averages
-/

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E] [SMulCommClass ‚Ñù ùïú E]
  {f f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí E} {c : ‚ÑÇ} {R : ‚Ñù} {a : ùïú}

open Real

/-- Circle averages commute with subtraction. -/
theorem circleAverage_sub (hf‚ÇÅ : CircleIntegrable f‚ÇÅ c R) (hf‚ÇÇ : CircleIntegrable f‚ÇÇ c R) :
    circleAverage (f‚ÇÅ - f‚ÇÇ) c R = circleAverage f‚ÇÅ c R - circleAverage f‚ÇÇ c R := by
  rw [circleAverage, circleAverage, circleAverage, ‚Üê smul_sub]
  congr
  apply intervalIntegral.integral_sub hf‚ÇÅ hf‚ÇÇ


/-!
# The Proximity Function of Value Distribution Theory
-/

open MeromorphicOn Metric Real Set

namespace ValueDistribution

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E]
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ} {a : WithTop ‚ÑÇ} {a‚ÇÄ : ‚ÑÇ}

open Real

variable (f a) in
/--
The proximity function of a meromorphic function.

If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is meromorphic and `a : WithTop ‚ÑÇ` is any value, this is a logarithmically weighted
measure of the number of times the function `f` takes a given value `a` within the disk `‚à£z‚à£ ‚â§ r`,
counting multiplicities.  In the special case where `a = ‚ä§`, it counts the poles of `f`.
-/
noncomputable def proximity : ‚Ñù ‚Üí ‚Ñù := by
  by_cases h : a = ‚ä§
  ¬∑ exact fun R ‚Ü¶ circleAverage (log‚Å∫ ‚Äñf ¬∑‚Äñ) 0 R
  ¬∑ exact fun R ‚Ü¶ circleAverage (fun z ‚Ü¶ log‚Å∫ ‚Äñ1 / (f z - a.untop‚ÇÄ)‚Äñ) 0 R

/--
For finite values `a‚ÇÄ`, the logarithmic counting function `logCounting f a‚ÇÄ` is the counting
function associated with the zero-divisor of the meromorphic function `f - a‚ÇÄ`.
-/
lemma proximity_coe :
    proximity f a‚ÇÄ = fun R ‚Ü¶ circleAverage (fun z ‚Ü¶ log‚Å∫ ‚Äñ1 / (f z - a‚ÇÄ)‚Äñ) 0 R := by
  simp [proximity]

/--
For finite values `a‚ÇÄ`, the logarithmic counting function `logCounting f a‚ÇÄ` equals the logarithmic
counting function for the value zero of the shifted function `f - a‚ÇÄ`.
-/
lemma proximity_coe_eq_proximity_sub_const_zero :
    proximity f a‚ÇÄ = proximity (f - fun _ ‚Ü¶ a‚ÇÄ) 0 := by
  simp [proximity]

/--
The logarithmic counting function `logCounting f 0` is the counting function associated with the
zero-divisor of `f`.
-/
lemma proximity_zero :
    proximity f 0 = fun R ‚Ü¶ circleAverage (log‚Å∫ ‚Äñf‚Åª¬π ¬∑‚Äñ) 0 R := by
  simp [proximity]

/--
The logarithmic counting function `logCounting f ‚ä§` is the counting function associated with
the pole-divisor of `f`.
-/
lemma proximity_top :
    proximity f ‚ä§ = fun R ‚Ü¶ circleAverage (log‚Å∫ ‚Äñf ¬∑‚Äñ) 0 R := by
  simp [proximity]

/--
The counting function associated with the divisor of `f` is the difference between `logCounting f 0`
and `logCounting f ‚ä§`.
-/
theorem Nevanlinna_proximity {R : ‚Ñù} (h‚ÇÅf : MeromorphicOn f ‚ä§) :
  circleAverage (log ‚Äñf ¬∑‚Äñ) 0 R = proximity f ‚ä§ R - proximity f‚Åª¬π ‚ä§ R := by
  simp [proximity]
  rw [‚Üê circleAverage_sub]
  congr
  funext x
  simp_rw [‚Üê posLog_sub_posLog_inv];
  simp
  --
  apply MeromorphicOn.circleIntegrable_posLog_norm
  intro z hx
  exact h‚ÇÅf z trivial
  --
  simp_rw [‚Üê norm_inv]
  apply MeromorphicOn.circleIntegrable_posLog_norm
  exact MeromorphicOn.inv_iff.mpr fun x a => h‚ÇÅf x trivial

/-!
## Elementary Properties of the Counting Function
-/

/--
Relation between the logarithmic counting function of `f` and of `f‚Åª¬π`.
-/
@[simp] theorem proximity_inv :
     proximity f‚Åª¬π ‚ä§ = proximity f 0 := by
  simp [proximity_zero, proximity_top]

end ValueDistribution
