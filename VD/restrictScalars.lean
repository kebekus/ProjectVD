import Mathlib.Analysis.Calculus.FDeriv.Congr
import Mathlib.Analysis.Calculus.IteratedDeriv.Defs
import VD.Harmonic

variable
  {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [NormedSpace ‚ÑÇ E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F] [IsScalarTower ‚Ñù ‚ÑÇ F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  {f f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí F}
  {s t : Set E} {c : ‚Ñù}

open Topology

variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]

theorem fderiv_restrictScalarsLinear_comp {n : ‚Ñï} {x : E}
    {f : E ‚Üí (ContinuousMultilinearMap ‚ÑÇ (fun _ : Fin n ‚Ü¶ E) F)}
    (h : DifferentiableAt ‚ÑÇ f x) :
    (fderiv ‚Ñù ((ContinuousMultilinearMap.restrictScalarsLinear ‚Ñù) ‚àò f) x)
      = (ContinuousMultilinearMap.restrictScalars ‚Ñù) ‚àò ((fderiv ‚ÑÇ f x).restrictScalars ‚Ñù) := by
  rw [fderiv_comp _ (by fun_prop) (h.restrictScalars ‚Ñù), ContinuousLinearMap.fderiv]
  ext a b
  simp [h.fderiv_restrictScalars ‚Ñù]

theorem ContDiffAt.differentiableAt_iteratedDeriv
    {f : E ‚Üí F} {x : E} {n : ‚Ñï} {m : ‚Ñï}
    (h : ContDiffAt ‚ÑÇ n f x) (hmn : m < n) :
    DifferentiableAt ‚ÑÇ (iteratedFDeriv ‚ÑÇ m f) x := by
  apply ContDiffAt.differentiableAt (n := 1)
  apply h.iteratedFDeriv_right (i := m) (m := 1)
  rw [Nat.lt_iff_add_one_le, add_comm] at hmn
  rw [‚Üê WithTop.coe_one]
  simp_all
  sorry
  sorry

theorem ContDiffAt.iteratedFDeriv_restrictScalars {f : E ‚Üí F} {n : ‚Ñï} {z : E}
    (h : ContDiffAt ‚ÑÇ n f z) :
    (ContinuousMultilinearMap.restrictScalarsLinear ‚Ñù) ‚àò (iteratedFDeriv ‚ÑÇ n f) =·∂†[ùìù z]
      (iteratedFDeriv ‚Ñù n f) := by
  induction n with
  | zero =>
    filter_upwards with a
    ext m
    simp [iteratedFDeriv_zero_apply m]
  | succ n hn =>
    have : ContDiffAt ‚ÑÇ n f z := by
      apply h.of_le
      apply Nat.cast_le.mpr
      exact Nat.le_add_right n 1
    have t‚ÇÄ := hn this
    have t‚ÇÅ := this.eventually
    simp at t‚ÇÅ
    filter_upwards [t‚ÇÄ.eventually_nhds, t‚ÇÅ.eventually_nhds,
      h.eventually (by simp)] with a h‚ÇÅa h‚ÇÇa h‚ÇÉa
    rw [‚Üê Filter.EventuallyEq] at h‚ÇÅa
    ext m
    simp [iteratedFDeriv_succ_apply_left]
    have := h‚ÇÅa.fderiv_eq (ùïú := ‚Ñù)
    rw [‚Üê this]
    rw [fderiv_restrictScalarsLinear_comp]
    simp
    ¬∑ apply h‚ÇÉa.differentiableAt_iteratedDeriv (m := n)
      simp
