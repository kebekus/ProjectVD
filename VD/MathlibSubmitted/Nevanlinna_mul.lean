import Mathlib.Analysis.Complex.ValueDistribution.CharacteristicFunction
import Mathlib.Analysis.Complex.ValueDistribution.CountingFunction
import Mathlib.Analysis.Complex.ValueDistribution.ProximityFunction

open MeromorphicOn Metric Real Set Classical

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] [ProperSpace E]
  {U : Set ùïú} {f g : ùïú ‚Üí E} {a : WithTop E} {a‚ÇÄ : E}

/--
Circle averages respect the `‚â§` relation.
-/
theorem circleAverage_mono {c : ‚ÑÇ} {R : ‚Ñù} {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚Ñù} (hf‚ÇÅ : CircleIntegrable f‚ÇÅ c R)
    (hf‚ÇÇ : CircleIntegrable f‚ÇÇ c R) (h : ‚àÄ x ‚àà Metric.sphere c |R|, f‚ÇÅ x ‚â§ f‚ÇÇ x) :
    circleAverage f‚ÇÅ c R ‚â§ circleAverage f‚ÇÇ c R := by
  apply (mul_le_mul_iff_of_pos_left (by simp [pi_pos])).2
  apply intervalIntegral.integral_mono_on_of_le_Ioo (le_of_lt two_pi_pos) hf‚ÇÅ hf‚ÇÇ
  exact fun x _ ‚Ü¶ by simp [h (circleMap c R x)]


namespace Function.locallyFinsuppWithin

variable
  {X : Type*} [TopologicalSpace X] {U : Set X}
  {Y : Type*} [AddCommGroup Y] [LinearOrder Y] [IsOrderedAddMonoid Y]

/--
The positive part of a sum is less than or equal to the sum of the positive parts.
-/
theorem posPart_add
    (f‚ÇÅ f‚ÇÇ : Function.locallyFinsuppWithin U Y) :
    (f‚ÇÅ + f‚ÇÇ)‚Å∫ ‚â§ f‚ÇÅ‚Å∫ + f‚ÇÇ‚Å∫ := by
  rw [instPosPart, Function.locallyFinsuppWithin.le_def]
  intro x
  simp only [Function.locallyFinsuppWithin.max_apply, Function.locallyFinsuppWithin.coe_add,
    Pi.add_apply, Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, sup_le_iff]
  constructor
  ¬∑ simp [add_le_add]
  ¬∑ simp [add_nonneg]

/--
The negative part of a sum is less than or equal to the sum of the negative parts.
-/
theorem negPart_add
    (f‚ÇÅ f‚ÇÇ : Function.locallyFinsuppWithin U Y) :
    (f‚ÇÅ + f‚ÇÇ)‚Åª ‚â§ f‚ÇÅ‚Åª + f‚ÇÇ‚Åª := by
  rw [instNegPart, Function.locallyFinsuppWithin.le_def]
  intro x
  simp only [neg_add_rev, Function.locallyFinsuppWithin.max_apply,
    Function.locallyFinsuppWithin.coe_add, Function.locallyFinsuppWithin.coe_neg, Pi.add_apply,
    Pi.neg_apply, Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, sup_le_iff]
  constructor
  ¬∑ simp [add_comm, add_le_add]
  ¬∑ simp [add_nonneg]

/--
For `1 ‚â§ r`, the counting function is non-negative.
-/
theorem logCounting_nonneg {f : locallyFinsuppWithin (univ : Set E) ‚Ñ§} {r : ‚Ñù} (h : 0 ‚â§ f) (hr : 1 ‚â§ r) :
    0 ‚â§ logCounting f r := by
  have h‚ÇÉr : 0 < r := by linarith
  apply add_nonneg
  ¬∑ apply finsum_nonneg
    ¬∑ intro a
      by_cases h‚ÇÅa : a = 0
      ¬∑ simp_all
      by_cases h‚ÇÇa : a ‚àà closedBall 0 |r|
      ¬∑ apply mul_nonneg
        ¬∑ simpa [toClosedBall, restrictMonoidHom_apply, restrict_apply, h‚ÇÇa] using h a
        ¬∑ rw [log_nonneg_iff]
          ¬∑ rw [‚Üê inv_le_iff_one_le_mul‚ÇÄ]
            ¬∑ rw [inv_inv, ‚Üê abs_of_pos h‚ÇÉr]
              simp_all
            ¬∑ rwa [inv_pos, norm_pos_iff]
          ¬∑ simp_all
      ¬∑ simp [apply_eq_zero_of_notMem ((toClosedBall r) _) h‚ÇÇa]
  ¬∑ apply mul_nonneg (by simpa using h 0) (log_nonneg hr)

/--
For `1 ‚â§ r`, the counting function respects the `‚â§` relation.
-/
theorem logCounting_le {f‚ÇÅ f‚ÇÇ : locallyFinsuppWithin (univ : Set E) ‚Ñ§} {r : ‚Ñù} (h : f‚ÇÅ ‚â§ f‚ÇÇ) (hr : 1 ‚â§ r) :
    logCounting f‚ÇÅ r ‚â§ logCounting f‚ÇÇ r := by
  rw [‚Üê sub_nonneg] at h ‚ä¢
  simpa using logCounting_nonneg h hr

/--
The counting function respects the `‚â§` relation asymptotically.
-/
theorem logCounting_eventually_le {f‚ÇÅ f‚ÇÇ : locallyFinsuppWithin (univ : Set E) ‚Ñ§} (h : f‚ÇÅ ‚â§ f‚ÇÇ) :
    logCounting f‚ÇÅ ‚â§·∂†[Filter.atTop] logCounting f‚ÇÇ := by
  filter_upwards [Filter.eventually_ge_atTop 1]
  exact fun _ hr ‚Ü¶ logCounting_le h hr

end Function.locallyFinsuppWithin

namespace ValueDistribution

variable [ProperSpace ùïú]

/--
For `1 ‚â§ r`, the counting function counting zeros of `f * g` is less than or
equal to the sum of the counting functions counting zeros of `f` and `g`,
respectively.
-/
theorem logCounting_zero_mul_le {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí ùïú} {r : ‚Ñù} (hr : 1 ‚â§ r)
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    logCounting (f‚ÇÅ * f‚ÇÇ) 0 r ‚â§ (logCounting f‚ÇÅ 0 + logCounting f‚ÇÇ 0) r := by
  simp only [logCounting, WithTop.zero_ne_top, reduceDIte, WithTop.untop‚ÇÄ_zero, sub_zero]
  rw [divisor_mul h‚ÇÅf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÅ h‚ÇÇf‚ÇÇ, ‚Üê Function.locallyFinsuppWithin.logCounting.map_add]
  apply Function.locallyFinsuppWithin.logCounting_le _ hr
  apply Function.locallyFinsuppWithin.posPart_add

/--
Asymptotically, the counting function counting zeros of `f * g` is less than or
equal to the sum of the counting functions counting zeros of `f` and `g`,
respectively.
-/
theorem logCounting_zero_mul_eventually_le {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí ùïú}
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    logCounting (f‚ÇÅ * f‚ÇÇ) 0 ‚â§·∂†[Filter.atTop] logCounting f‚ÇÅ 0 + logCounting f‚ÇÇ 0 := by
  filter_upwards [Filter.eventually_ge_atTop 1]
  exact fun _ hr ‚Ü¶ logCounting_zero_mul_le hr h‚ÇÅf‚ÇÅ h‚ÇÇf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÇ

/--
For `1 ‚â§ r`, the counting function counting poles of `f * g` is less than or
equal to the sum of the counting functions counting poles of `f` and `g`,
respectively.
-/
theorem logCounting_top_mul_le {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí ùïú} {r : ‚Ñù} (hr : 1 ‚â§ r)
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    logCounting (f‚ÇÅ * f‚ÇÇ) ‚ä§ r ‚â§ (logCounting f‚ÇÅ ‚ä§ + logCounting f‚ÇÇ ‚ä§) r := by
  simp only [logCounting, reduceDIte]
  rw [divisor_mul h‚ÇÅf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÅ h‚ÇÇf‚ÇÇ, ‚Üê Function.locallyFinsuppWithin.logCounting.map_add]
  apply Function.locallyFinsuppWithin.logCounting_le _ hr
  apply Function.locallyFinsuppWithin.negPart_add

/--
Asymptotically, the counting function counting zeros of `f * g` is less than or
equal to the sum of the counting functions counting zeros of `f` and `g`,
respectively.
-/
theorem logCounting_top_mul_eventually_le {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí ùïú}
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    logCounting (f‚ÇÅ * f‚ÇÇ) ‚ä§ ‚â§·∂†[Filter.atTop] logCounting f‚ÇÅ ‚ä§ + logCounting f‚ÇÇ ‚ä§ := by
  filter_upwards [Filter.eventually_ge_atTop 1]
  exact fun _ hr ‚Ü¶ logCounting_top_mul_le hr h‚ÇÅf‚ÇÅ h‚ÇÇf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÇ

/--
The proximity function `f * g` at `‚ä§` is less than or equal to the sum of the
proximity functions of `f` and `g`, respectively.
-/
theorem proximity_top_mul_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) :
    proximity (f‚ÇÅ * f‚ÇÇ) ‚ä§ ‚â§ (proximity f‚ÇÅ ‚ä§) + (proximity f‚ÇÇ ‚ä§) := by
  calc proximity (f‚ÇÅ * f‚ÇÇ) ‚ä§
  _ = circleAverage (fun x ‚Ü¶ log‚Å∫ (‚Äñf‚ÇÅ x‚Äñ * ‚Äñf‚ÇÇ x‚Äñ)) 0 := by
    simp [proximity]
  _ ‚â§ circleAverage (fun x ‚Ü¶ log‚Å∫ ‚Äñf‚ÇÅ x‚Äñ + log‚Å∫ ‚Äñf‚ÇÇ x‚Äñ) 0 := by
    intro r
    apply circleAverage_mono
    ¬∑ simp_rw [‚Üê norm_mul]
      apply circleIntegrable_posLog_norm_meromorphicOn
      exact fun_mul (fun x a ‚Ü¶ h‚ÇÅf‚ÇÅ x trivial) fun x a ‚Ü¶ h‚ÇÅf‚ÇÇ x trivial
    ¬∑ apply (circleIntegrable_posLog_norm_meromorphicOn (fun x a ‚Ü¶ h‚ÇÅf‚ÇÅ x trivial)).add
        (circleIntegrable_posLog_norm_meromorphicOn (fun x a ‚Ü¶ h‚ÇÅf‚ÇÇ x trivial))
    ¬∑ exact fun _ _ ‚Ü¶ posLog_mul
  _ = circleAverage (log‚Å∫ ‚Äñf‚ÇÅ ¬∑‚Äñ) 0 + circleAverage (log‚Å∫ ‚Äñf‚ÇÇ ¬∑‚Äñ) 0:= by
    ext r
    apply circleAverage_add
    ¬∑ exact circleIntegrable_posLog_norm_meromorphicOn (fun x a ‚Ü¶ h‚ÇÅf‚ÇÅ x trivial)
    ¬∑ exact circleIntegrable_posLog_norm_meromorphicOn (fun x a ‚Ü¶ h‚ÇÅf‚ÇÇ x trivial)
  _ = (proximity f‚ÇÅ ‚ä§) + (proximity f‚ÇÇ ‚ä§) := rfl

/--
The proximity function `f * g` at `0` is less than or equal to the sum of the
proximity functions of `f` and `g`, respectively.
-/
theorem proximity_zero_mul_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) :
    proximity (f‚ÇÅ * f‚ÇÇ) 0 ‚â§ (proximity f‚ÇÅ 0) + (proximity f‚ÇÇ 0) := by
  calc proximity (f‚ÇÅ * f‚ÇÇ) 0
  _ ‚â§ (proximity f‚ÇÅ‚Åª¬π ‚ä§) + (proximity f‚ÇÇ‚Åª¬π ‚ä§) := by
    rw [‚Üê proximity_inv, mul_inv]
    apply proximity_top_mul_le (inv_iff.mpr h‚ÇÅf‚ÇÅ) (inv_iff.mpr h‚ÇÅf‚ÇÇ)
  _ = (proximity f‚ÇÅ 0) + (proximity f‚ÇÇ 0) := by
    rw [proximity_inv, proximity_inv]

/--
For `1 ‚â§ r`, the characteristic function of `f * g` at zero is less than or
equal to the sum of the characteristic functions of `f` and `g`, respectively.
-/
theorem characteristic_zero_mul_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} {r : ‚Ñù} (hr : 1 ‚â§ r)
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    characteristic (f‚ÇÅ * f‚ÇÇ) 0 r ‚â§ (characteristic f‚ÇÅ 0 + characteristic f‚ÇÇ 0) r := by
  simp only [characteristic, Pi.add_apply]
  have {A B C D : ‚Ñù} : A + B + (C + D) = (A + C) + (B + D) := by ring
  rw [this]
  apply add_le_add (proximity_zero_mul_le h‚ÇÅf‚ÇÅ h‚ÇÅf‚ÇÇ r)
    (logCounting_zero_mul_le hr h‚ÇÅf‚ÇÅ h‚ÇÇf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÇ)

/--
Asymptotically, the characteristic function of `f * g` at zero is less than or
equal to the sum of the characteristic functions of `f` and `g`, respectively.
-/
theorem characteristic_zero_mul_eventually_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    characteristic (f‚ÇÅ * f‚ÇÇ) 0 ‚â§·∂†[Filter.atTop] characteristic f‚ÇÅ 0 + characteristic f‚ÇÇ 0 := by
  filter_upwards [Filter.eventually_ge_atTop 1]
  exact fun _ hr ‚Ü¶ characteristic_zero_mul_le hr h‚ÇÅf‚ÇÅ h‚ÇÇf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÇ

/--
For `1 ‚â§ r`, the characteristic function of `f * g` at `‚ä§` is less than or equal
to the sum of the characteristic functions of `f` and `g`, respectively.
-/
theorem characteristic_top_mul_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} {r : ‚Ñù} (hr : 1 ‚â§ r)
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    characteristic (f‚ÇÅ * f‚ÇÇ) ‚ä§ r ‚â§ (characteristic f‚ÇÅ ‚ä§ + characteristic f‚ÇÇ ‚ä§) r := by
  simp only [characteristic, Pi.add_apply]
  have {A B C D : ‚Ñù} : A + B + (C + D) = (A + C) + (B + D) := by ring
  rw [this]
  apply add_le_add (proximity_top_mul_le h‚ÇÅf‚ÇÅ h‚ÇÅf‚ÇÇ r)
    (logCounting_top_mul_le hr h‚ÇÅf‚ÇÅ h‚ÇÇf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÇ)

/--
Asymptotically, the characteristic function of `f * g` at `‚ä§` is less than or
equal to the sum of the characteristic functions of `f` and `g`, respectively.
-/
theorem characteristic_top_mul_eventually_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ}
    (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ) (h‚ÇÇf‚ÇÅ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÅ z ‚â† ‚ä§)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) (h‚ÇÇf‚ÇÇ : ‚àÄ z ‚àà univ, meromorphicOrderAt f‚ÇÇ z ‚â† ‚ä§) :
    characteristic (f‚ÇÅ * f‚ÇÇ) ‚ä§ ‚â§·∂†[Filter.atTop] characteristic f‚ÇÅ ‚ä§ + characteristic f‚ÇÇ ‚ä§ := by
  filter_upwards [Filter.eventually_ge_atTop 1]
  exact fun _ hr ‚Ü¶ characteristic_top_mul_le hr h‚ÇÅf‚ÇÅ h‚ÇÇf‚ÇÅ h‚ÇÅf‚ÇÇ h‚ÇÇf‚ÇÇ

end ValueDistribution
