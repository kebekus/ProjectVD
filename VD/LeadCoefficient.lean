/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import Mathlib.Analysis.Meromorphic.Order
import VD.ToMathlib.MeromorphicAt_order

/-!
# The Leading Coefficient of a Meromorphic Function

This file defines the leading coefficient of a meromorphic function. If `f` is
meromorphic at a point `x`, the leading coefficient is defined as the (unique!)
value `g x` for a presentation of `f` in the form `(z - x) ^ order ‚Ä¢ g z` with
`g` analytic at `x`.

### TODOs

- Characterization in terms of limits
- Characterization in terms of Laurent series
-/

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f g : ùïú ‚Üí E} {x : ùïú} {n : ‚Ñ§}

open Filter Topology

variable (f x) in
/--
If `f` is meromorphic of finite order at a point `x`, the leading coefficient is
defined as the (unique!) value `g x` for a presentation of `f` in the form `(z -
x) ^ order ‚Ä¢ g z` with `g` analytic at `x`. In all other cases, the leading
coefficient is defined to be zero.
-/
noncomputable def leadCoefficient : E := by
  by_cases h‚ÇÅ : ¬¨MeromorphicAt f x
  ¬∑ exact 0
  rw [not_not] at h‚ÇÅ
  by_cases h‚ÇÇ : h‚ÇÅ.order = ‚ä§
  ¬∑ exact 0
  exact (h‚ÇÅ.order_ne_top_iff.1 h‚ÇÇ).choose x

/--
If `f` is not meromorphic at `x`, the leading coefficient is zero by definition.
-/
@[simp] lemma leadCoefficient_of_not_MeromorphicAt (h : ¬¨MeromorphicAt f x) :
    leadCoefficient f x = 0 := by simp_all [leadCoefficient]

/--
If `f` is meromorphic of infinite order at `x`, the leading coefficient is zero
by definition.
-/
@[simp] lemma leadCoefficient_of_order_eq_top (h‚ÇÅ : MeromorphicAt f x) (h‚ÇÇ : h‚ÇÅ.order = ‚ä§) :
    leadCoefficient f x = 0 := by simp_all [leadCoefficient]

/-!
## Characterization of the Leading Coefficient
-/

/--
Definition of the leading coefficient in case where `f` is meromorphic of finite
order and a presentation is given.
-/
lemma leadCoefficient_of_order_eq_finite (h‚ÇÅ : MeromorphicAt f x) (h‚ÇÇ : AnalyticAt ùïú g x)
    (h‚ÇÉ : h‚ÇÅ.order ‚â† ‚ä§) (h‚ÇÑ : f =·∂†[ùìù[‚â†] x] fun z ‚Ü¶ (z - x) ^ h‚ÇÅ.order.untop‚ÇÄ ‚Ä¢ g z) :
    leadCoefficient f x = g x := by
  unfold leadCoefficient
  simp only [h‚ÇÅ, not_true_eq_false, reduceDIte, h‚ÇÉ, ne_eq]
  obtain ‚ü®h'‚ÇÅ, h'‚ÇÇ, h'‚ÇÉ‚ü© := (h‚ÇÅ.order_ne_top_iff.1 h‚ÇÉ).choose_spec
  apply Filter.EventuallyEq.eq_of_nhds
  rw [‚Üê h'‚ÇÅ.continuousAt.eventuallyEq_nhd_iff_eventuallyEq_nhdNE h‚ÇÇ.continuousAt]
  filter_upwards [h‚ÇÑ, h'‚ÇÉ, self_mem_nhdsWithin] with y h‚ÇÅy h‚ÇÇy h‚ÇÉy
  rw [‚Üê sub_eq_zero]
  rwa [h‚ÇÇy, ‚Üê sub_eq_zero, ‚Üê smul_sub, smul_eq_zero_iff_right] at h‚ÇÅy
  simp_all [zpow_ne_zero, sub_ne_zero]

/--
Variant of `leadCoefficient_of_order_eq_finite`: Definition of the leading
coefficient in case where `f` is meromorphic of finite order and a presentation
is given.
-/
lemma leadCoefficient_of_order_eq_finite‚ÇÅ (h‚ÇÅ : AnalyticAt ùïú g x) (h‚ÇÇ : g x ‚â† 0)
    (h‚ÇÉ : f =·∂†[ùìù[‚â†] x] fun z ‚Ü¶ (z - x) ^ n ‚Ä¢ g z) :
    leadCoefficient f x = g x := by
  have h‚ÇÑ : MeromorphicAt f x := by
    rw [MeromorphicAt.meromorphicAt_congr h‚ÇÉ]
    fun_prop
  have : h‚ÇÑ.order = n := by
    apply h‚ÇÑ.order_eq_int_iff.2
    simp only [ne_eq, zpow_natCast]
    use g, h‚ÇÅ, h‚ÇÇ
    exact h‚ÇÉ
  apply leadCoefficient_of_order_eq_finite h‚ÇÑ h‚ÇÅ (by simp [this]) (by simp_all [this])

/-!
## Elementary Properties
-/

/--
If `f` is meromorphic of finite order at `x`, the leading coefficient is never zero.
-/
lemma leadCoefficient_ne_zero (h‚ÇÅ : MeromorphicAt f x) (h‚ÇÇ : h‚ÇÅ.order ‚â† ‚ä§) :
    leadCoefficient f x ‚â† 0 := by
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅ.order_ne_top_iff.1 h‚ÇÇ
  rwa [leadCoefficient_of_order_eq_finite‚ÇÅ h‚ÇÅg h‚ÇÇg h‚ÇÉg]

/-!
## Congruence Lemmata
-/

/--
If two functions agree in a pointed neighborhood, then their leading coefficients agree.
-/
lemma leadCoefficient_congr_nhdNE {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} (h : f‚ÇÅ =·∂†[ùìù[‚â†] x] f‚ÇÇ) :
    leadCoefficient f‚ÇÅ x = leadCoefficient f‚ÇÇ x := by
  by_cases h‚ÇÅ : ¬¨MeromorphicAt f‚ÇÅ x
  ¬∑ simp [h‚ÇÅ, (MeromorphicAt.meromorphicAt_congr h).not.1 h‚ÇÅ]
  rw [not_not] at h‚ÇÅ
  by_cases h‚ÇÇ : h‚ÇÅ.order = ‚ä§
  ¬∑ simp_all [h‚ÇÅ.congr h, h‚ÇÅ.order_congr h]
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅ.order_ne_top_iff.1 h‚ÇÇ
  rw [leadCoefficient_of_order_eq_finite‚ÇÅ h‚ÇÅg h‚ÇÇg h‚ÇÉg,
    leadCoefficient_of_order_eq_finite‚ÇÅ h‚ÇÅg h‚ÇÇg (h.symm.trans h‚ÇÉg)]

/-!
## Behavior under Arithmetic Operations
-/

/--
The leading coefficient of a scalar product is the scalar product of the leading coefficients.
-/
lemma leadCoefficient_smul {f‚ÇÅ : ùïú ‚Üí ùïú} {f‚ÇÇ : ùïú ‚Üí E} (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x)
    (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x) :
    leadCoefficient (f‚ÇÅ ‚Ä¢ f‚ÇÇ) x = (leadCoefficient f‚ÇÅ x) ‚Ä¢ (leadCoefficient f‚ÇÇ x) := by
  by_cases h‚ÇÅf‚ÇÅ : hf‚ÇÅ.order = ‚ä§
  ¬∑ simp_all [hf‚ÇÅ, hf‚ÇÅ.smul hf‚ÇÇ, hf‚ÇÅ.order_smul hf‚ÇÇ, h‚ÇÅf‚ÇÅ]
  by_cases h‚ÇÅf‚ÇÇ : hf‚ÇÇ.order = ‚ä§
  ¬∑ simp_all [hf‚ÇÅ, hf‚ÇÅ.smul hf‚ÇÇ, hf‚ÇÅ.order_smul hf‚ÇÇ, h‚ÇÅf‚ÇÅ]
  obtain ‚ü®g‚ÇÅ, h‚ÇÅg‚ÇÅ, h‚ÇÇg‚ÇÅ, h‚ÇÉg‚ÇÅ‚ü© := hf‚ÇÅ.order_ne_top_iff.1 h‚ÇÅf‚ÇÅ
  obtain ‚ü®g‚ÇÇ, h‚ÇÅg‚ÇÇ, h‚ÇÇg‚ÇÇ, h‚ÇÉg‚ÇÇ‚ü© := hf‚ÇÇ.order_ne_top_iff.1 h‚ÇÅf‚ÇÇ
  have : f‚ÇÅ ‚Ä¢ f‚ÇÇ =·∂†[ùìù[‚â†] x] fun z ‚Ü¶ (z - x) ^ (hf‚ÇÅ.smul hf‚ÇÇ).order.untop‚ÇÄ ‚Ä¢ (g‚ÇÅ ‚Ä¢ g‚ÇÇ) z := by
    filter_upwards [h‚ÇÉg‚ÇÅ, h‚ÇÉg‚ÇÇ, self_mem_nhdsWithin] with y h‚ÇÅy h‚ÇÇy h‚ÇÉy
    simp_all [hf‚ÇÅ.order_smul hf‚ÇÇ]
    rw [‚Üê smul_assoc, ‚Üê smul_assoc, smul_eq_mul, smul_eq_mul, zpow_add‚ÇÄ (sub_ne_zero.2 h‚ÇÉy)]
    ring_nf
  rw [leadCoefficient_of_order_eq_finite‚ÇÅ h‚ÇÅg‚ÇÅ h‚ÇÇg‚ÇÅ h‚ÇÉg‚ÇÅ,
    leadCoefficient_of_order_eq_finite‚ÇÅ h‚ÇÅg‚ÇÇ h‚ÇÇg‚ÇÇ h‚ÇÉg‚ÇÇ,
    leadCoefficient_of_order_eq_finite (hf‚ÇÅ.smul hf‚ÇÇ) (h‚ÇÅg‚ÇÅ.smul h‚ÇÅg‚ÇÇ) (by simp_all [hf‚ÇÅ.order_smul hf‚ÇÇ]) this]
  simp

/--
The leading coefficient of a product is the product of the leading coefficients.
-/
lemma leadCoefficient_mul {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí ùïú} (hf‚ÇÅ : MeromorphicAt f‚ÇÅ x)
    (hf‚ÇÇ : MeromorphicAt f‚ÇÇ x) :
    leadCoefficient (f‚ÇÅ * f‚ÇÇ) x = (leadCoefficient f‚ÇÅ x) * (leadCoefficient f‚ÇÇ x) := by
  exact leadCoefficient_smul hf‚ÇÅ hf‚ÇÇ
