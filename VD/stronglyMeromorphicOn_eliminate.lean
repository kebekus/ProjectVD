import VD.leftovers.LaurentPolynomial
import VD.ToMathlib.codiscreteWithin
import Mathlib.Analysis.Meromorphic.NormalForm
import Mathlib.Analysis.Complex.Basic

open scoped Interval Topology
open Classical Real Filter

@[simp]
lemma WithTop.eq_untop‚ÇÄ_iff {Œ± : Type*} [Zero Œ±] {a : WithTop Œ±} :
    (a : WithTop Œ±).untop‚ÇÄ = a ‚Üî a ‚â† ‚ä§ := by
  induction a <;> simp

theorem MeromorphicOn.decompose‚ÇÅ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (h‚ÇÅf : MeromorphicOn f U)
  (h‚ÇÇf : MeromorphicNFAt f z‚ÇÄ)
  (h‚ÇÉf : h‚ÇÇf.meromorphicAt.order ‚â† ‚ä§)
  (hz‚ÇÄ : z‚ÇÄ ‚àà U) :
  ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (AnalyticAt ‚ÑÇ g z‚ÇÄ)
    ‚àß (g z‚ÇÄ ‚â† 0)
    ‚àß (f = g * fun z ‚Ü¶ (z - z‚ÇÄ) ^ (divisor f U z‚ÇÄ)) := by

  let h‚ÇÅ := fun z ‚Ü¶ (z - z‚ÇÄ) ^ (-divisor f U z‚ÇÄ)
  have h‚ÇÅh‚ÇÅ : MeromorphicOn h‚ÇÅ U := by
    apply MeromorphicOn.zpow
    apply AnalyticOnNhd.meromorphicOn
    apply AnalyticOnNhd.sub
    exact analyticOnNhd_id
    exact analyticOnNhd_const
  let n : ‚Ñ§ := (-divisor f U z‚ÇÄ)
  have h‚ÇÇh‚ÇÅ : (h‚ÇÅh‚ÇÅ z‚ÇÄ hz‚ÇÄ).order = n := by
    simp_rw [(h‚ÇÅh‚ÇÅ z‚ÇÄ hz‚ÇÄ).order_eq_int_iff]
    use 1
    constructor
    ¬∑ apply analyticAt_const
    ¬∑ constructor
      ¬∑ simp
      ¬∑ apply eventually_nhdsWithin_of_forall
        intro z hz
        simp [n, h‚ÇÅ]

  let g‚ÇÅ := f * h‚ÇÅ
  have h‚ÇÅg‚ÇÅ : MeromorphicOn g‚ÇÅ U := by
    apply h‚ÇÅf.mul h‚ÇÅh‚ÇÅ
  have h‚ÇÇg‚ÇÅ : (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).order = 0 := by
    rw [(h‚ÇÅf z‚ÇÄ hz‚ÇÄ).order_mul (h‚ÇÅh‚ÇÅ z‚ÇÄ hz‚ÇÄ)]
    rw [h‚ÇÇh‚ÇÅ]
    unfold n
    simp [h‚ÇÅf, h‚ÇÉf, hz‚ÇÄ]
    conv =>
      left
      left
      rw [Eq.symm (WithTop.coe_untop (h‚ÇÅf z‚ÇÄ hz‚ÇÄ).order h‚ÇÉf)]
    have
      (a b c : ‚Ñ§)
      (h : a + b = c) :
      (a : WithTop ‚Ñ§) + (b : WithTop ‚Ñ§) = (c : WithTop ‚Ñ§) := by
      rw [‚Üê h]
      simp
    simp [hz‚ÇÄ, h‚ÇÉf]
    rw [WithTop.eq_untop‚ÇÄ_iff.2 h‚ÇÉf]
    exact LinearOrderedAddCommGroupWithTop.add_neg_cancel_of_ne_top h‚ÇÉf

  let g := toMeromorphicNFAt g‚ÇÅ z‚ÇÄ
  have h‚ÇÇg : MeromorphicNFAt g z‚ÇÄ := by
    exact meromorphicNFAt_toMeromorphicNFAt
  have h‚ÇÅg : MeromorphicOn g U := by
    intro z hz
    by_cases h‚ÇÅz : z = z‚ÇÄ
    ¬∑ rw [h‚ÇÅz]
      apply h‚ÇÇg.meromorphicAt
    ¬∑ apply (h‚ÇÅg‚ÇÅ z hz).congr
      rw [eventuallyEq_nhdsWithin_iff]
      rw [eventually_nhds_iff]
      use {z‚ÇÄ}·∂ú
      constructor
      ¬∑ intro y h‚ÇÅy h‚ÇÇy
        let A := (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).eqOn_compl_singleton_toMermomorphicNFAt h‚ÇÅy
        unfold g
        rw [‚Üê A]
      ¬∑ constructor
        ¬∑ exact isOpen_compl_singleton
        ¬∑ exact h‚ÇÅz
  have h‚ÇÉg : (h‚ÇÅg z‚ÇÄ hz‚ÇÄ).order = 0 := by
    unfold g
    let B := (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).eq_nhdNE_toMeromorphicNFAt
    let A := (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).order_congr B
    rw [‚Üê A]
    rw [h‚ÇÇg‚ÇÅ]
  have h‚ÇÑg : AnalyticAt ‚ÑÇ g z‚ÇÄ := by
    apply h‚ÇÇg.order_nonneg_iff_analyticAt.1
    rw [h‚ÇÉg]

  use g, h‚ÇÅg, h‚ÇÑg, (h‚ÇÇg.order_eq_zero_iff).mp h‚ÇÉg
  funext z
  by_cases hz : z = z‚ÇÄ
  ¬∑ rw [hz]
    simp only [Pi.mul_apply, sub_self, h‚ÇÅ, n]
    by_cases h : divisor f U z‚ÇÄ = 0
    ¬∑ simp [h]
      have h‚ÇÇh‚ÇÅ : h‚ÇÅ = 1 := by
        funext w
        unfold h‚ÇÅ
        simp [h]
      have h‚ÇÉg‚ÇÅ : g‚ÇÅ = f := by
        unfold g‚ÇÅ
        rw [h‚ÇÇh‚ÇÅ]
        simp
      have h‚ÇÑg‚ÇÅ : MeromorphicNFAt g‚ÇÅ z‚ÇÄ := by
        rwa [h‚ÇÉg‚ÇÅ]
      unfold g
      rw [toMeromorphicNFAt_eq_self.2 h‚ÇÑg‚ÇÅ, h‚ÇÉg‚ÇÅ]
    ¬∑ rw [zero_zpow (divisor f U z‚ÇÄ) h]
      simp
      let A := h‚ÇÇf.order_eq_zero_iff.not
      simp at A
      rw [‚Üê A]
      simp [h‚ÇÅf, hz‚ÇÄ] at h
      exact h.1
  ¬∑ simp
    unfold g
    rw [‚Üê (h‚ÇÅg‚ÇÅ z‚ÇÄ hz‚ÇÄ).eqOn_compl_singleton_toMermomorphicNFAt hz]
    unfold g‚ÇÅ h‚ÇÅ
    simp only [zpow_neg, Pi.mul_apply, h‚ÇÅ, n]
    rw [mul_assoc, inv_mul_cancel‚ÇÄ]
    simp only [mul_one, h‚ÇÅ, n]
    apply zpow_ne_zero
    rwa [sub_ne_zero]


theorem MeromorphicOn.decompose‚ÇÇ
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {P : Finset U}
  (hf : MeromorphicNFOn f U) :
  (‚àÄ p ‚àà P, (hf p.2).meromorphicAt.order ‚â† ‚ä§) ‚Üí
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (‚àÄ p : P, AnalyticAt ‚ÑÇ g p)
    ‚àß (‚àÄ p : P, g p ‚â† 0)
    ‚àß (f = g * ‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (divisor f U p.1.1)) := by

  apply Finset.induction (motive := fun (P : Finset U) ‚Ü¶ (‚àÄ p ‚àà P, (hf p.2).meromorphicAt.order ‚â† ‚ä§) ‚Üí
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (‚àÄ p : P, AnalyticAt ‚ÑÇ g p)
    ‚àß (‚àÄ p : P, g p ‚â† 0)
    ‚àß (f = g * ‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (divisor f U p.1.1)))

  -- case empty
  simp
  exact hf.meromorphicOn

  -- case insert
  intro u P hu iHyp
  intro hOrder
  obtain ‚ü®g‚ÇÄ, h‚ÇÅg‚ÇÄ, h‚ÇÇg‚ÇÄ, h‚ÇÉg‚ÇÄ, h‚ÇÑg‚ÇÄ‚ü© := iHyp (fun p hp ‚Ü¶ hOrder p (Finset.mem_insert_of_mem hp))

  have h‚ÇÄ : AnalyticAt ‚ÑÇ (‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (divisor f U p.1.1)) u := by
    have : (‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (divisor f U p.1.1)) = (fun z => ‚àè p : P, (z - p.1.1) ^ (divisor f U p.1.1)) := by
      funext w
      simp
    rw [this]
    apply Finset.analyticAt_prod
    intro p hp
    apply AnalyticAt.zpow
    fun_prop
    by_contra hCon
    rw [sub_eq_zero] at hCon
    have : p.1 = u := by
      exact SetCoe.ext (_root_.id (Eq.symm hCon))
    rw [‚Üê this] at hu
    simp [hp] at hu

  have h‚ÇÅ : (‚àè p : P, fun z ‚Ü¶ (z - p.1.1) ^ (divisor f U p.1.1)) u ‚â† 0 := by
    simp only [Finset.prod_apply]
    rw [Finset.prod_ne_zero_iff]
    intro p hp
    apply zpow_ne_zero
    by_contra hCon
    rw [sub_eq_zero] at hCon
    rw [‚Üê SetCoe.ext hCon.symm] at hu
    simp [hp] at hu

  have h‚ÇÖg‚ÇÄ : MeromorphicNFAt g‚ÇÄ u := by
    rw [‚Üê meromorphicNFAt_mul_iff_left h‚ÇÄ h‚ÇÅ (f := g‚ÇÄ), ‚Üê h‚ÇÑg‚ÇÄ]
    exact hf u.2

  have h‚ÇÜg‚ÇÄ : (h‚ÇÅg‚ÇÄ u u.2).order ‚â† ‚ä§ := by
    by_contra hCon
    let A := (h‚ÇÅg‚ÇÄ u u.2).order_mul h‚ÇÄ.meromorphicAt
    simp_rw [‚Üê h‚ÇÑg‚ÇÄ, hCon] at A
    simp at A
    let B := hOrder u (Finset.mem_insert_self u P)
    tauto

  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg, h‚ÇÑg‚ü© := h‚ÇÅg‚ÇÄ.decompose‚ÇÅ h‚ÇÖg‚ÇÄ h‚ÇÜg‚ÇÄ u.2
  use g
  ¬∑ constructor
    ¬∑ exact h‚ÇÅg
    ¬∑ constructor
      ¬∑ intro ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
        simp
        simp at v‚ÇÇ
        rcases v‚ÇÇ with hv|hv
        ¬∑ rwa [hv]
        ¬∑ let A := h‚ÇÇg‚ÇÄ ‚ü®v‚ÇÅ, hv‚ü©
          rw [h‚ÇÑg] at A
          rw [mul_comm] at A
          rw [‚Üê analyticAt_iff_analytic_mul] at A
          simp at A
          exact A
          --
          simp
          apply AnalyticAt.zpow
          fun_prop
          by_contra hCon
          rw [sub_eq_zero] at hCon

          have : v‚ÇÅ = u := by
            exact SetCoe.ext hCon
          rw [this] at hv
          tauto
          --
          apply zpow_ne_zero
          simp
          by_contra hCon
          rw [sub_eq_zero] at hCon
          have : v‚ÇÅ = u := by
            exact SetCoe.ext hCon
          rw [this] at hv
          tauto

      ¬∑ constructor
        ¬∑ intro ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
          simp
          simp at v‚ÇÇ
          rcases v‚ÇÇ with hv|hv
          ¬∑ rwa [hv]
          ¬∑ by_contra hCon
            let A := h‚ÇÉg‚ÇÄ ‚ü®v‚ÇÅ,hv‚ü©
            rw [h‚ÇÑg] at A
            simp at A
            tauto
        ¬∑ conv =>
            left
            rw [h‚ÇÑg‚ÇÄ, h‚ÇÑg]
          simp
          rw [mul_assoc]
          congr
          rw [Finset.prod_insert]
          simp
          congr
          have : (hf u.2).meromorphicAt.order = (h‚ÇÅg‚ÇÄ u u.2).order := by
            have h‚ÇÖg‚ÇÄ : f =·∂†[ùìù u.1] (g‚ÇÄ * ‚àè p : P, fun z => (z - p.1.1) ^ (divisor f U p.1.1)) := by
              exact Eq.eventuallyEq h‚ÇÑg‚ÇÄ
            have h‚ÇÜg‚ÇÄ : f =·∂†[ùìù[‚â†] u.1] (g‚ÇÄ * ‚àè p : P, fun z => (z - p.1.1) ^ (divisor f U p.1.1)) := by
              exact eventuallyEq_nhdsWithin_of_eqOn fun ‚¶Éx‚¶Ñ a => congrFun h‚ÇÑg‚ÇÄ x
            rw [(hf u.2).meromorphicAt.order_congr h‚ÇÜg‚ÇÄ]
            let C := (h‚ÇÅg‚ÇÄ u u.2).order_mul h‚ÇÄ.meromorphicAt
            rw [C]
            let D := h‚ÇÄ.order_eq_zero_iff.2 h‚ÇÅ
            let E := h‚ÇÄ.meromorphicAt_order
            rw [E, D]
            simp
          have : divisor f U u = divisor g‚ÇÄ U u := by
            simp [hf.meromorphicOn, h‚ÇÅg‚ÇÄ]
            rw [this]
          simp [hf.meromorphicOn, h‚ÇÅg‚ÇÄ] at *
          rw [this]
          --
          simpa


theorem MeromorphicOn.decompose‚ÇÉ'
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅU : IsCompact U)
  (h‚ÇÇU : IsConnected U)
  (h‚ÇÅf : MeromorphicNFOn f U)
  (h‚ÇÇf : ‚àÉ u : U, f u ‚â† 0) :
  ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, (MeromorphicOn g U)
    ‚àß (AnalyticOnNhd ‚ÑÇ g U)
    ‚àß (‚àÄ u : U, g u ‚â† 0)
    ‚àß (f = g * ‚àè·∂† u, fun z ‚Ü¶ (z - u) ^ (divisor f U u)) := by

  have h‚ÇÉf : ‚àÄ u : U, (h‚ÇÅf u.2).meromorphicAt.order ‚â† ‚ä§ := by
    rw [‚Üê h‚ÇÅf.meromorphicOn.exists_order_ne_top_iff_forall h‚ÇÇU]
    obtain ‚ü®u, hu‚ü© := h‚ÇÇf
    use u
    rw [‚Üê (h‚ÇÅf u.2).order_eq_zero_iff] at hu
    rw [hu]
    tauto
  have h‚ÇÑf : Set.Finite (Function.support (divisor f U)) := (divisor f U).finiteSupport h‚ÇÅU

  let d := - (divisor f U).toFun
  have h‚ÇÅd : d.support = (Function.support (divisor f U)) := by
    ext x
    unfold d
    simp
    tauto
  let h‚ÇÅ := ‚àè·∂† u, fun z ‚Ü¶ (z - u) ^ (d u)
  have h‚ÇÅh‚ÇÅ : MeromorphicNFOn h‚ÇÅ U := by
    intro z hz
    exact meromorphicNF_LaurentPolynomial d (trivial : z ‚àà ‚ä§)
  have h‚ÇÇh‚ÇÅ : (divisor h‚ÇÅ U) = d := by
    have : (-divisor f U).support.Finite := by
      exact (-divisor f U).finiteSupport h‚ÇÅU
    let A := divisor_LaurentPolynomial_within (-divisor f U) this
    unfold d
    have : -(divisor f U).toFun = (-divisor f U).toFun := by
      exact rfl
    rw [this, ‚Üê A]
    unfold h‚ÇÅ
    unfold d
    congr
  have h‚ÇÉh‚ÇÅ : ‚àÄ (z : ‚ÑÇ) (hz : z ‚àà U), (h‚ÇÅh‚ÇÅ hz).meromorphicAt.order ‚â† ‚ä§ := by
    intro z hz
    apply order_LaurentPolynomial_ne_top
  have h‚ÇÑh‚ÇÅ : ‚àÄ (z : ‚ÑÇ) (hz : z ‚àà U), (h‚ÇÅh‚ÇÅ hz).meromorphicAt.order = d z := by
    intro z hz
    rw [order_LaurentPolynomial]
    rwa [h‚ÇÅd]

  let g' := f * h‚ÇÅ
  have h‚ÇÅg' : MeromorphicOn g' U := h‚ÇÅf.meromorphicOn.mul h‚ÇÅh‚ÇÅ.meromorphicOn
  have h‚ÇÇg' : divisor g' U = 0 := by
    ext x
    unfold g'
    rw [divisor_mul h‚ÇÅf.meromorphicOn h‚ÇÅh‚ÇÅ.meromorphicOn _ h‚ÇÉh‚ÇÅ]
    simp
    simp_rw [h‚ÇÇh‚ÇÅ]
    unfold d
    simp
    ring_nf
    rw [sub_eq_zero]
    rfl
    --
    intro z hz
    exact h‚ÇÉf ‚ü®z, hz‚ü©

  have h‚ÇÉg' : ‚àÄ u : U, (h‚ÇÅg' u.1 u.2).order = 0 := by
    intro u
    rw [(h‚ÇÅf u.2).meromorphicAt.order_mul (h‚ÇÅh‚ÇÅ u.2).meromorphicAt]
    rw [h‚ÇÑh‚ÇÅ]
    unfold d
    unfold MeromorphicOn.divisor
    simp
    have : (h‚ÇÅf u.2).meromorphicAt.order = (h‚ÇÅf u.2).meromorphicAt.order.untop‚ÇÄ := by
      rw [eq_comm]
      simp [h‚ÇÉf u]
    rw [this]
    simp [h‚ÇÅf.meromorphicOn]
    rw [‚Üê WithTop.LinearOrderedAddCommGroup.coe_neg]
    rw [‚Üê WithTop.coe_add]
    simp
    exact u.2

  let g := toMeromorphicNFOn g' U
  have h‚ÇÅg : MeromorphicNFOn g U := by
    unfold g
    exact meromorphicNFOn_toMeromorphicNFOn g' U
  have h‚ÇÇg : divisor g U = 0 := by
    rw [MeromorphicOn.divisor_of_toMeromorphicNFOn]
    rwa [h‚ÇÇg']
  have h‚ÇÉg : AnalyticOnNhd ‚ÑÇ g U := by
    rw [‚Üê h‚ÇÅg.divisor_nonneg_iff_analyticOnNhd, h‚ÇÇg]

  have h‚ÇÑg : ‚àÄ u ‚àà U, g u ‚â† 0 := by
    intro u hu
    rw [‚Üê (h‚ÇÅg hu).order_eq_zero_iff]
    rw [order_toMeromorphicNFOn]
    let A := h‚ÇÉg' ‚ü®u, hu‚ü©
    exact A

  use g
  constructor
  ¬∑ exact MeromorphicNFOn.meromorphicOn h‚ÇÅg
  ¬∑ constructor
    ¬∑ exact h‚ÇÉg
    ¬∑ constructor
      ¬∑ exact fun u ‚Ü¶ h‚ÇÑg u u.2
      ¬∑ have t‚ÇÄ : MeromorphicNFOn (g * ‚àè·∂† (u : ‚ÑÇ), fun z => (z - u) ^ (divisor f U u)) U := by
          rw [meromorphicNFOn_mul_iff_right_of_analyticOnNhd h‚ÇÉg h‚ÇÑg]
          apply MeromorphicNFOn_LaurentPolynomial
        funext z
        by_cases hz : z ‚àà U
        ¬∑ apply Filter.EventuallyEq.eq_of_nhds
          rw [‚Üê MeromorphicNFAt.eventuallyEq_nhdNE_iff_eventuallyEq_nhd (h‚ÇÅf hz) (t‚ÇÄ hz)]
          have h‚ÇÖg : g =·∂†[ùìù[‚â†] z] g' := (toMeromorphicNFOn_eq_self_on_nhdNE h‚ÇÅg' hz)
          have Y' : (g' * ‚àè·∂† (u : ‚ÑÇ), fun z => (z - u) ^ (divisor f U u)) =·∂†[ùìù[‚â†] z] g * ‚àè·∂† (u : ‚ÑÇ), fun z => (z - u) ^ (divisor f U u) := by
            apply Filter.EventuallyEq.symm
            exact Filter.EventuallyEq.mul h‚ÇÖg (by simp)
          apply Filter.EventuallyEq.trans _ Y'
          unfold g'
          unfold h‚ÇÅ
          rcases (h‚ÇÅf hz).meromorphicAt.eventually_eq_zero_or_eventually_ne_zero with h | h
          ¬∑ filter_upwards [h]
            intro a ha
            simp [ha]
          ¬∑ let P := (h‚ÇÅf hz).meromorphicAt.eventually_analyticAt
            filter_upwards [h, P]
            intro y hy h‚ÇÇy
            have z‚ÇÄ : divisor f U y = 0 := by
              have F := h‚ÇÇy.order_eq_zero_iff.2 hy
              rw [MeromorphicOn.divisor_def]
              simp_rw [h‚ÇÇy.meromorphicAt_order, F]
              simp
            have : (finprod (fun u z => (z - u) ^ d u) y * finprod (fun u z => (z - u) ^ (divisor f U u)) y) = 1 := by
              have t‚ÇÄ : (Function.mulSupport fun u z => (z - u) ^ d u).Finite := by
                rwa [mulsupport_LaurentPolynomial, h‚ÇÅd]
              rw [finprod_eq_prod _ t‚ÇÄ]
              have t‚ÇÅ : (Function.mulSupport fun u z => (z - u) ^ divisor f U u).Finite := by
                rwa [mulsupport_LaurentPolynomial]
              rw [finprod_eq_prod _ t‚ÇÅ]
              have : (Function.mulSupport fun u z => (z - u) ^ d u) = (Function.mulSupport fun u z => (z - u) ^ divisor f U u) := by
                rw [mulsupport_LaurentPolynomial]
                rw [mulsupport_LaurentPolynomial]
                unfold d
                simp
                rfl
              have : t‚ÇÄ.toFinset = t‚ÇÅ.toFinset := by congr
              rw [this]
              simp
              rw [‚Üê Finset.prod_mul_distrib]
              apply Finset.prod_eq_one
              intro x hx
              apply zpow_neg_mul_zpow_self
              have : y ‚àâ t‚ÇÅ.toFinset := by
                simp
                rw [z‚ÇÄ]
                simp
                tauto
              by_contra H
              rw [sub_eq_zero] at H
              rw [H] at this
              tauto
            rw [mul_assoc]
            simp [this]
        ¬∑ simp
          have : g z = g' z := by
            unfold g
            unfold toMeromorphicNFOn
            simp [hz, h‚ÇÅg']
          rw [this]
          unfold g'
          unfold h‚ÇÅ
          simp
          rw [mul_assoc]
          nth_rw 1 [‚Üê mul_one (f z)]
          congr
          have t‚ÇÄ : (Function.mulSupport fun u z => (z - u) ^ d u).Finite := by
            rwa [mulsupport_LaurentPolynomial, h‚ÇÅd]
          rw [finprod_eq_prod _ t‚ÇÄ]
          have t‚ÇÅ : (Function.mulSupport fun u z => (z - u) ^ divisor f U u).Finite := by
            rwa [mulsupport_LaurentPolynomial]
          rw [finprod_eq_prod _ t‚ÇÅ]
          have : (Function.mulSupport fun u z => (z - u) ^ d u) = (Function.mulSupport fun u z => (z - u) ^ divisor f U u) := by
            rw [mulsupport_LaurentPolynomial]
            rw [mulsupport_LaurentPolynomial]
            unfold d
            simp
            rfl
          have : t‚ÇÄ.toFinset = t‚ÇÅ.toFinset := by congr
          rw [this]
          simp
          rw [‚Üê Finset.prod_mul_distrib]
          rw [eq_comm]
          apply Finset.prod_eq_one
          intro x hx
          apply zpow_neg_mul_zpow_self

          have : z ‚àâ t‚ÇÅ.toFinset := by
            simp
            have : divisor f U z = 0 := by
              let A := (divisor f U).supportWithinDomain
              simp at A
              classical
              by_contra H
              let B := A z H
              tauto
            rw [this]
            simp
            rfl
          by_contra H
          rw [sub_eq_zero] at H
          rw [H] at this
          tauto
