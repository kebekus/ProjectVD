import Mathlib.Analysis.Meromorphic.Divisor
import VD.ToMathlib.NormalForm

open Classical Filter Topology

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {U : Set ùïú}
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]

namespace MeromorphicOn

/-- If `f‚ÇÅ` is meromorphic on `U`, if `f‚ÇÇ` agrees with `f‚ÇÅ` on a codiscrete
  subset of `U` and outside of `U`, then `f‚ÇÇ` is also meromorphic on `U`. -/
theorem congr_codiscreteWithin {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} (hf‚ÇÅ : MeromorphicOn f‚ÇÅ U)
    (h‚ÇÅ : f‚ÇÅ =·∂†[codiscreteWithin U] f‚ÇÇ) (h‚ÇÇ : Set.EqOn f‚ÇÅ f‚ÇÇ U·∂ú) :
    MeromorphicOn f‚ÇÇ U := by
  intro x hx
  apply (hf‚ÇÅ x hx).congr
  simp_rw [EventuallyEq, Filter.Eventually, mem_codiscreteWithin,
    disjoint_principal_right] at h‚ÇÅ
  filter_upwards [h‚ÇÅ x hx] with a ha
  simp at ha
  tauto

/-- If `f‚ÇÅ` is meromorphic on an open set `U`, if `f‚ÇÇ` agrees with `f‚ÇÅ` on a
  codiscrete subset of `U`, then `f‚ÇÇ` is also meromorphic on `U`. -/
theorem congr_codiscreteWithin_open {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} (hf‚ÇÅ : MeromorphicOn f‚ÇÅ U)
    (h‚ÇÅ : f‚ÇÅ =·∂†[codiscreteWithin U] f‚ÇÇ) (h‚ÇÇ : IsOpen U) :
    MeromorphicOn f‚ÇÇ U := by
  intro x hx
  apply (hf‚ÇÅ x hx).congr
  simp_rw [EventuallyEq, Filter.Eventually, mem_codiscreteWithin,
    disjoint_principal_right] at h‚ÇÅ
  have : U ‚àà ùìù[‚â†] x := by
    apply mem_nhdsWithin.mpr
    use U, h‚ÇÇ, hx, Set.inter_subset_left
  filter_upwards [this, h‚ÇÅ x hx] with a h‚ÇÅa h‚ÇÇa
  simp only [Set.mem_compl_iff, Set.mem_diff, Set.mem_setOf_eq, not_and, Decidable.not_not] at h‚ÇÇa
  tauto

/-- If `f‚ÇÅ` is meromorphic on `U`, if `f‚ÇÇ` agrees with `f‚ÇÅ` on a codiscrete
  subset of `U` and outside of `U`, then `f‚ÇÅ` and `f‚ÇÇ` induce the same
  divisors on `U`. -/
theorem divisor_congr_codiscreteWithin [CompleteSpace E] {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E} (hf‚ÇÅ : MeromorphicOn f‚ÇÅ U)
    (h‚ÇÅ : f‚ÇÅ =·∂†[Filter.codiscreteWithin U] f‚ÇÇ) (h‚ÇÇ : Set.EqOn f‚ÇÅ f‚ÇÇ U·∂ú) :
    divisor f‚ÇÅ U = divisor f‚ÇÇ U := by
  ext x
  by_cases hx : x ‚àà U <;> simp [hf‚ÇÅ, hf‚ÇÅ.congr_codiscreteWithin h‚ÇÅ h‚ÇÇ, hx]
  ¬∑ congr 1
    apply (hf‚ÇÅ x hx).order_congr
    simp_rw [EventuallyEq, Filter.Eventually, mem_codiscreteWithin,
      disjoint_principal_right] at h‚ÇÅ
    filter_upwards [h‚ÇÅ x hx] with a ha
    simp at ha
    tauto

/--
If `f‚ÇÅ` is meromorphic on an open set `U`, if `f‚ÇÇ` agrees with `f‚ÇÅ` on a
codiscrete subset of `U`, then `f‚ÇÅ` and `f‚ÇÇ` induce the same divisors on`U`.
-/
theorem divisor_congr_codiscreteWithin_open [CompleteSpace E] {f‚ÇÅ f‚ÇÇ : ùïú ‚Üí E}
    (hf‚ÇÅ : MeromorphicOn f‚ÇÅ U) (h‚ÇÅ : f‚ÇÅ =·∂†[Filter.codiscreteWithin U] f‚ÇÇ) (h‚ÇÇ : IsOpen U) :
    divisor f‚ÇÅ U = divisor f‚ÇÇ U := by
  ext x
  by_cases hx : x ‚àà U <;> simp [hf‚ÇÅ, hf‚ÇÅ.congr_codiscreteWithin_open h‚ÇÅ h‚ÇÇ, hx]
  ¬∑ congr 1
    apply (hf‚ÇÅ x hx).order_congr
    simp_rw [EventuallyEq, Filter.Eventually, mem_codiscreteWithin,
      disjoint_principal_right] at h‚ÇÅ
    have : U ‚àà ùìù[‚â†] x := by
      apply mem_nhdsWithin.mpr
      use U, h‚ÇÇ, hx, Set.inter_subset_left
    filter_upwards [this, h‚ÇÅ x hx] with a h‚ÇÅa h‚ÇÇa
    simp only [Set.mem_compl_iff, Set.mem_diff, Set.mem_setOf_eq, not_and, Decidable.not_not] at h‚ÇÇa
    tauto

/-- Taking the divisor of a meromorphic function commutes with restriction. -/
theorem divisor_restrict [CompleteSpace E] {f : ùïú ‚Üí E} {V : Set ùïú} (hf : MeromorphicOn f U) (hV : V ‚äÜ U) :
    (divisor f U).restrict hV = divisor f V := by
  ext x
  by_cases hx : x ‚àà V
  ¬∑ rw [Function.locallyFinsuppWithin.restrict_apply]
    simp [hf, hx, hf.mono_set hV, hV hx]
  ¬∑ simp [hx]

-- ----------------

/--
Conversion to normal form on `U` does not affect the divisor.
-/
theorem divisor_toMeromorphicNFOn [CompleteSpace E] {f : ùïú ‚Üí E} (hf : MeromorphicOn f U) :
    MeromorphicOn.divisor f U = MeromorphicOn.divisor (toMeromorphicNFOn f U) U := by
  rw [‚Üê hf.divisor_congr_codiscreteWithin (toMeromorphicNFOn_eqOn_codiscrete hf)]
  exact toMeromorphicNFOn_eq_self_on_compl hf
