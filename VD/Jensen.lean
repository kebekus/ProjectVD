import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.Complex.ValueDistribution.CharacteristicFunction
import Mathlib.Analysis.Meromorphic.FactorizedRational
import Mathlib.Analysis.Meromorphic.NormalForm
import Mathlib.MeasureTheory.Integral.CircleAverage
import Mathlib.Analysis.SpecialFunctions.Integrability.LogMeromorphic
import VD.specialFunctions_CircleIntegral_affine
import VD.ToMathlib.TrailingCoefficientFactorizedRational

open Filter MeromorphicAt MeromorphicOn Metric Real

variable
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E]

/-!
## Circle Averages

In preparation to the proof of Jensen's formula, compute several circle
integrals.
-/

/--
-/
@[simp]
lemma circleAverage_logAbs_affine {R : ‚Ñù} {c u : ‚ÑÇ} (hu : u ‚àà closedBall c |R|) :
    circleAverage (log ‚Äñ¬∑ - u‚Äñ) c R = log R := by
  rw [‚Üê circleAverage_fun_add]
  have : (fun z ‚Ü¶ log ‚Äñz + c - u‚Äñ) = (log ‚Äñ¬∑ - (u - c)‚Äñ) := by
    ext z
    congr 2
    ring
  rw [this, int‚ÇÖ (by aesop)]

@[simp]
lemma circleAverage_logAbs_factorizedRational {R : ‚Ñù} {c : ‚ÑÇ}
    (D : Function.locallyFinsuppWithin (closedBall c |R|) ‚Ñ§) :
    circleAverage (‚àë·∂† u, ((D u) * log ‚Äñ¬∑ - u‚Äñ)) c R = ‚àë·∂† u, (D u) * log R := by
  have h := D.finiteSupport (isCompact_closedBall c |R|)
  calc circleAverage (‚àë·∂† u, ((D u) * log ‚Äñ¬∑ - u‚Äñ)) c R
  _ = circleAverage (‚àë u ‚àà h.toFinset, ((D u) * log ‚Äñ¬∑ - u‚Äñ)) c R := by
    rw [finsum_eq_sum_of_support_subset]
    intro u
    contrapose
    aesop
  _ = ‚àë i ‚àà h.toFinset, circleAverage (fun x ‚Ü¶ ‚Üë(D i) * log ‚Äñx - i‚Äñ) c R := by
    rw [circleAverage_sum]
    intro u hu
    apply IntervalIntegrable.const_mul
    apply circleIntegrable_log_norm_meromorphicOn (f := (¬∑ - u))
    apply (analyticOnNhd_id.sub analyticOnNhd_const).meromorphicOn
  _ = ‚àë u ‚àà h.toFinset, ‚Üë(D u) * log R := by
    apply Finset.sum_congr rfl
    intro u hu
    simp_rw [‚Üê smul_eq_mul, circleAverage_fun_smul]
    congr
    apply circleAverage_logAbs_affine
    apply D.supportWithinDomain
    simp_all
  _ = ‚àë·∂† u, (D u) * log R := by
    rw [finsum_eq_sum_of_support_subset]
    intro u
    aesop

-- WARNING: Want that for function to E
@[simp]
lemma circleAverage_nonVanishAnalytic {R : ‚Ñù} {c : ‚ÑÇ} {g : ‚ÑÇ ‚Üí ‚ÑÇ}
    (h‚ÇÅg : AnalyticOnNhd ‚ÑÇ g (closedBall c |R|))
    (h‚ÇÇg : ‚àÄ u : closedBall c |R|, g u ‚â† 0) :
    circleAverage (log ‚Äñg ¬∑‚Äñ) c R = log ‚Äñg c‚Äñ := by
  apply harmonic_meanValue‚ÇÇ
    (fun x hx ‚Ü¶ logabs_of_holomorphicAt_is_harmonic (h‚ÇÅg x hx).holomorphicAt (h‚ÇÇg ‚ü®x, hx‚ü©))

/-!
## Jensen's Formula
-/

-- WARNING: Want that for function to E
theorem MeromorphicOn.JensenFormula {R : ‚Ñù} {f : ‚ÑÇ ‚Üí ‚ÑÇ} (hR : R ‚â† 0) (h‚ÇÅf : MeromorphicOn f (closedBall 0 |R|)) :
    circleAverage (log ‚Äñf ¬∑‚Äñ) 0 R
      = ‚àë·∂† u, divisor f (closedBall 0 |R|) u * log (R * ‚Äñu‚Äñ‚Åª¬π)
        + divisor f (closedBall 0 |R|) 0 * log R + log ‚ÄñmeromorphicTrailingCoeffAt f 0‚Äñ := by
  -- Shorthand notation to keep line size in check
  let CB := closedBall (0 : ‚ÑÇ) |R|
  by_cases h‚ÇÇf : ‚àÄ u : CB, meromorphicOrderAt f u ‚â† ‚ä§
  ¬∑ have h‚ÇÉf := (divisor f CB).finiteSupport (isCompact_closedBall 0 |R|)
    -- Extract zeros & poles and compute
    obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅf.extract_zeros_poles h‚ÇÇf h‚ÇÉf
    calc circleAverage (log ‚Äñf ¬∑‚Äñ) 0 R
    _ = circleAverage ((‚àë·∂† u, (divisor f CB u * log ‚Äñ¬∑ - u‚Äñ)) + (log ‚Äñg ¬∑‚Äñ)) 0 R := by
      have h‚ÇÑg := extract_zeros_poles_log h‚ÇÇg h‚ÇÉg
      rw [circleAverage_congr_codiscreteWithin (codiscreteWithin.mono sphere_subset_closedBall h‚ÇÑg) hR]
    _ = circleAverage (‚àë·∂† u, (divisor f CB u * log ‚Äñ¬∑ - u‚Äñ)) 0 R + circleAverage (log ‚Äñg ¬∑‚Äñ) 0 R := by
      apply circleAverage_add
      exact circleIntegrable_log_norm_factorizedRational (divisor f CB)
      exact circleIntegrable_log_norm_meromorphicOn (h‚ÇÅg.mono sphere_subset_closedBall).meromorphicOn
    _ = ‚àë·∂† u, divisor f CB u * log R + log ‚Äñg 0‚Äñ := by simp [h‚ÇÅg, h‚ÇÇg]
    _ = ‚àë·∂† u, divisor f CB u * log R + (log ‚ÄñmeromorphicTrailingCoeffAt f 0‚Äñ - ‚àë·∂† u, divisor f CB u * log ‚Äñu‚Äñ) := by
      have t‚ÇÄ : 0 ‚àà CB := by simp [CB]
      have t‚ÇÅ : AccPt 0 (ùìü CB) := by
        apply accPt_iff_frequently_nhdsNE.mpr
        apply compl_notMem
        apply mem_nhdsWithin.mpr
        use ball 0 |R|
        simpa [hR] using fun _ ‚ü®h, _‚ü© ‚Ü¶ ball_subset_closedBall h
      simp [MeromorphicOn.meromorphicTrailingCoeffAt_extract_zeros_poles_log h‚ÇÉf t‚ÇÄ t‚ÇÅ (h‚ÇÅf 0 t‚ÇÄ) (h‚ÇÅg 0 t‚ÇÄ) (h‚ÇÇg ‚ü®0, t‚ÇÄ‚ü©) h‚ÇÉg]
    _ = ‚àë·∂† u, divisor f CB u * log R - ‚àë·∂† u, divisor f CB u * log ‚Äñu‚Äñ + log ‚ÄñmeromorphicTrailingCoeffAt f 0‚Äñ := by
      ring
    _ = (‚àë·∂† u, divisor f CB u * (log R - log ‚Äñu‚Äñ)) + log ‚ÄñmeromorphicTrailingCoeffAt f 0‚Äñ := by
      rw [‚Üê finsum_sub_distrib]
      simp_rw [‚Üê mul_sub]
      repeat apply h‚ÇÉf.subset (fun _ ‚Ü¶ (by simp_all))
    _ = ‚àë·∂† u, divisor f CB u * log (R * ‚Äñu‚Äñ‚Åª¬π) + divisor f CB 0 * log R + log ‚ÄñmeromorphicTrailingCoeffAt f 0‚Äñ := by
      rw [Function.locallyFinsuppWithin.countingFunction_finsum_eq_finsum_add hR h‚ÇÉf]
  ¬∑ -- Trivial case: `f` vanishes on a codiscrete set
    rw [‚Üê h‚ÇÅf.exists_meromorphicOrderAt_ne_top_iff_forall
      ‚ü®nonempty_closedBall.mpr (abs_nonneg R), (convex_closedBall 0 |R|).isPreconnected‚ü©] at h‚ÇÇf
    push_neg at h‚ÇÇf
    have : divisor f CB = 0 := by
      ext x
      by_cases h : x ‚àà CB
      <;> simp_all [CB, divisor_def]
    simp only [CB, this, Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, Int.cast_zero, zero_mul,
      finsum_zero, add_zero, zero_add]
    rw [MeromorphicAt.meromorphicTrailingCoeffAt_of_order_eq_top (by aesop), norm_zero, log_zero]
    have : f =·∂†[codiscreteWithin CB] 0 := by
      filter_upwards [h‚ÇÅf.meromorphicNFAt_mem_codiscreteWithin, self_mem_codiscreteWithin CB]
        with z h‚ÇÅz h‚ÇÇz
      simpa [h‚ÇÇf ‚ü®z, h‚ÇÇz‚ü©] using (not_iff_not.2 h‚ÇÅz.meromorphicOrderAt_eq_zero_iff)
    rw [circleAverage_congr_codiscreteWithin (f‚ÇÇ := 0) _ hR]
    simp only [circleAverage, mul_inv_rev, Pi.zero_apply, intervalIntegral.integral_zero,
      smul_eq_mul, mul_zero]
    apply Filter.codiscreteWithin.mono (U := CB) sphere_subset_closedBall
    filter_upwards [this] with z hz
    simp_all
