import Mathlib.Analysis.SpecialFunctions.Integrals
import Mathlib.Analysis.SpecialFunctions.Log.NegMulLog
import Mathlib.Analysis.Convex.SpecificFunctions.Deriv
import VD.meromorphicOn_integrability
import Mathlib.Analysis.Complex.CauchyIntegral

open scoped Interval Topology
open Real Filter MeasureTheory intervalIntegral

theorem analyticOnNhd_realPart {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : AnalyticOnNhd ‚ÑÇ f Set.univ) :
    AnalyticOnNhd ‚Ñù (fun x ‚Ü¶ (f x).re : ‚Ñù ‚Üí ‚Ñù) Set.univ := by
  have : (fun x ‚Ü¶ (f x).re : ‚Ñù ‚Üí ‚Ñù) = Complex.reCLM ‚àò f ‚àò Complex.ofRealCLM := by
    ext x
    tauto
  rw [this]
  apply ContinuousLinearMap.comp_analyticOnNhd Complex.reCLM
  apply AnalyticOnNhd.comp'
  apply AnalyticOnNhd.mono (t := Set.univ)
  apply AnalyticOnNhd.restrictScalars (ùïú' := ‚ÑÇ)
  exact h
  tauto
  exact ContinuousLinearMap.analyticOnNhd Complex.ofRealCLM Set.univ

theorem analyticOnNhd_sin :
    AnalyticOnNhd ‚Ñù Real.sin Set.univ := by
  apply analyticOnNhd_realPart (f := Complex.sin)
  apply Complex.analyticOnNhd_univ_iff_differentiable.mpr
  exact Complex.differentiable_sin

theorem intervalIntegrable_log_sin {a b : ‚Ñù} :
    IntervalIntegrable (log ‚àò sin) volume a b := by
  apply MeromorphicOn.intervalIntegrable_log
  apply AnalyticOnNhd.meromorphicOn
  apply analyticOnNhd_sin.mono
  tauto

theorem intervalIntegrable_log_cos : IntervalIntegrable (log ‚àò cos) volume 0 (œÄ / 2) := by
  let A := IntervalIntegrable.comp_sub_left (intervalIntegrable_log_sin (a := 0) (b := œÄ / 2)) (œÄ / 2)
  simp only [Function.comp_apply, sub_zero, sub_self] at A
  simp_rw [sin_pi_div_two_sub] at A
  have : (fun x => log (cos x)) = log ‚àò cos := rfl
  apply IntervalIntegrable.symm
  rwa [‚Üê this]

theorem intervalIntegral.integral_congr_volume
  {E : Type u_3} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f : ‚Ñù ‚Üí E}
  {g : ‚Ñù ‚Üí E}
  {a : ‚Ñù}
  {b : ‚Ñù}
  (h‚ÇÄ : a < b)
  (h‚ÇÅ : Set.EqOn f g (Set.Ioo a b)) :
  ‚à´ (x : ‚Ñù) in a..b, f x = ‚à´ (x : ‚Ñù) in a..b, g x := by

  apply intervalIntegral.integral_congr_ae
  rw [MeasureTheory.ae_iff]
  apply nonpos_iff_eq_zero.1
  push_neg
  have : {x | x ‚àà Œô a b ‚àß f x ‚â† g x} ‚äÜ {b} := by
    intro x hx
    have t‚ÇÇ : x ‚àà Œô a b \ Set.Ioo a b := by
      constructor
      ¬∑ exact hx.1
      ¬∑ by_contra H
        exact hx.2 (h‚ÇÅ H)
    rw [Set.uIoc_of_le h‚ÇÄ.le] at t‚ÇÇ
    rw [Set.Ioc_diff_Ioo_same h‚ÇÄ] at t‚ÇÇ
    assumption
  calc volume {a_1 | a_1 ‚àà Œô a b ‚àß f a_1 ‚â† g a_1}
  _ ‚â§ volume {b} := volume.mono this
  _ = 0 := volume_singleton

theorem IntervalIntegrable.integral_congr_Ioo
  {E : Type u_3} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  {f g : ‚Ñù ‚Üí E}
  {a b : ‚Ñù}
  (hab : a ‚â§ b)
  (hfg : Set.EqOn f g (Set.Ioo a b)) :
  IntervalIntegrable f volume a b ‚Üî IntervalIntegrable g volume a b := by

  rw [intervalIntegrable_iff_integrableOn_Ioo_of_le hab]
  rw [MeasureTheory.integrableOn_congr_fun hfg measurableSet_Ioo]
  rw [‚Üê intervalIntegrable_iff_integrableOn_Ioo_of_le hab]

lemma integral_log_sin‚ÇÄ : ‚à´ (x : ‚Ñù) in (0)..œÄ, log (sin x) = 2 * ‚à´ (x : ‚Ñù) in (0)..(œÄ / 2), log (sin x) := by
  rw [‚Üê intervalIntegral.integral_add_adjacent_intervals (a := 0) (b := œÄ / 2) (c := œÄ)]
  conv =>
    left
    right
    arg 1
    intro x
    rw [‚Üê sin_pi_sub]
  rw [intervalIntegral.integral_comp_sub_left (fun x ‚Ü¶ log (sin x)) œÄ]
  have : œÄ - œÄ / 2 = œÄ / 2 := by linarith
  rw [this]
  simp
  ring
  -- IntervalIntegrable (fun x => log (sin x)) volume 0 (œÄ / 2)
  exact intervalIntegrable_log_sin
  -- IntervalIntegrable (fun x => log (sin x)) volume (œÄ / 2) œÄ
  exact intervalIntegrable_log_sin

lemma integral_log_sin‚ÇÅ : ‚à´ (x : ‚Ñù) in (0)..(œÄ / 2), log (sin x) = -log 2 * œÄ/2 := by

  have t‚ÇÅ {x : ‚Ñù} : x ‚àà Set.Ioo 0 (œÄ / 2) ‚Üí log (sin (2 * x)) = log 2 + log (sin x) + log (cos x) := by
    intro hx
    simp at hx

    rw [sin_two_mul x, log_mul, log_mul]
    exact Ne.symm (NeZero.ne' 2)
    -- sin x ‚â† 0
    apply (fun a => (ne_of_lt a).symm)
    apply sin_pos_of_mem_Ioo
    constructor
    ¬∑ exact hx.1
    ¬∑ linarith [pi_pos, hx.2]
    -- 2 * sin x ‚â† 0
    simp
    apply (fun a => (ne_of_lt a).symm)
    apply sin_pos_of_mem_Ioo
    constructor
    ¬∑ exact hx.1
    ¬∑ linarith [pi_pos, hx.2]
    -- cos x ‚â† 0
    apply (fun a => (ne_of_lt a).symm)
    apply cos_pos_of_mem_Ioo
    constructor
    ¬∑ linarith [pi_pos, hx.1]
    ¬∑ exact hx.2

  have t‚ÇÇ : Set.EqOn (fun y ‚Ü¶ log (sin y)) (fun y ‚Ü¶ log (sin (2 * y)) - log 2 - log (cos y)) (Set.Ioo 0 (œÄ / 2)) := by
    intro x hx
    simp
    rw [t‚ÇÅ hx]
    ring

  rw [intervalIntegral.integral_congr_volume _ t‚ÇÇ]
  rw [intervalIntegral.integral_sub, intervalIntegral.integral_sub]
  rw [intervalIntegral.integral_const]
  rw [intervalIntegral.integral_comp_mul_left (c := 2) (f := fun x ‚Ü¶ log (sin x))]
  simp
  have : 2 * (œÄ / 2) = œÄ := by linarith
  rw [this]
  rw [integral_log_sin‚ÇÄ]

  have : ‚à´ (x : ‚Ñù) in (0)..(œÄ / 2), log (sin x) = ‚à´ (x : ‚Ñù) in (0)..(œÄ / 2), log (cos x) := by
    conv =>
      right
      arg 1
      intro x
      rw [‚Üê sin_pi_div_two_sub]
    rw [intervalIntegral.integral_comp_sub_left (fun x ‚Ü¶ log (sin x)) (œÄ / 2)]
    simp
  rw [‚Üê this]
  simp
  linarith

  exact Ne.symm (NeZero.ne' 2)
  -- IntervalIntegrable (fun x => log (sin (2 * x))) volume 0 (œÄ / 2)
  let A := (intervalIntegrable_log_sin (a := 0) (b := œÄ)).comp_mul_left 2
  simp at A
  assumption
  -- IntervalIntegrable (fun x => log 2) volume 0 (œÄ / 2)
  simp
  -- IntervalIntegrable (fun x => log (sin (2 * x)) - log 2) volume 0 (œÄ / 2)
  apply IntervalIntegrable.sub
  -- -- IntervalIntegrable (fun x => log (sin (2 * x))) volume 0 (œÄ / 2)
  let A := (intervalIntegrable_log_sin (a := 0) (b := œÄ)).comp_mul_left 2
  simp at A
  assumption
  -- -- IntervalIntegrable (fun x => log 2) volume 0 (œÄ / 2)
  simp
  -- -- IntervalIntegrable (fun x => log (cos x)) volume 0 (œÄ / 2)
  exact intervalIntegrable_log_cos
  --
  linarith [pi_pos]


lemma integral_log_sin‚ÇÇ : ‚à´ (x : ‚Ñù) in (0)..œÄ, log (sin x) = -log 2 * œÄ := by
  rw [integral_log_sin‚ÇÄ, integral_log_sin‚ÇÅ]
  ring
