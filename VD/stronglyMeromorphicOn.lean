import Mathlib.Algebra.BigOperators.Finprod
import VD.stronglyMeromorphicAt

open Topology



theorem MeromorphicOn.analyticOnCodiscreteWithin
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (hf : MeromorphicOn f U) :
  { x | AnalyticAt ‚ÑÇ f x } ‚àà Filter.codiscreteWithin U := by

  rw [mem_codiscreteWithin]
  intro x hx
  simp
  rw [‚Üê Filter.eventually_mem_set]
  apply Filter.Eventually.mono (hf x hx).eventually_analyticAt
  simp
  tauto


/- Strongly MeromorphicOn -/
def StronglyMeromorphicOn
  (f : ‚ÑÇ ‚Üí ‚ÑÇ)
  (U : Set ‚ÑÇ) :=
  ‚àÄ z ‚àà U, MeromorphicNFAt f z


/- Strongly MeromorphicAt is Meromorphic -/
theorem StronglyMeromorphicOn.meromorphicOn
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (hf : StronglyMeromorphicOn f U) :
  MeromorphicOn f U := by
  intro z hz
  exact MeromorphicNFAt.meromorphicAt (hf z hz)


/- Strongly MeromorphicOn of non-negative order is analytic -/
theorem StronglyMeromorphicOn.analytic
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅf : StronglyMeromorphicOn f U)
  (h‚ÇÇf : ‚àÄ x, (hx : x ‚àà U) ‚Üí 0 ‚â§ (h‚ÇÅf x hx).meromorphicAt.order) :
  AnalyticOnNhd ‚ÑÇ f U := by
  intro z hz
  apply MeromorphicNFAt.analyticAt
  exact h‚ÇÇf z hz
  exact h‚ÇÅf z hz


/- Analytic functions are strongly meromorphic -/
theorem AnalyticOn.stronglyMeromorphicOn
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅf : AnalyticOnNhd ‚ÑÇ f U) :
  StronglyMeromorphicOn f U := by
  intro z hz
  apply AnalyticAt.MeromorphicNFAt
  exact h‚ÇÅf z hz


theorem stronglyMeromorphicOn_of_mul_analytic'
  {f g : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (h‚ÇÅg : AnalyticOnNhd ‚ÑÇ g U)
  (h‚ÇÇg : ‚àÄ u : U, g u ‚â† 0)
  (h‚ÇÅf : StronglyMeromorphicOn f U) :
  StronglyMeromorphicOn (g * f) U := by
  intro z hz
  rw [mul_comm]
  apply (MeromorphicNFAt_of_mul_analytic (h‚ÇÅg z hz) ?h‚ÇÇg).mp (h‚ÇÅf z hz)
  exact h‚ÇÇg ‚ü®z, hz‚ü©


/- Make strongly MeromorphicOn -/
noncomputable def MeromorphicOn.makeStronglyMeromorphicOn
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (hf : MeromorphicOn f U) :
  ‚ÑÇ ‚Üí ‚ÑÇ := by
  intro z
  by_cases hz : z ‚àà U
  ¬∑ exact (hf z hz).makeMeromorphicNFAt z
  ¬∑ exact f z


theorem makeStronglyMeromorphicOn_changeDiscrete
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (hz‚ÇÄ : z‚ÇÄ ‚àà U) :
  hf.makeStronglyMeromorphicOn =·∂†[ùìù[‚â†] z‚ÇÄ] f := by
  apply Filter.eventually_iff_exists_mem.2
  let A := (hf z‚ÇÄ hz‚ÇÄ).eventually_analyticAt
  obtain ‚ü®V, h‚ÇÅV, h‚ÇÇV‚ü©  := Filter.eventually_iff_exists_mem.1 A
  use V
  constructor
  ¬∑ assumption
  ¬∑ intro v hv
    unfold MeromorphicOn.makeStronglyMeromorphicOn
    by_cases h‚ÇÇv : v ‚àà U
    ¬∑ simp [h‚ÇÇv]
      rw [‚Üê MeromorphicNFAt.makeStronglyMeromorphic_id]
      exact AnalyticAt.MeromorphicNFAt (h‚ÇÇV v hv)
    ¬∑ simp [h‚ÇÇv]


theorem makeStronglyMeromorphicOn_changeDiscrete'
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (hz‚ÇÄ : z‚ÇÄ ‚àà U) :
  hf.makeStronglyMeromorphicOn =·∂†[ùìù z‚ÇÄ] (hf z‚ÇÄ hz‚ÇÄ).makeMeromorphicNFAt := by
  apply Mnhds
  ¬∑ apply Filter.EventuallyEq.trans (makeStronglyMeromorphicOn_changeDiscrete hf hz‚ÇÄ)
    exact m‚ÇÇ (hf z‚ÇÄ hz‚ÇÄ)
  ¬∑ rw [MeromorphicOn.makeStronglyMeromorphicOn]
    simp [hz‚ÇÄ]


theorem makeStronglyMeromorphicOn_changeDiscrete''
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (hf : MeromorphicOn f U) :
  f =·∂†[Filter.codiscreteWithin U] hf.makeStronglyMeromorphicOn := by

  rw [Filter.eventuallyEq_iff_exists_mem]
  use { x | AnalyticAt ‚ÑÇ f x }
  constructor
  ¬∑ exact MeromorphicOn.analyticOnCodiscreteWithin hf
  ¬∑ intro x hx
    simp at hx
    rw [MeromorphicOn.makeStronglyMeromorphicOn]
    by_cases h‚ÇÅx : x ‚àà U
    ¬∑ simp [h‚ÇÅx]
      rw [‚Üê MeromorphicNFAt.makeStronglyMeromorphic_id hx.MeromorphicNFAt]
    ¬∑ simp [h‚ÇÅx]


theorem stronglyMeromorphicOn_of_makeStronglyMeromorphicOn
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  (hf : MeromorphicOn f U) :
  StronglyMeromorphicOn hf.makeStronglyMeromorphicOn U := by
  intro z hz
  let A := makeStronglyMeromorphicOn_changeDiscrete' hf hz
  rw [meromorphicNFAt_congr A]
  exact MeromorphicNFAt_of_makeStronglyMeromorphic (hf z hz)


theorem makeStronglyMeromorphicOn_changeOrder
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {U : Set ‚ÑÇ}
  {z‚ÇÄ : ‚ÑÇ}
  (hf : MeromorphicOn f U)
  (hz‚ÇÄ : z‚ÇÄ ‚àà U) :
  (stronglyMeromorphicOn_of_makeStronglyMeromorphicOn hf z‚ÇÄ hz‚ÇÄ).meromorphicAt.order = (hf z‚ÇÄ hz‚ÇÄ).order := by
  apply MeromorphicAt.order_congr
  exact makeStronglyMeromorphicOn_changeDiscrete hf hz‚ÇÄ
