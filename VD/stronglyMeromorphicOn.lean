--import Mathlib.Analysis.Meromorphic.Divisor.MeromorphicFunction
import Mathlib.Analysis.Meromorphic.NormalFormAt
import Mathlib.Analysis.Meromorphic.Divisor
import VD.Divisor_MeromorphicOn

open Topology

/--
Elements of ordered additive commutative groups are nonnegative iff their untop‚ÇÄ
is nonnegative.
-/
@[simp]
theorem nonneg_untop0_iff_nonneg {Œ± : Type*} [OrderedAddCommGroup Œ±] (a : WithTop Œ±) :
    0 ‚â§ a.untop‚ÇÄ ‚Üî 0 ‚â§ a := by
  by_cases ha : a = ‚ä§
  ¬∑ rw [ha]
    tauto
  lift a to Œ± using ha
  simp

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {f : ùïú ‚Üí E}
  {x : ùïú}
  {U : Set ùïú}


/-- I
f `f` is meromorphic in normal form, then so is its inverse.
-/
theorem MeromorphicNFAt.inv {f : ùïú ‚Üí ùïú} (hf : MeromorphicNFAt f x) :
    MeromorphicNFAt f‚Åª¬π x := by
  rcases hf with h | ‚ü®n, g, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©
  ¬∑ left
    filter_upwards [h] with x hx
    simp [hx]
  ¬∑ right
    use -n, g‚Åª¬π, h‚ÇÅ.inv h‚ÇÇ, (by simp_all)
    filter_upwards [h‚ÇÉ] with y hy
    simp only [Pi.inv_apply, hy, Pi.smul_apply', Pi.pow_apply, smul_eq_mul, mul_inv_rev, zpow_neg]
    ring_nf

/--
A function to ùïú is meromorphic in normal form at a point iff its inverse is.
-/
theorem meromorphicNFAt_iff_meromorphicNFAt_inv {f : ùïú ‚Üí ùïú} :
    MeromorphicNFAt f x ‚Üî MeromorphicNFAt f‚Åª¬π x := by
  constructor
  ¬∑ exact MeromorphicNFAt.inv
  ¬∑ nth_rw 2 [‚Üê inv_inv f]
    exact MeromorphicNFAt.inv

/-!
# Normal form of meromorphic functions on a given set

## Definition
-/

/--
A function is 'meromorphic in normal form' on `U` if has normal form at every
point of `U`.
-/
def MeromorphicNFOn (f : ùïú ‚Üí E) (U : Set ùïú) := ‚àÄ z ‚àà U, MeromorphicNFAt f z

/-!
## Relation to other properties of functions
-/

/--
If a function is meromorphic in normal form on `U`, then it is meromorphic on
`U`.
-/
theorem MeromorphicNFOn.meromorphicOn (hf : MeromorphicNFOn f U) :
    MeromorphicOn f U := fun z hz ‚Ü¶ (hf z hz).meromorphicAt

/--
If a function is meromorphic in normal form on `U`, then its divisor is
non-negative iff it is analytic.
-/
theorem MeromorphicNFOn.nonneg_divisor_iff_analyticOnNhd [CompleteSpace E]
    (h‚ÇÅf : MeromorphicNFOn f U) :
    0 ‚â§ MeromorphicOn.divisor f U ‚Üî AnalyticOnNhd ùïú f U := by
  constructor <;> intro h
  ¬∑ intro x hx
    rw [‚Üê (h‚ÇÅf x hx).order_nonneg_iff_analyticAt]
    have := h x
    simp only [Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, h‚ÇÅf.meromorphicOn, hx,
      MeromorphicOn.divisor_apply, nonneg_untop0_iff_nonneg] at this
    assumption
  ¬∑ intro x
    by_cases hx : x ‚àà U
    ¬∑ simp only [Function.locallyFinsuppWithin.coe_zero, Pi.zero_apply, h‚ÇÅf.meromorphicOn, hx,
      MeromorphicOn.divisor_apply, nonneg_untop0_iff_nonneg]
      exact (h‚ÇÅf x hx).order_nonneg_iff_analyticAt.2 (h x hx)
    ¬∑ simp [h‚ÇÅf.meromorphicOn, hx]

/-- Analytic functions are meromorphic in normal form. -/
theorem AnalyticOnNhd.meromorphicNFOn (h‚ÇÅf : AnalyticOnNhd ùïú f U) :
    MeromorphicNFOn f U := fun z hz ‚Ü¶ (h‚ÇÅf z hz).meromorphicNFAt

/-!
## Divisors and zeros of meromorphic functions in normal form.
-/

/--
If `f` is meromorphic in normal form on `U` and nowhere locally constant zero,
then its zero set equals the support of the associated divisor.
-/
theorem MeromorphicNFOn.zero_set_eq_divisor_support [CompleteSpace E] (h‚ÇÅf : MeromorphicNFOn f U)
    (h‚ÇÇf : ‚àÄ u : U, (h‚ÇÅf u u.2).meromorphicAt.order ‚â† ‚ä§) :
    U ‚à© f‚Åª¬π' {0} = (Function.support (MeromorphicOn.divisor f U)) := by
  ext u
  constructor <;> intro hu
  ¬∑ simp_all only [ne_eq, Subtype.forall, Set.mem_inter_iff, Set.mem_preimage,
      Set.mem_singleton_iff, Function.mem_support, h‚ÇÅf.meromorphicOn, MeromorphicOn.divisor_apply,
      WithTop.untop‚ÇÄ_eq_zero, (h‚ÇÅf u hu.1).order_eq_zero_iff, not_true_eq_false, or_self,
      not_false_eq_true]
  ¬∑ simp only [Function.mem_support, ne_eq] at hu
    constructor
    ¬∑ exact (MeromorphicOn.divisor f U).supportWithinDomain hu
    ¬∑ rw [Set.mem_preimage, Set.mem_singleton_iff]
      have := (h‚ÇÅf u ((MeromorphicOn.divisor f U).supportWithinDomain hu)).order_eq_zero_iff.not
      simp only [h‚ÇÅf.meromorphicOn, (MeromorphicOn.divisor f U).supportWithinDomain hu,
        MeromorphicOn.divisor_apply, WithTop.untop‚ÇÄ_eq_zero, not_or] at hu
      simp_all [this, hu.1]

/-!
## Criteria to guarantee normal form
-/

/--
If `f` is any function and `g` is analytic without zero on `U`, then `f` is
meromorphic in normal form on `U` iff `g ‚Ä¢ f` is meromorphic in normal form on
`U`.
-/
theorem meromorphicNFOn_smul_iff_right_of_analyticOnNhd {g : ùïú ‚Üí ùïú} (h‚ÇÅg : AnalyticOnNhd ùïú g U)
    (h‚ÇÇg : ‚àÄ u : U, g u ‚â† 0) :
    MeromorphicNFOn (g ‚Ä¢ f) U ‚Üî MeromorphicNFOn f U := by
  constructor <;> intro h z hz
  ¬∑ rw [‚Üê meromorphicNFAt_smul_iff_right_of_analyticAt (h‚ÇÅg z hz) (h‚ÇÇg ‚ü®z, hz‚ü©)]
    exact h z hz
  ¬∑ apply (h z hz).smul_analytic (h‚ÇÅg z hz)
    exact h‚ÇÇg ‚ü®z, hz‚ü©

/--
If `f` is any function and `g` is analytic without zero in `U`, then `f` is
meromorphic in normal form on `U` iff `g * f` is meromorphic in normal form on
`U`.
-/
theorem meromorphicNFOn_mul_iff_right_of_analyticOnNhd {f g : ùïú ‚Üí ùïú} (h‚ÇÅg : AnalyticOnNhd ùïú g U)
    (h‚ÇÇg : ‚àÄ u : U, g u ‚â† 0) :
    MeromorphicNFOn (g * f) U ‚Üî MeromorphicNFOn f U := by
  rw [‚Üê smul_eq_mul]
  exact meromorphicNFOn_smul_iff_right_of_analyticOnNhd h‚ÇÅg h‚ÇÇg

/--
If `f` is any function and `g` is analytic without zero in `U`, then `f` is
meromorphic in normal form on `U` iff `f * g` is meromorphic in normal form on
`U`.
-/
theorem meromorphicNFOn_mul_iff_left_of_analyticOnNhd {f g : ùïú ‚Üí ùïú} (h‚ÇÅg : AnalyticOnNhd ùïú g U)
    (h‚ÇÇg : ‚àÄ u : U, g u ‚â† 0) :
    MeromorphicNFOn (f * g) U ‚Üî MeromorphicNFOn f U := by
  rw [mul_comm, ‚Üê smul_eq_mul]
  exact meromorphicNFOn_mul_iff_right_of_analyticOnNhd h‚ÇÅg h‚ÇÇg

/--
A function to ùïú is meromorphic in normal form on `U` iff its inverse is.
-/
theorem meromorphicNFOn_iff_meromorphicNFOn_inv {f : ùïú ‚Üí ùïú} :
    MeromorphicNFOn f U ‚Üî MeromorphicNFOn f‚Åª¬π U := by
  constructor
  ¬∑ exact fun h x hx ‚Ü¶ meromorphicNFAt_iff_meromorphicNFAt_inv.1 (h x hx)
  ¬∑ exact fun h x hx ‚Ü¶ meromorphicNFAt_iff_meromorphicNFAt_inv.2 (h x hx)

/-!
## Continuous extension and conversion to normal form
-/

variable (f U) in
/--
If `f` is meromorphic on `U`, convert `f` to normal form on `U` by changing its
values along a discrete subset within `U`. Otherwise, returns the 0 function.
-/
noncomputable def toMeromorphicNFOn :
    ùïú ‚Üí E := by
  by_cases h‚ÇÅf : MeromorphicOn f U
  ¬∑ intro z
    by_cases hz : z ‚àà U
    ¬∑ exact toMeromorphicNFAt f z z
    ¬∑ exact f z
  ¬∑ exact 0

/--
If `f` is not meromorphic on `U`, conversion to normal form  maps the function
to `0`.
-/
@[simp] lemma toMeromorphicNFOn_of_not_meromorphicOn (hf : ¬¨MeromorphicOn f U) :
    toMeromorphicNFOn f U = 0 := by
  simp [toMeromorphicNFOn, hf]

/--
Conversion to normal form on `U` does not change values outside of `U`.
-/
@[simp] lemma toMeromorphicNFOn_eq_self_on_compl (hf : MeromorphicOn f U) :
    Set.EqOn f (toMeromorphicNFOn f U) U·∂ú := by
  intro x hx
  simp_all [toMeromorphicNFOn]

/--
Conversion to normal form on `U` changes the value only along a discrete subset
of `U`.
-/
theorem toMeromorphicNFOn_eqOn_codiscrete [CompleteSpace E] (hf : MeromorphicOn f U) :
    f =·∂†[Filter.codiscreteWithin U] toMeromorphicNFOn f U := by
  have : U ‚àà Filter.codiscreteWithin U := by
    simp [mem_codiscreteWithin.2]
  filter_upwards [hf.analyticAt_mem_codiscreteWithin, this] with a h‚ÇÅa h‚ÇÇa
  simp [toMeromorphicNFOn, hf, ‚Üê toMeromorphicNFAt_eq_self.1 h‚ÇÅa.meromorphicNFAt]

/--
Conversion to normal form on `U` does not affect the divisor.
-/
theorem divisor_toMeromorphicNFOn [CompleteSpace E] (hf : MeromorphicOn f U) :
    MeromorphicOn.divisor f U = MeromorphicOn.divisor (toMeromorphicNFOn f U) U := by
  rw [‚Üê hf.divisor_congr_codiscreteWithin (toMeromorphicNFOn_eqOn_codiscrete hf)]
  exact toMeromorphicNFOn_eq_self_on_compl hf

/--
If `f` is meromorphic on `U` and `x ‚àà U`, then `f` and its conversion to normal
form on `U` agree in a punctured neighborhood of `x`.
-/
theorem MeromorphicOn.toMeromorphicNFOn_eq_self_on_nhdNE [CompleteSpace E]
    (hf : MeromorphicOn f U) (hx : x ‚àà U) :
    f =·∂†[ùìù[‚â†] x] toMeromorphicNFOn f U := by
  filter_upwards [(hf x hx).eventually_analyticAt] with a ha
  simp [toMeromorphicNFOn, hf, ‚Üê toMeromorphicNFAt_eq_self.1 ha.meromorphicNFAt]

/--
If `f` is meromorphic on `U` and `x ‚àà U`, then conversion to normal form at `x`
and conversion to normal form on `U` agree in a neighborhood of `x`.
-/
theorem toMeromorphicNFOn_eq_toMeromorphicNFAt_on_nhd [CompleteSpace E] (hf : MeromorphicOn f U)
    (hx : x ‚àà U) :
    toMeromorphicNFOn f U =·∂†[ùìù x] toMeromorphicNFAt f x := by
  apply eventuallyEq_nhds_of_eventuallyEq_nhdsNE
  exact (hf.toMeromorphicNFOn_eq_self_on_nhdNE hx).symm.trans (hf x hx).eq_nhdNE_toMeromorphicNFAt
  simp [toMeromorphicNFOn, hf, hx]

/--
If `f` is meromorphic on `U` and `x ‚àà U`, then conversion to normal form at `x`
and conversion to normal form on `U` agree at `x`.
-/
theorem toMeromorphicNFOn_eq_toMeromorphicNFAt [CompleteSpace E] (hf : MeromorphicOn f U)
    (hx : x ‚àà U) :
    toMeromorphicNFOn f U x = toMeromorphicNFAt f x x := by
  apply Filter.EventuallyEq.eq_of_nhds (g := toMeromorphicNFAt f x)
  simp [(toMeromorphicNFOn_eq_toMeromorphicNFAt_on_nhd hf hx).trans]

variable (f U) in
/--
After conversion to normal form on `U`, the function has normal form.
-/
theorem meromorphicNFOn_toMeromorphicNFOn [CompleteSpace E] :
    MeromorphicNFOn (toMeromorphicNFOn f U) U := by
  by_cases hf : MeromorphicOn f U
  ¬∑ intro z hz
    rw [meromorphicNFAt_congr (toMeromorphicNFOn_eq_toMeromorphicNFAt_on_nhd hf hz)]
    exact meromorphicNFAt_toMeromorphicNFAt
  ¬∑ simp [hf]
    apply AnalyticOnNhd.meromorphicNFOn
    exact analyticOnNhd_const

/--
If `f` has normal form on `U`, then `f` equals `toMeromorphicNFOn f U`.
-/
@[simp] theorem toMeromorphicNFOn_eq_self [CompleteSpace E] :
    MeromorphicNFOn f U ‚Üî f = toMeromorphicNFOn f U := by
  constructor <;> intro h
  ¬∑ ext x
    by_cases hx : x ‚àà U
    ¬∑ simp only [toMeromorphicNFOn, h.meromorphicOn, ‚ÜìreduceDIte, hx]
      rw [‚Üê toMeromorphicNFAt_eq_self.1 (h x hx)]
    ¬∑ simp [toMeromorphicNFOn, h.meromorphicOn, hx]
  ¬∑ rw [h]
    apply meromorphicNFOn_toMeromorphicNFOn


/- ######################################################## -/

theorem toMeromorphicNFOn_changeOrder [CompleteSpace E]
  {f : ùïú ‚Üí E}
  {U : Set ùïú}
  {z‚ÇÄ : ùïú}
  (hf : MeromorphicOn f U)
  (hz‚ÇÄ : z‚ÇÄ ‚àà U) :
  ((meromorphicNFOn_toMeromorphicNFOn f U) z‚ÇÄ hz‚ÇÄ).meromorphicAt.order = (hf z‚ÇÄ hz‚ÇÄ).order := by
  apply MeromorphicAt.order_congr
  exact (hf.toMeromorphicNFOn_eq_self_on_nhdNE hz‚ÇÄ).symm


theorem MeromorphicOn.divisor_of_toMeromorphicNFOn [CompleteSpace E]
  {f : ùïú ‚Üí E}
  {U : Set ùïú}
  (hf : MeromorphicOn f U) :
  divisor f U = divisor (toMeromorphicNFOn f U) U := by
  ext z
  by_cases hz : z ‚àà U <;> simp [hf, (meromorphicNFOn_toMeromorphicNFOn f U).meromorphicOn, hz]
  ¬∑ congr 1
    apply MeromorphicAt.order_congr
    exact toMeromorphicNFOn_eq_self_on_nhdNE hf hz
