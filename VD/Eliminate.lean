import Mathlib.Analysis.SpecialFunctions.Log.NegMulLog
import VD.ToMathlib.FactorizedRational
import VD.ToMathlib.Congruence_Divisor
-- -----------------

/--
Any set is codiscrete within itself.
-/
theorem Filter.codiscreteWithin_self {X : Type*} [TopologicalSpace X] (U : Set X) :
    U ‚àà Filter.codiscreteWithin U := by simp [mem_codiscreteWithin]

-- -----------------

/--
If `X` is a `T1Space`, then functions with locally finite support within `U`
have discrete support within `U`.
-/
theorem Function.locallyFinsuppWithin.supportDiscreteWithinDomain
    {X : Type*} [TopologicalSpace X] [T1Space X] (U : Set X)
    {Y : Type*} [Zero Y]
    (f : Function.locallyFinsuppWithin U Y) :
    f =·∂†[Filter.codiscreteWithin U] 0 := by
  apply codiscreteWithin_iff_locallyFiniteComplementWithin.2
  have : f.support = (U \ {x | f x = (0 : X ‚Üí Y) x}) := by
    ext x
    simp only [mem_support, ne_eq, Pi.zero_apply, Set.mem_diff, Set.mem_setOf_eq, iff_and_self]
    exact (support_subset_iff.1 f.supportWithinDomain) x
  rw [‚Üê this]
  exact f.supportLocallyFiniteWithinDomain

-- -----------------

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {U : Set ùïú}
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] [CompleteSpace E]

open Filter Real

/-!
## Extration of Zeros and Poles
-/

/--
If `f` is meromorphic on an open set `U`, if `f` is nowhere locally constant
zero, and if the support of the divisor of `f` is finite, then there exists an
analytic function `g` on `U` without zeros such that `f` is equivalent, modulo
equality on a codiscrete set, to the product of `g` and the factorized rational
function associated with the divisor of `f.
-/
theorem MeromorphicOn.extract_zeros_poles [CompleteSpace ùïú] {f : ùïú ‚Üí E}
    (h‚ÇÅf : MeromorphicOn f U) (h‚ÇÇf : ‚àÄ u : U, (h‚ÇÅf u u.2).order ‚â† ‚ä§)
    (h‚ÇÉf : (divisor f U).support.Finite) :
    ‚àÉ g : ùïú ‚Üí E, AnalyticOnNhd ùïú g U ‚àß (‚àÄ u : U, g u ‚â† 0) ‚àß
      f =·∂†[codiscreteWithin U] (‚àè·∂† u, (¬∑ - u) ^ divisor f U u) ‚Ä¢ g := by
  -- Take `g` as the inverse of the Laurent polynomial defined below, converted
  -- to a meromorphic function in normal form. Then check all the properties.
  let œÜ := ‚àè·∂† u, (¬∑ - u) ^ (divisor f U u)
  have hœÜ : MeromorphicOn œÜ U := (Function.FactorizedRational.meromorphicNFOn (divisor f U) U).meromorphicOn
  let g := toMeromorphicNFOn (œÜ‚Åª¬π ‚Ä¢ f) U
  have hg : MeromorphicNFOn g U := by apply meromorphicNFOn_toMeromorphicNFOn
  refine ‚ü®g, ?_, ?_, ?_‚ü©
  ¬∑ -- AnalyticOnNhd ùïú g U
    rw [‚Üê hg.divisor_nonneg_iff_analyticOnNhd, divisor_of_toMeromorphicNFOn (hœÜ.inv.smul h‚ÇÅf),
      divisor_smul hœÜ.inv h‚ÇÅf _ (fun z hz ‚Ü¶ h‚ÇÇf ‚ü®z, hz‚ü©), divisor_inv,
      Function.FactorizedRational.divisor _ h‚ÇÉf, neg_add_cancel]
    intro z hz
    simp [(hœÜ z hz).order_inv, Function.FactorizedRational.order_ne_top (divisor f U)]
  ¬∑ -- ‚àÄ (u : ‚ÜëU), g ‚Üëu ‚â† 0
    intro ‚ü®u, hu‚ü©
    rw [‚Üê (hg hu).order_eq_zero_iff, ‚Üê ((hœÜ.inv.smul h‚ÇÅf) u hu).order_congr
      (toMeromorphicNFOn_eq_self_on_nhdNE (hœÜ.inv.smul h‚ÇÅf) hu).symm]
    rw [(hœÜ u hu).inv.order_smul (h‚ÇÅf u hu), (hœÜ u hu).order_inv, Function.FactorizedRational.order _ h‚ÇÉf]
    simp only [Pi.neg_apply, h‚ÇÅf, hu, divisor_apply, WithTop.LinearOrderedAddCommGroup.coe_neg]
    lift (h‚ÇÅf u hu).order to ‚Ñ§ using (h‚ÇÇf ‚ü®u, hu‚ü©) with n hn
    rw [WithTop.untop‚ÇÄ_coe, (by rfl : -‚Üë(n : WithTop ‚Ñ§) = (‚Üë(-n) : WithTop ‚Ñ§)), ‚Üê WithTop.coe_add]
    simp
  ¬∑ -- f =·∂†[codiscreteWithin U] (‚àè·∂† (u : ùïú), fun z ‚Ü¶ (z - u) ^ (divisor f U) u) * g
    filter_upwards [(divisor f U).supportDiscreteWithinDomain,
      (hœÜ.inv.smul h‚ÇÅf).meromorphicNFAt_mem_codiscreteWithin,
      codiscreteWithin_self U] with a h‚ÇÇa h‚ÇÉa h‚ÇÑa
    unfold g
    simp only [Pi.smul_apply', toMeromorphicNFOn_eq_toMeromorphicNFAt (hœÜ.inv.smul h‚ÇÅf) h‚ÇÑa,
      toMeromorphicNFAt_eq_self.2 h‚ÇÉa, Pi.inv_apply]
    rw [‚Üê smul_assoc, smul_eq_mul, mul_inv_cancel‚ÇÄ _, one_smul]
    rwa [‚Üê ((Function.FactorizedRational.meromorphicNFOn_univ (divisor f U)) trivial).order_eq_zero_iff,
      Function.FactorizedRational.order, h‚ÇÇa, Pi.zero_apply, WithTop.coe_zero]

/--
If `f` is meromorphic on a set `U`, if `f` is nowhere locally constant zero, and
if the support of the divisor of `f` is finite, then there exists an analytic
function `g` on `U` without zeros such that `log ‚Äñf‚Äñ` is equivalent, modulo
equality on codiscrete subsets of `U` to `‚àë·∂† u, (divisor f U u * log ‚Äñ¬∑ - u‚Äñ) +
log ‚Äñg ¬∑‚Äñ`.
-/
theorem MeromorphicOn.extract_zeros_poles_log [CompleteSpace ùïú] {f : ùïú ‚Üí E}
    (h‚ÇÅf : MeromorphicOn f U) (h‚ÇÇf : ‚àÄ u : U, (h‚ÇÅf u u.2).order ‚â† ‚ä§)
    (h‚ÇÉf : (divisor f U).support.Finite) :
    ‚àÉ g : ùïú ‚Üí E, AnalyticOnNhd ùïú g U ‚àß (‚àÄ u : U, g u ‚â† 0) ‚àß
      (log ‚Äñf ¬∑‚Äñ) =·∂†[codiscreteWithin U] ‚àë·∂† u, (divisor f U u * log ‚Äñ¬∑ - u‚Äñ) + (log ‚Äñg ¬∑‚Äñ) := by
  obtain ‚ü®g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅf.extract_zeros_poles h‚ÇÇf h‚ÇÉf
  use g, h‚ÇÅg, h‚ÇÇg
  filter_upwards [h‚ÇÉg, (divisor f U).supportDiscreteWithinDomain,
    codiscreteWithin_self U] with z hz h‚ÇÇz h‚ÇÉz
  -- Identify finprod with prod over h‚ÇÉf.toFinset
  have : (fun u ‚Ü¶ (¬∑ - u) ^ (divisor f U) u).mulSupport ‚äÜ h‚ÇÉf.toFinset := by
    intro u hu
    by_contra hCon
    simp_all only [ne_eq, Subtype.forall, Pi.smul_apply', divisor_apply, Pi.zero_apply,
      WithTop.untopD_eq_self_iff, WithTop.coe_zero, or_false, Function.mem_mulSupport,
      Set.Finite.coe_toFinset, Function.mem_support, Decidable.not_not, zpow_zero]
    tauto
  rw [hz, finprod_eq_prod_of_mulSupport_subset _ this]
  -- Identify finsum with sum over h‚ÇÉf.toFinset
  have : (Function.support fun u ‚Ü¶ (divisor f U u * log ‚Äñ¬∑ - u‚Äñ)) ‚äÜ h‚ÇÉf.toFinset := by
    intro u hu
    simp_all only [ne_eq, Subtype.forall, Pi.smul_apply', divisor_apply, Pi.zero_apply,
      WithTop.untop‚ÇÄ_eq_zero, or_false, Set.Finite.coe_toFinset, Function.mulSupport_subset_iff,
      Function.mem_support]
    by_contra hCon
    simp_all only [Int.cast_zero, zero_mul]
    tauto
  rw [finsum_eq_sum_of_support_subset _ this]
  -- Decompose LHS of the equation
  have : ‚àÄ x ‚àà h‚ÇÉf.toFinset, ‚Äñz - x‚Äñ ^ (divisor f U) x ‚â† 0 := by
    intro x hx
    rw [Set.Finite.mem_toFinset, Function.mem_support, ne_eq] at hx
    rw [ne_eq, zpow_eq_zero_iff hx, norm_eq_zero]
    by_contra hCon
    rw [sub_eq_zero] at hCon
    rw [hCon] at h‚ÇÇz
    tauto
  simp only [Pi.smul_apply', Finset.prod_apply, Pi.pow_apply, norm_smul, norm_prod, norm_zpow]
  rw [log_mul (Finset.prod_ne_zero_iff.2 this) (by simp [h‚ÇÇg ‚ü®z, h‚ÇÉz‚ü©]), log_prod _ _ this]
  simp [log_zpow]
