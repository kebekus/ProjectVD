import Mathlib.Analysis.Calculus.FDeriv.Congr
import Mathlib.Analysis.Calculus.IteratedDeriv.Defs
import VD.Harmonic

variable
  {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [NormedSpace ‚ÑÇ E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F] [IsScalarTower ‚Ñù ‚ÑÇ F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  {f f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí F}
  {s t : Set E} {c : ‚Ñù}

open Topology

variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]

theorem fxx {n : ‚Ñï} {x : E}
    {f : E ‚Üí (ContinuousMultilinearMap ‚ÑÇ (fun i : Fin n ‚Ü¶ E) F)}
    (h : DifferentiableAt ‚ÑÇ f x) :
    (fderiv ‚Ñù ((ContinuousMultilinearMap.restrictScalarsLinear ‚Ñù) ‚àò f) x)
      = (ContinuousMultilinearMap.restrictScalars ‚Ñù) ‚àò ((fderiv ‚ÑÇ f x).restrictScalars ‚Ñù) := by
  rw [fderiv_comp]
  rw [ContinuousLinearMap.fderiv]
  simp
  ext a b
  simp
  have := h.fderiv_restrictScalars ‚Ñù
  rw [this]
  simp
  fun_prop
  exact h.restrictScalars ‚Ñù


theorem ContDiffAt.differentiableAt_iteratedDeriv
    {ùïú : Type u_1} [NontriviallyNormedField ùïú] {F : Type u_2} [NormedAddCommGroup F] [NormedSpace ùïú F]
    {f : ùïú ‚Üí F} {x : ùïú} {n : WithTop ‚Ñï‚àû} {m : ‚Ñï}
    (h : ContDiffAt ùïú n f x) (hmn : m < n) :
    DifferentiableAt ùïú (iteratedFDeriv ùïú m f) x := by
  apply ContDiffAt.differentiableAt (n := 1)
  apply h.iteratedFDeriv_right (i := m) (m := 1)
  ¬∑ refine add_le_of_le_tsub_left_of_le ?_ ?_
    ¬∑ sorry
    ¬∑ sorry
  ¬∑ rfl

theorem ContDiffAt.iteratedFDeriv_restrictScalars {f : E ‚Üí F} {n : ‚Ñï} {z : E}
    (h : ContDiffAt ‚ÑÇ n f z) :
    (ContinuousMultilinearMap.restrictScalarsLinear ‚Ñù) ‚àò (iteratedFDeriv ‚ÑÇ n f) =·∂†[ùìù z]
      (iteratedFDeriv ‚Ñù n f) := by
  induction n with
  | zero =>
    filter_upwards with a
    ext m
    simp [iteratedFDeriv_zero_apply m]
  | succ n hn =>
    have : ContDiffAt ‚ÑÇ n f z := by
      apply h.of_le
      apply Nat.cast_le.mpr
      exact Nat.le_add_right n 1
    have t‚ÇÄ := hn this
    have t‚ÇÅ := this.eventually
    simp at t‚ÇÅ
    filter_upwards [t‚ÇÄ.eventually_nhds, t‚ÇÅ.eventually_nhds] with a h‚ÇÅa h‚ÇÇa
    rw [‚Üê Filter.EventuallyEq] at h‚ÇÅa
    ext m
    simp [iteratedFDeriv_succ_apply_left]
    have := h‚ÇÅa.fderiv_eq (ùïú := ‚Ñù)
    rw [‚Üê this]
    rw [fxx]
    simp
    ¬∑ have := h.differentiableAt_iteratedDeriv (m := n)

      sorry


theorem ContDiffAt.harmonicAt  {f : ‚ÑÇ ‚Üí F} {x : ‚ÑÇ} (h : ContDiffAt ‚ÑÇ 2 f x) :
    HarmonicAt f x := by
  constructor
  ¬∑ exact ContDiffAt.restrict_scalars ‚Ñù h
  ¬∑ filter_upwards [h.iteratedFDeric_restrictScalars] with a ha
    rw [laplace_eq_iteratedFDeriv_complexPlane f]
    simp
    rw [‚Üê ha]
    simp

    sorry


theorem holomorphicAt_is_harmonicAt
  {f : ‚ÑÇ ‚Üí F}
  {z : ‚ÑÇ}
  (hf : HolomorphicAt f z) :
  HarmonicAt f z := by

  let t := {x | HolomorphicAt f x}
  have ht : IsOpen t := HolomorphicAt_isOpen f
  have hz : z ‚àà t := by exact hf

  constructor
  ¬∑ -- ContDiffAt ‚Ñù 2 f z
    exact hf.contDiffAt

  ¬∑ -- Œî f =·∂†[nhds z] 0
    apply Filter.eventuallyEq_iff_exists_mem.2
    use t
    constructor
    ¬∑ exact IsOpen.mem_nhds ht hz
    ¬∑ intro w hw
      unfold Complex.laplace
      simp
      rw [partialDeriv_eventuallyEq ‚Ñù hw.CauchyRiemannAt Complex.I]
      rw [partialDeriv_smul'‚ÇÇ]
      simp

      rw [partialDeriv_commAt hw.contDiffAt Complex.I 1]
      rw [partialDeriv_eventuallyEq ‚Ñù hw.CauchyRiemannAt 1]
      rw [partialDeriv_smul'‚ÇÇ]
      simp

      rw [‚Üê smul_assoc]
      simp


theorem re_of_holomorphicAt_is_harmonicAr
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h : HolomorphicAt f z) :
  HarmonicAt (Complex.reCLM ‚àò f) z := by
  apply harmonicAt_comp_CLM_is_harmonicAt
  exact holomorphicAt_is_harmonicAt h


theorem im_of_holomorphicAt_is_harmonicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h : HolomorphicAt f z) :
  HarmonicAt (Complex.imCLM ‚àò f) z := by
  apply harmonicAt_comp_CLM_is_harmonicAt
  exact holomorphicAt_is_harmonicAt h


theorem antiholomorphicAt_is_harmonicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h : HolomorphicAt f z) :
  HarmonicAt (Complex.conjCLE ‚àò f) z := by
  apply harmonicAt_iff_comp_CLE_is_harmonicAt.1
  exact holomorphicAt_is_harmonicAt h


theorem log_normSq_of_holomorphicAt_is_harmonicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h‚ÇÅf : HolomorphicAt f z)
  (h‚ÇÇf : f z ‚â† 0) :
  HarmonicAt (Real.log ‚àò Complex.normSq ‚àò f) z := by

  -- For later use
  have slitPlaneLemma {z : ‚ÑÇ} (hz : z ‚â† 0) : z ‚àà Complex.slitPlane ‚à® -z ‚àà Complex.slitPlane := by
    rw [Complex.mem_slitPlane_iff, Complex.mem_slitPlane_iff]
    simp at hz
    rw [Complex.ext_iff] at hz
    push_neg at hz
    simp at hz
    simp
    by_contra contra
    push_neg at contra
    exact hz (le_antisymm contra.1.1 contra.2.1) contra.1.2

  -- First prove the theorem for functions with image in the slitPlane
  have lem‚ÇÅ : ‚àÄ g : ‚ÑÇ ‚Üí ‚ÑÇ, (HolomorphicAt g z) ‚Üí (g z ‚â† 0) ‚Üí (g z ‚àà Complex.slitPlane) ‚Üí HarmonicAt (Real.log ‚àò Complex.normSq ‚àò g) z := by
    intro g h‚ÇÅg h‚ÇÇg h‚ÇÉg

    -- Rewrite the log |g|¬≤ as Complex.log (g * gc)
    suffices hyp : HarmonicAt (Complex.log ‚àò ((Complex.conjCLE ‚àò g) * g)) z from by
      have : Real.log ‚àò Complex.normSq ‚àò g = Complex.reCLM ‚àò Complex.ofRealCLM ‚àò Real.log ‚àò Complex.normSq ‚àò g := by
        funext x
        simp
      rw [this]

      have : Complex.ofRealCLM ‚àò Real.log ‚àò Complex.normSq ‚àò g = Complex.log ‚àò ((Complex.conjCLE ‚àò g) * g) := by
        funext x
        simp
        rw [Complex.ofReal_log]
        rw [Complex.normSq_eq_conj_mul_self]
        exact Complex.normSq_nonneg (g x)
      rw [‚Üê this] at hyp
      apply harmonicAt_comp_CLM_is_harmonicAt hyp

    -- Locally around z, rewrite Complex.log (g * gc) as Complex.log g + Complex.log.gc
    -- This uses the assumption that g z is in Complex.slitPlane
    have : (Complex.log ‚àò (Complex.conjCLE ‚àò g * g)) =·∂†[nhds z] (Complex.log ‚àò Complex.conjCLE ‚àò g + Complex.log ‚àò g) := by
      apply Filter.eventuallyEq_iff_exists_mem.2
      use g‚Åª¬π' (Complex.slitPlane ‚à© {0}·∂ú)
      constructor
      ¬∑ apply ContinuousAt.preimage_mem_nhds
        ¬∑ exact h‚ÇÅg.differentiableAt.continuousAt
        ¬∑ apply IsOpen.mem_nhds
          apply IsOpen.inter Complex.isOpen_slitPlane isOpen_ne
          constructor
          ¬∑ exact h‚ÇÉg
          ¬∑ exact h‚ÇÇg
      ¬∑ intro x hx
        simp
        rw [Complex.log_mul_eq_add_log_iff _ hx.2]
        rw [Complex.arg_conj]
        simp [Complex.slitPlane_arg_ne_pi hx.1]
        constructor
        ¬∑ exact Real.pi_pos
        ¬∑ exact Real.pi_nonneg
        simp
        apply hx.2

    -- Locally around z, rewrite Complex.log (g * gc) as Complex.log g + Complex.log.gc
    -- This uses the assumption that g z is in Complex.slitPlane
    have : (Complex.log ‚àò (Complex.conjCLE ‚àò g * g)) =·∂†[nhds z] (Complex.conjCLE ‚àò Complex.log ‚àò g + Complex.log ‚àò g) := by
      apply Filter.eventuallyEq_iff_exists_mem.2
      use g‚Åª¬π' (Complex.slitPlane ‚à© {0}·∂ú)
      constructor
      ¬∑ apply ContinuousAt.preimage_mem_nhds
        ¬∑ exact h‚ÇÅg.differentiableAt.continuousAt
        ¬∑ apply IsOpen.mem_nhds
          apply IsOpen.inter Complex.isOpen_slitPlane isOpen_ne
          constructor
          ¬∑ exact h‚ÇÉg
          ¬∑ exact h‚ÇÇg
      ¬∑ intro x hx
        simp
        rw [‚Üê Complex.log_conj]
        rw [Complex.log_mul_eq_add_log_iff _ hx.2]
        rw [Complex.arg_conj]
        simp [Complex.slitPlane_arg_ne_pi hx.1]
        constructor
        ¬∑ exact Real.pi_pos
        ¬∑ exact Real.pi_nonneg
        simp
        apply hx.2
        apply Complex.slitPlane_arg_ne_pi hx.1

    rw [HarmonicAt_eventuallyEq this]
    apply harmonicAt_add_harmonicAt_is_harmonicAt
    ¬∑ rw [‚Üê harmonicAt_iff_comp_CLE_is_harmonicAt]
      apply holomorphicAt_is_harmonicAt
      apply HolomorphicAt_comp
      use Complex.slitPlane, Complex.isOpen_slitPlane.mem_nhds h‚ÇÉg,
        fun _ a ‚Ü¶ Complex.differentiableAt_log a
      exact h‚ÇÅg
    ¬∑ apply holomorphicAt_is_harmonicAt
      apply HolomorphicAt_comp
      use Complex.slitPlane, Complex.isOpen_slitPlane.mem_nhds h‚ÇÉg,
        fun _ a ‚Ü¶ Complex.differentiableAt_log a
      exact h‚ÇÅg

  by_cases h‚ÇÉf : f z ‚àà Complex.slitPlane
  ¬∑ exact lem‚ÇÅ f h‚ÇÅf h‚ÇÇf h‚ÇÉf
  ¬∑ have : Complex.normSq ‚àò f = Complex.normSq ‚àò (-f) := by funext; simp
    rw [this]
    apply lem‚ÇÅ (-f)
    ¬∑ exact HolomorphicAt_neg h‚ÇÅf
    ¬∑ simpa
    ¬∑ exact (slitPlaneLemma h‚ÇÇf).resolve_left h‚ÇÉf


theorem logabs_of_holomorphicAt_is_harmonic
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h‚ÇÅf : HolomorphicAt f z)
  (h‚ÇÇf : f z ‚â† 0) :
  HarmonicAt (fun w ‚Ü¶ Real.log ‚Äñf w‚Äñ) z := by

  -- Suffices: Harmonic (2‚Åª¬π ‚Ä¢ Real.log ‚àò ‚áëComplex.normSq ‚àò f)
  have : (fun z ‚Ü¶ Real.log ‚Äñf z‚Äñ) = (2 : ‚Ñù)‚Åª¬π ‚Ä¢ (Real.log ‚àò Complex.normSq ‚àò f) := by
    funext z
    simp
    rw [Complex.norm_def]
    rw [Real.log_sqrt]
    linarith
    exact Complex.normSq_nonneg (f z)
  rw [this]

  -- Suffices: Harmonic (Real.log ‚àò ‚áëComplex.normSq ‚àò f)
  apply (harmonicAt_iff_smul_const_is_harmonicAt (inv_ne_zero two_ne_zero)).1
  exact log_normSq_of_holomorphicAt_is_harmonicAt h‚ÇÅf h‚ÇÇf
