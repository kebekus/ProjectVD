/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import VD.Harmonic
import VD.ToMathlib.restrictScalars
import Mathlib.Analysis.Complex.CauchyIntegral
import Mathlib.Analysis.SpecialFunctions.Complex.Analytic

/-!
# Construction of Harmonic Functions

This file constructs examples of harmonic functions.

- If `f` is holomorphic on the complex plane, then `f` is holomorphic, and so is
  its real part, imaginary part, and complex conjugate.

- If `f` is holomorphic without zero, then `log ‚Äñf ¬∑‚Äñ` is harmonic.
-/

open Complex Topology

variable
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]
  {f : ‚ÑÇ ‚Üí F} {x : ‚ÑÇ}

/-!
## Harmonicity of Analytic Functions
-/

/--
Continuously complex-differentiable functions on ‚ÑÇ are harmonic.
-/
theorem ContDiffAt.harmonicAt (h : ContDiffAt ‚ÑÇ 2 f x) : HarmonicAt f x := by
  constructor
  ¬∑ exact h.restrict_scalars ‚Ñù
  ¬∑ filter_upwards [h.iteratedFDeriv_restrictScalars_eventuallyEq (ùïú := ‚Ñù)] with a ha
    have : (iteratedFDeriv ‚ÑÇ 2 f a) (I ‚Ä¢ ![1, 1])
        = (‚àè i, I) ‚Ä¢ ((iteratedFDeriv ‚ÑÇ 2 f a) ![1, 1]) :=
      (iteratedFDeriv ‚ÑÇ 2 f a).map_smul_univ (fun _ ‚Ü¶ I) ![1, 1]
    simp_all [laplace_eq_iteratedFDeriv_complexPlane f, ‚Üê ha,
      ContinuousMultilinearMap.restrictScalarsLinear_apply,
      ContinuousMultilinearMap.coe_restrictScalars]

/--
Analytic functions on ‚ÑÇ are harmonic.
-/
theorem AnalyticAt.harmonicAt [CompleteSpace F] (h : AnalyticAt ‚ÑÇ f x) :
    HarmonicAt f x := h.contDiffAt.harmonicAt

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is complex-analytic, then its real part is harmonic.
-/
theorem ContDiffAt.harmonicAt_realPart {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : AnalyticAt ‚ÑÇ f x) :
    HarmonicAt (reCLM ‚àò f) x := h.harmonicAt.comp_CLM

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is complex-analytic, then its imaginary part is harmonic.
-/
theorem ContDiffAt.harmonicAt_imaginaryPart {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : AnalyticAt ‚ÑÇ f x) :
  HarmonicAt (imCLM ‚àò f) x := h.harmonicAt.comp_CLM

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is complex-analytic, then its complex conjugate is harmonic.
-/
theorem ContDiffAt.harmonicAt_conjugate {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : AnalyticAt ‚ÑÇ f x) :
  HarmonicAt (conjCLE ‚àò f) x := harmonicAt_iff_harmonicAt_comp_CLE.1 h.harmonicAt

/-!
## Harmonicity of `log ‚Äñanalytic‚Äñ`
-/

/- Helper lemma for -/
private lemma slitPlaneLemma {z : ‚ÑÇ} (hz : z ‚â† 0) : z ‚àà slitPlane ‚à® -z ‚àà slitPlane := by
  rw [mem_slitPlane_iff, mem_slitPlane_iff]
  rw [ne_eq, Complex.ext_iff] at hz
  push_neg at hz
  simp_all only [ne_eq, zero_re, zero_im, neg_re, Left.neg_pos_iff, neg_im, neg_eq_zero]
  by_contra contra
  push_neg at contra
  exact hz (le_antisymm contra.1.1 contra.2.1) contra.1.2

private lemma lem‚ÇÅ {z : ‚ÑÇ} {g : ‚ÑÇ ‚Üí ‚ÑÇ} (h‚ÇÅg : AnalyticAt ‚ÑÇ g z) (h‚ÇÇg : g z ‚â† 0) (h‚ÇÉg : g z ‚àà slitPlane) :
    HarmonicAt (Real.log ‚àò normSq ‚àò g) z := by

  -- Rewrite the log |g|¬≤ as Complex.log (g * gc)
  suffices hyp : HarmonicAt (log ‚àò ((conjCLE ‚àò g) * g)) z from by
    have : Real.log ‚àò normSq ‚àò g = reCLM ‚àò ofRealCLM ‚àò Real.log ‚àò normSq ‚àò g := by aesop
    rw [this]
    have : ofRealCLM ‚àò Real.log ‚àò normSq ‚àò g = log ‚àò ((conjCLE ‚àò g) * g) := by
      funext x
      simp only [Function.comp_apply, ofRealCLM_apply, Pi.mul_apply, conjCLE_apply]
      rw [ofReal_log, normSq_eq_conj_mul_self]
      exact normSq_nonneg (g x)
    rw [‚Üê this] at hyp
    apply hyp.comp_CLM

  have t‚ÇÄ : g ‚Åª¬π' (slitPlane ‚à© {0}·∂ú) ‚àà ùìù z := by
    apply h‚ÇÅg.differentiableAt.continuousAt.preimage_mem_nhds
    exact (isOpen_slitPlane.inter isOpen_ne).mem_nhds ‚ü®h‚ÇÉg, h‚ÇÇg‚ü©

  -- Locally around z, rewrite Complex.log (g * gc) as Complex.log g + Complex.log.gc
  -- This uses the assumption that g z is in Complex.slitPlane
  have : (log ‚àò (conjCLE ‚àò g * g)) =·∂†[ùìù z] (log ‚àò conjCLE ‚àò g + log ‚àò g) := by
    filter_upwards [t‚ÇÄ] with x hx
    simp only [Function.comp_apply, Pi.mul_apply, conjCLE_apply, Pi.add_apply]
    rw [Complex.log_mul_eq_add_log_iff _ hx.2, Complex.arg_conj]
    simp only [Complex.slitPlane_arg_ne_pi hx.1, ‚ÜìreduceIte, neg_add_cancel, Set.mem_Ioc,
      Left.neg_neg_iff, Real.pi_pos, Real.pi_nonneg, and_self]
    simpa [ne_eq, map_eq_zero] using hx.2

  -- Locally around z, rewrite Complex.log (g * gc) as Complex.log g + Complex.log.gc
  -- This uses the assumption that g z is in Complex.slitPlane
  have : (log ‚àò (conjCLE ‚àò g * g)) =·∂†[ùìù z] (conjCLE ‚àò log ‚àò g + log ‚àò g) := by
    apply Filter.eventuallyEq_iff_exists_mem.2
    use g‚Åª¬π' (Complex.slitPlane ‚à© {0}·∂ú), t‚ÇÄ
    ¬∑ intro x hx
      simp
      rw [‚Üê Complex.log_conj]
      rw [Complex.log_mul_eq_add_log_iff _ hx.2]
      rw [Complex.arg_conj]
      simp [Complex.slitPlane_arg_ne_pi hx.1]
      constructor
      ¬∑ exact Real.pi_pos
      ¬∑ exact Real.pi_nonneg
      simp
      apply hx.2
      apply Complex.slitPlane_arg_ne_pi hx.1

  rw [harmonicAt_congr_nhds this]
  apply HarmonicAt.add
  ¬∑ rw [‚Üê harmonicAt_iff_harmonicAt_comp_CLE]
    apply AnalyticAt.harmonicAt
    apply AnalyticAt.comp
    ¬∑ apply analyticAt_clog h‚ÇÉg
    ¬∑ exact h‚ÇÅg
  ¬∑ apply AnalyticAt.harmonicAt
    apply AnalyticAt.comp
    ¬∑ apply analyticAt_clog h‚ÇÉg
    ¬∑ exact h‚ÇÅg

theorem log_normSq_of_holomorphicAt_is_harmonicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h‚ÇÅf : AnalyticAt ‚ÑÇ f z)
  (h‚ÇÇf : f z ‚â† 0) :
  HarmonicAt (Real.log ‚àò Complex.normSq ‚àò f) z := by


  -- First prove the theorem for functions with image in the slitPlane

  by_cases h‚ÇÉf : f z ‚àà Complex.slitPlane
  ¬∑ exact lem‚ÇÅ h‚ÇÅf h‚ÇÇf h‚ÇÉf
  ¬∑ have : Complex.normSq ‚àò f = Complex.normSq ‚àò (-f) := by funext; simp
    rw [this]
    apply lem‚ÇÅ h‚ÇÅf.neg
    ¬∑ simpa
    ¬∑ exact (slitPlaneLemma h‚ÇÇf).resolve_left h‚ÇÉf


theorem logabs_of_holomorphicAt_is_harmonic
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h‚ÇÅf : AnalyticAt ‚ÑÇ f z)
  (h‚ÇÇf : f z ‚â† 0) :
  HarmonicAt (fun w ‚Ü¶ Real.log ‚Äñf w‚Äñ) z := by

  -- Suffices: Harmonic (2‚Åª¬π ‚Ä¢ Real.log ‚àò ‚áëComplex.normSq ‚àò f)
  have : (fun z ‚Ü¶ Real.log ‚Äñf z‚Äñ) = (2 : ‚Ñù)‚Åª¬π ‚Ä¢ (Real.log ‚àò Complex.normSq ‚àò f) := by
    funext z
    simp
    rw [Complex.norm_def]
    rw [Real.log_sqrt]
    linarith
    exact Complex.normSq_nonneg (f z)
  rw [this]

  -- Suffices: Harmonic (Real.log ‚àò ‚áëComplex.normSq ‚àò f)
  apply (harmonicAt_iff_smul_const_is_harmonicAt (inv_ne_zero two_ne_zero)).1
  exact log_normSq_of_holomorphicAt_is_harmonicAt h‚ÇÅf h‚ÇÇf
