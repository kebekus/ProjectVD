import VD.Harmonic
import VD.ToMathlib.restrictScalars

variable
  {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [NormedSpace ‚ÑÇ E]
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F] [IsScalarTower ‚Ñù ‚ÑÇ F]
  {G : Type*} [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
  {f f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí F}
  {s t : Set E} {c : ‚Ñù}

open Topology

variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]

theorem ContDiffAt.harmonicAt  {f : ‚ÑÇ ‚Üí F} {x : ‚ÑÇ} (h : ContDiffAt ‚ÑÇ 2 f x) :
    HarmonicAt f x := by
  constructor
  ¬∑ exact ContDiffAt.restrict_scalars ‚Ñù h
  ¬∑ filter_upwards [h.iteratedFDeriv_restrictScalars_eventuallyEq (ùïú := ‚Ñù)] with a ha
    simp only [laplace_eq_iteratedFDeriv_complexPlane f, ‚Üê ha,
      ContinuousMultilinearMap.restrictScalarsLinear_apply, Function.comp_apply,
      ContinuousMultilinearMap.coe_restrictScalars, Pi.ofNat_apply]
    rw [iteratedFDeriv_two_apply]
    rw [iteratedFDeriv_two_apply]
    simp only [Matrix.cons_val_zero, Matrix.cons_val_one]
    simp only [fderiv_eq_smul_deriv, one_smul, ContinuousLinearMap.coe_smul', Pi.smul_apply]
    sorry
