/-
Copyright (c) 2025 Stefan Kebekus. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stefan Kebekus
-/
import VD.Harmonic
import VD.ToMathlib.restrictScalars
import Mathlib.Analysis.Complex.CauchyIntegral

/-!
# Construction of Harmonic Functions

This file constructs examples of harmonic functions.

- If `f` is holomorphic on the complex plane, then `f` is holomorphic, and so is
  its real part, imaginary part, and complex conjugate.

- If `f` is holomorphic without zero, then `log ‚Äñf ¬∑ ‚Äñ` is harmonic.
-/

open Topology

variable
  {F : Type*} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]
  {f : ‚ÑÇ ‚Üí F} {x : ‚ÑÇ}

/--
Holomorphic functions on ‚ÑÇ are harmonic.
-/
theorem ContDiffAt.harmonicAt (h : ContDiffAt ‚ÑÇ 2 f x) :
    HarmonicAt f x := by
  constructor
  ¬∑ exact ContDiffAt.restrict_scalars ‚Ñù h
  ¬∑ filter_upwards [h.iteratedFDeriv_restrictScalars_eventuallyEq (ùïú := ‚Ñù)] with a ha
    have : (iteratedFDeriv ‚ÑÇ 2 f a) (Complex.I ‚Ä¢ ![1, 1])
        = (‚àè i, Complex.I) ‚Ä¢ ((iteratedFDeriv ‚ÑÇ 2 f a) ![1, 1]) :=
      (iteratedFDeriv ‚ÑÇ 2 f a).map_smul_univ (fun _ ‚Ü¶ Complex.I) ![1, 1]
    simp_all [laplace_eq_iteratedFDeriv_complexPlane f, ‚Üê ha,
      ContinuousMultilinearMap.restrictScalarsLinear_apply,
      ContinuousMultilinearMap.coe_restrictScalars]

/--
Holomorphic functions on ‚ÑÇ are harmonic.
-/
theorem AnalyticAt.harmonicAt [CompleteSpace F] (h : AnalyticAt ‚ÑÇ f x) :
    HarmonicAt f x := h.contDiffAt.harmonicAt

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is holomorphic, then its real part is harmonic.
-/
theorem ContDiffAt.harmonicAt_realPart {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : ContDiffAt ‚ÑÇ 2 f x) :
  HarmonicAt (Complex.reCLM ‚àò f) x := h.harmonicAt.comp_CLM

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is holomorphic, then its imaginary part is harmonic.
-/
theorem ContDiffAt.harmonicAt_imaginaryPart {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : ContDiffAt ‚ÑÇ 2 f x) :
  HarmonicAt (Complex.imCLM ‚àò f) x := h.harmonicAt.comp_CLM

/--
If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is holomorphic, then its complex conjugate is harmonic.
-/
theorem ContDiffAt.harmonicAt_conjugate {f : ‚ÑÇ ‚Üí ‚ÑÇ} (h : ContDiffAt ‚ÑÇ 2 f x) :
  HarmonicAt (Complex.conjCLE ‚àò f) x := harmonicAt_iff_harmonicAt_comp_CLE.1 h.harmonicAt


theorem log_normSq_of_holomorphicAt_is_harmonicAt
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h‚ÇÅf : HolomorphicAt f z)
  (h‚ÇÇf : f z ‚â† 0) :
  HarmonicAt (Real.log ‚àò Complex.normSq ‚àò f) z := by

  -- For later use
  have slitPlaneLemma {z : ‚ÑÇ} (hz : z ‚â† 0) : z ‚àà Complex.slitPlane ‚à® -z ‚àà Complex.slitPlane := by
    rw [Complex.mem_slitPlane_iff, Complex.mem_slitPlane_iff]
    rw [ne_eq, Complex.ext_iff] at hz
    push_neg at hz
    simp_all only [ne_eq, Complex.zero_re, Complex.zero_im, Complex.neg_re, Left.neg_pos_iff,
      Complex.neg_im, neg_eq_zero]
    by_contra contra
    push_neg at contra
    exact hz (le_antisymm contra.1.1 contra.2.1) contra.1.2

  -- First prove the theorem for functions with image in the slitPlane
  have lem‚ÇÅ : ‚àÄ g : ‚ÑÇ ‚Üí ‚ÑÇ, (HolomorphicAt g z) ‚Üí (g z ‚â† 0) ‚Üí (g z ‚àà Complex.slitPlane) ‚Üí HarmonicAt (Real.log ‚àò Complex.normSq ‚àò g) z := by
    intro g h‚ÇÅg h‚ÇÇg h‚ÇÉg

    -- Rewrite the log |g|¬≤ as Complex.log (g * gc)
    suffices hyp : HarmonicAt (Complex.log ‚àò ((Complex.conjCLE ‚àò g) * g)) z from by
      have : Real.log ‚àò Complex.normSq ‚àò g = Complex.reCLM ‚àò Complex.ofRealCLM ‚àò Real.log ‚àò Complex.normSq ‚àò g := by
        funext x
        simp
      rw [this]

      have : Complex.ofRealCLM ‚àò Real.log ‚àò Complex.normSq ‚àò g = Complex.log ‚àò ((Complex.conjCLE ‚àò g) * g) := by
        funext x
        simp
        rw [Complex.ofReal_log]
        rw [Complex.normSq_eq_conj_mul_self]
        exact Complex.normSq_nonneg (g x)
      rw [‚Üê this] at hyp
      apply harmonicAt_comp_CLM_is_harmonicAt hyp

    -- Locally around z, rewrite Complex.log (g * gc) as Complex.log g + Complex.log.gc
    -- This uses the assumption that g z is in Complex.slitPlane
    have : (Complex.log ‚àò (Complex.conjCLE ‚àò g * g)) =·∂†[nhds z] (Complex.log ‚àò Complex.conjCLE ‚àò g + Complex.log ‚àò g) := by
      apply Filter.eventuallyEq_iff_exists_mem.2
      use g‚Åª¬π' (Complex.slitPlane ‚à© {0}·∂ú)
      constructor
      ¬∑ apply ContinuousAt.preimage_mem_nhds
        ¬∑ exact h‚ÇÅg.differentiableAt.continuousAt
        ¬∑ apply IsOpen.mem_nhds
          apply IsOpen.inter Complex.isOpen_slitPlane isOpen_ne
          constructor
          ¬∑ exact h‚ÇÉg
          ¬∑ exact h‚ÇÇg
      ¬∑ intro x hx
        simp
        rw [Complex.log_mul_eq_add_log_iff _ hx.2]
        rw [Complex.arg_conj]
        simp [Complex.slitPlane_arg_ne_pi hx.1]
        constructor
        ¬∑ exact Real.pi_pos
        ¬∑ exact Real.pi_nonneg
        simp
        apply hx.2

    -- Locally around z, rewrite Complex.log (g * gc) as Complex.log g + Complex.log.gc
    -- This uses the assumption that g z is in Complex.slitPlane
    have : (Complex.log ‚àò (Complex.conjCLE ‚àò g * g)) =·∂†[nhds z] (Complex.conjCLE ‚àò Complex.log ‚àò g + Complex.log ‚àò g) := by
      apply Filter.eventuallyEq_iff_exists_mem.2
      use g‚Åª¬π' (Complex.slitPlane ‚à© {0}·∂ú)
      constructor
      ¬∑ apply ContinuousAt.preimage_mem_nhds
        ¬∑ exact h‚ÇÅg.differentiableAt.continuousAt
        ¬∑ apply IsOpen.mem_nhds
          apply IsOpen.inter Complex.isOpen_slitPlane isOpen_ne
          constructor
          ¬∑ exact h‚ÇÉg
          ¬∑ exact h‚ÇÇg
      ¬∑ intro x hx
        simp
        rw [‚Üê Complex.log_conj]
        rw [Complex.log_mul_eq_add_log_iff _ hx.2]
        rw [Complex.arg_conj]
        simp [Complex.slitPlane_arg_ne_pi hx.1]
        constructor
        ¬∑ exact Real.pi_pos
        ¬∑ exact Real.pi_nonneg
        simp
        apply hx.2
        apply Complex.slitPlane_arg_ne_pi hx.1

    rw [HarmonicAt_eventuallyEq this]
    apply harmonicAt_add_harmonicAt_is_harmonicAt
    ¬∑ rw [‚Üê harmonicAt_iff_comp_CLE_is_harmonicAt]
      apply holomorphicAt_is_harmonicAt
      apply HolomorphicAt_comp
      use Complex.slitPlane, Complex.isOpen_slitPlane.mem_nhds h‚ÇÉg,
        fun _ a ‚Ü¶ Complex.differentiableAt_log a
      exact h‚ÇÅg
    ¬∑ apply holomorphicAt_is_harmonicAt
      apply HolomorphicAt_comp
      use Complex.slitPlane, Complex.isOpen_slitPlane.mem_nhds h‚ÇÉg,
        fun _ a ‚Ü¶ Complex.differentiableAt_log a
      exact h‚ÇÅg

  by_cases h‚ÇÉf : f z ‚àà Complex.slitPlane
  ¬∑ exact lem‚ÇÅ f h‚ÇÅf h‚ÇÇf h‚ÇÉf
  ¬∑ have : Complex.normSq ‚àò f = Complex.normSq ‚àò (-f) := by funext; simp
    rw [this]
    apply lem‚ÇÅ (-f)
    ¬∑ exact HolomorphicAt_neg h‚ÇÅf
    ¬∑ simpa
    ¬∑ exact (slitPlaneLemma h‚ÇÇf).resolve_left h‚ÇÉf


theorem logabs_of_holomorphicAt_is_harmonic
  {f : ‚ÑÇ ‚Üí ‚ÑÇ}
  {z : ‚ÑÇ}
  (h‚ÇÅf : HolomorphicAt f z)
  (h‚ÇÇf : f z ‚â† 0) :
  HarmonicAt (fun w ‚Ü¶ Real.log ‚Äñf w‚Äñ) z := by

  -- Suffices: Harmonic (2‚Åª¬π ‚Ä¢ Real.log ‚àò ‚áëComplex.normSq ‚àò f)
  have : (fun z ‚Ü¶ Real.log ‚Äñf z‚Äñ) = (2 : ‚Ñù)‚Åª¬π ‚Ä¢ (Real.log ‚àò Complex.normSq ‚àò f) := by
    funext z
    simp
    rw [Complex.norm_def]
    rw [Real.log_sqrt]
    linarith
    exact Complex.normSq_nonneg (f z)
  rw [this]

  -- Suffices: Harmonic (Real.log ‚àò ‚áëComplex.normSq ‚àò f)
  apply (harmonicAt_iff_smul_const_is_harmonicAt (inv_ne_zero two_ne_zero)).1
  exact log_normSq_of_holomorphicAt_is_harmonicAt h‚ÇÅf h‚ÇÇf
