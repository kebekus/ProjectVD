import Mathlib.Analysis.Meromorphic.Basic
import VD.NormalFormAt

open Topology

variable {ùïú : Type u_1} [NontriviallyNormedField ùïú] {E : Type u_2} [NormedAddCommGroup E] [NormedSpace ùïú E]

-- TODO: MeromorphicNF is an open property
-- TODO: MeromorphicNF is a codiscrete property

lemma MeromorphicNFAt_of_mul_analytic'
  {f : ùïú ‚Üí ùïú}
  {g : ùïú ‚Üí ùïú}
  {z‚ÇÄ : ùïú}
  (h‚ÇÅg : AnalyticAt ùïú g z‚ÇÄ)
  (h‚ÇÇg : g z‚ÇÄ ‚â† 0) :
  MeromorphicNFAt f z‚ÇÄ ‚Üí MeromorphicNFAt (f ‚Ä¢ g) z‚ÇÄ := by

  intro hf
  --unfold MeromorphicNFAt at hf
  rcases hf with h‚ÇÅf|h‚ÇÅf
  ¬∑ left
    rw [Filter.EventuallyEq, eventually_nhds_iff] at h‚ÇÅf
    obtain ‚ü®t, ht‚ü© := h‚ÇÅf
    rw [Filter.EventuallyEq, eventually_nhds_iff]
    use t
    constructor
    ¬∑ intro y hy
      simp [ht.1 y hy]
    ¬∑ exact ht.2
  ¬∑ right
    obtain ‚ü®n, g_f, h‚ÇÅg_f, h‚ÇÇg_f, h‚ÇÉg_f‚ü© := h‚ÇÅf
    use n, g * g_f, h‚ÇÅg.mul h‚ÇÅg_f
    constructor
    ¬∑ simp
      exact ‚ü®h‚ÇÇg, h‚ÇÇg_f‚ü©
    ¬∑ rw [Filter.EventuallyEq, eventually_nhds_iff] at h‚ÇÉg_f
      obtain ‚ü®t, ht‚ü© := h‚ÇÉg_f
      rw [Filter.EventuallyEq, eventually_nhds_iff]
      use t
      constructor
      ¬∑ intro y hy
        simp
        rw [ht.1]
        simp
        ring
        exact hy
      ¬∑ exact ht.2

/- A function is strongly meromorphic at a point iff it is strongly meromorphic
   after multiplication with a non-vanishing analytic function
-/
theorem MeromorphicNFAt_of_mul_analytic
  {f g : ùïú ‚Üí ùïú}
  {z‚ÇÄ : ùïú}
  (h‚ÇÅg : AnalyticAt ùïú g z‚ÇÄ)
  (h‚ÇÇg : g z‚ÇÄ ‚â† 0) :
  MeromorphicNFAt f z‚ÇÄ ‚Üî MeromorphicNFAt (f * g) z‚ÇÄ := by
  constructor
  ¬∑ apply MeromorphicNFAt_of_mul_analytic' h‚ÇÅg h‚ÇÇg
  ¬∑ intro hprod
    have : f =·∂†[ùìù z‚ÇÄ] f * g * g‚Åª¬π := by
      filter_upwards [h‚ÇÅg.continuousAt.preimage_mem_nhds (compl_singleton_mem_nhds_iff.mpr h‚ÇÇg)]
      intro y hy
      rw [Set.preimage_compl, Set.mem_compl_iff, Set.mem_preimage,
        Set.mem_singleton_iff] at hy
      simp [hy]
    rw [meromorphicNFAt_congr this]
    exact MeromorphicNFAt_of_mul_analytic' (h‚ÇÅg.inv h‚ÇÇg) (inv_ne_zero h‚ÇÇg) (f := f * g) hprod

theorem MeromorphicNFAt.order_eq_zero_iff
  {f : ùïú ‚Üí ùïú}
  {z‚ÇÄ : ùïú}
  (hf : MeromorphicNFAt f z‚ÇÄ) :
  hf.meromorphicAt.order = 0 ‚Üî f z‚ÇÄ ‚â† 0 := by
  constructor
  ¬∑ intro h‚ÇÅf
    let A := hf.analyticAt (le_of_eq h‚ÇÅf.symm)
    apply A.order_eq_zero_iff.1
    let B := A.meromorphicAt_order
    rw [h‚ÇÅf] at B
    apply WithTopCoe
    rw [eq_comm]
    exact B
  ¬∑ intro h
    have hf' := hf
    rcases hf with h‚ÇÅ | h‚ÇÅ
    ¬∑ have := h‚ÇÅ.eq_of_nhds
      tauto
    ¬∑ obtain ‚ü®n, g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅ
      have : n = 0 := by
        by_contra hContra
        have A := Filter.EventuallyEq.eq_of_nhds h‚ÇÉg
        simp [zero_zpow n hContra] at A
        tauto
      simp [this] at h‚ÇÉg

      apply (hf'.meromorphicAt.order_eq_int_iff 0).2
      use g, h‚ÇÅg, h‚ÇÇg
      simp only [zpow_zero, smul_eq_mul, one_mul]
      exact h‚ÇÉg.filter_mono nhdsWithin_le_nhds

theorem MeromorphicNFAt.localIdentity
  {f g : ùïú ‚Üí ùïú}
  {z‚ÇÄ : ùïú}
  (hf : MeromorphicNFAt f z‚ÇÄ)
  (hg : MeromorphicNFAt g z‚ÇÄ) :
  f =·∂†[ùìù[‚â†] z‚ÇÄ] g ‚Üí f =·∂†[ùìù z‚ÇÄ] g := by
  intro h
  have t‚ÇÄ := hf.meromorphicAt.order_congr h
  by_cases cs : hf.meromorphicAt.order = 0
  ¬∑ rw [cs] at t‚ÇÄ
    exact (hf.analyticAt (le_of_eq cs.symm)).localIdentity (hg.analyticAt (le_of_eq t‚ÇÄ)) h
  ¬∑ apply eventuallyEq_nhdsWithin_of_eventuallyEq_nhds h
    let A := cs
    rw [hf.order_eq_zero_iff] at A
    simp at A
    let B := cs
    rw [t‚ÇÄ] at B
    rw [hg.order_eq_zero_iff] at B
    simp at B
    simp [A, B]


theorem MeromorphicNFAt.makeStronglyMeromorphic_id
  {f : ùïú ‚Üí ùïú}
  {z‚ÇÄ : ùïú}
  (hf : MeromorphicNFAt f z‚ÇÄ) :
  f = hf.meromorphicAt.toNF := by

  funext z
  by_cases hz : z = z‚ÇÄ
  ¬∑ rw [hz]
    unfold MeromorphicAt.toNF
    simp
    have h‚ÇÄf := hf
    rcases hf with h‚ÇÅf | h‚ÇÅf
    ¬∑ simp [(h‚ÇÄf.meromorphicAt.order_eq_top_iff).2 (h‚ÇÅf.filter_mono nhdsWithin_le_nhds)]
      exact Filter.EventuallyEq.eq_of_nhds h‚ÇÅf
    ¬∑ obtain ‚ü®n, g, h‚ÇÅg, h‚ÇÇg, h‚ÇÉg‚ü© := h‚ÇÅf
      rw [Filter.EventuallyEq.eq_of_nhds h‚ÇÉg]
      have : h‚ÇÄf.meromorphicAt.order = n := by
        rw [MeromorphicAt.order_eq_int_iff (MeromorphicNFAt.meromorphicAt h‚ÇÄf) n]
        use g, h‚ÇÅg, h‚ÇÇg
        exact eventually_nhdsWithin_of_eventually_nhds h‚ÇÉg
      by_cases h‚ÇÉf : h‚ÇÄf.meromorphicAt.order = 0
      ¬∑ simp [h‚ÇÉf]
        have hn : n = (0 : ‚Ñ§) := by
          rw [h‚ÇÉf] at this
          exact WithTop.coe_eq_zero.mp (id (Eq.symm this))
        simp_rw [hn]
        simp
        let A := (h‚ÇÄf.meromorphicAt.order_eq_int_iff 0).1 h‚ÇÉf
        have : g =·∂†[ùìù z‚ÇÄ] (Classical.choose A) := by
          obtain ‚ü®h‚ÇÄ, h‚ÇÅ, h‚ÇÇ‚ü© := Classical.choose_spec A
          apply h‚ÇÅg.localIdentity h‚ÇÄ
          rw [hn] at h‚ÇÉg
          simp at h‚ÇÉg h‚ÇÇ
          exact (h‚ÇÉg.filter_mono nhdsWithin_le_nhds).symm.trans h‚ÇÇ
        exact Filter.EventuallyEq.eq_of_nhds this
      ¬∑ simp [h‚ÇÉf]
        left
        apply zero_zpow n
        by_contra hn
        rw [hn] at this
        tauto
  ¬∑ exact (MeromorphicNFAt.meromorphicAt hf).toNF_id_on_complement hz


theorem MeromorphicNFAt.eliminate
  {f : ùïú ‚Üí ùïú}
  {z‚ÇÄ : ùïú}
  (h‚ÇÅf : MeromorphicNFAt f z‚ÇÄ)
  (h‚ÇÇf : h‚ÇÅf.meromorphicAt.order ‚â† ‚ä§) :
  ‚àÉ g : ùïú ‚Üí ùïú, (AnalyticAt ùïú g z‚ÇÄ)
    ‚àß (g z‚ÇÄ ‚â† 0)
    ‚àß (f = (fun z ‚Ü¶ (z-z‚ÇÄ) ^ (h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf)) * g) := by

  let g‚ÇÅ := (fun z ‚Ü¶ (z-z‚ÇÄ) ^ (-h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf)) * f
  let g‚ÇÅ‚ÇÅ := fun z ‚Ü¶ (z-z‚ÇÄ) ^ (-h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf)
  have h‚ÇÅg‚ÇÅ‚ÇÅ : MeromorphicAt g‚ÇÅ‚ÇÅ z‚ÇÄ := by fun_prop
  have h‚ÇÇg‚ÇÅ‚ÇÅ : h‚ÇÅg‚ÇÅ‚ÇÅ.order = - h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf := by
    rw [‚Üê WithTop.LinearOrderedAddCommGroup.coe_neg]
    rw [h‚ÇÅg‚ÇÅ‚ÇÅ.order_eq_int_iff]
    use 1
    constructor
    ¬∑ exact analyticAt_const
    ¬∑ constructor
      ¬∑ simp
      ¬∑ apply eventually_nhdsWithin_of_forall
        simp [g‚ÇÅ‚ÇÅ]
  have h‚ÇÅg‚ÇÅ : MeromorphicAt g‚ÇÅ z‚ÇÄ := h‚ÇÅg‚ÇÅ‚ÇÅ.mul h‚ÇÅf.meromorphicAt
  have h‚ÇÇg‚ÇÅ : h‚ÇÅg‚ÇÅ.order = 0 := by
    rw [h‚ÇÅg‚ÇÅ‚ÇÅ.order_mul h‚ÇÅf.meromorphicAt, h‚ÇÇg‚ÇÅ‚ÇÅ]
    simp only [WithTop.coe_untop, g‚ÇÅ‚ÇÅ]
    rw [add_comm, LinearOrderedAddCommGroupWithTop.add_neg_cancel_of_ne_top h‚ÇÇf]
  let g := h‚ÇÅg‚ÇÅ.toNF
  use g
  have h‚ÇÅg : MeromorphicNFAt g z‚ÇÄ := by
    exact MeromorphicAt.MeromorphicNFAt_of_toNF h‚ÇÅg‚ÇÅ
  have h‚ÇÇg : h‚ÇÅg.meromorphicAt.order = 0 := by
    rw [‚Üê h‚ÇÅg‚ÇÅ.order_congr h‚ÇÅg‚ÇÅ.toNF_id_on_punct_nhd]
    exact h‚ÇÇg‚ÇÅ
  constructor
  ¬∑ apply analyticAt
    ¬∑ rw [h‚ÇÇg]
    ¬∑ exact h‚ÇÅg
  ¬∑ constructor
    ¬∑ rwa [‚Üê h‚ÇÅg.order_eq_zero_iff]
    ¬∑ funext z
      by_cases hz : z = z‚ÇÄ
      ¬∑ by_cases hOrd : h‚ÇÅf.meromorphicAt.order.untop h‚ÇÇf = 0
        ¬∑ simp [hOrd]
          have : MeromorphicNFAt g‚ÇÅ z‚ÇÄ := by
            unfold g‚ÇÅ
            simp [hOrd]
            have : (fun z => 1) * f = f := by
              funext z
              simp
            rwa [this]
          rw [hz]
          unfold g
          rw [‚Üê makeStronglyMeromorphic_id this]
          unfold g‚ÇÅ
          rw [hOrd]
          simp
        ¬∑ have : h‚ÇÅf.meromorphicAt.order ‚â† 0 := by
            by_contra hC
            simp_rw [hC] at hOrd
            tauto
          let A := h‚ÇÅf.order_eq_zero_iff.not.1 this
          simp at A
          rw [hz, A]
          simp
          left
          rwa [zpow_eq_zero_iff]
      ¬∑ simp
        have : g z = g‚ÇÅ z := (h‚ÇÅg‚ÇÅ.toNF_id_on_complement hz).symm
        rw [this]
        unfold g‚ÇÅ
        simp [hz]
        rw [‚Üê mul_assoc, mul_inv_cancel‚ÇÄ]
        simp
        apply zpow_ne_zero
        exact sub_ne_zero_of_ne hz
