import VD.MathlibSubmitted.Nevanlinna_mul
import VD.MathlibSubmitted.MeromorphicSum

open MeromorphicOn Metric Real Set Classical

variable
  {ùïú : Type*} [NontriviallyNormedField ùïú]
  {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
  {U : Set ùïú} {f g : ùïú ‚Üí E} {a : WithTop E} {a‚ÇÄ : E}

/-- Sums of circle integrable functions are circle integrable. -/
theorem CircleIntegrable.fun_sum {c : ‚ÑÇ} {R : ‚Ñù} {Œπ : Type*} (s : Finset Œπ) {f : Œπ ‚Üí ‚ÑÇ ‚Üí E}
    (h : ‚àÄ i ‚àà s, CircleIntegrable (f i) c R) :
    CircleIntegrable (fun z ‚Ü¶ ‚àë i ‚àà s, f i z) c R := by
  convert CircleIntegrable.sum s h
  simp

/--
Variant of `posLog_sum` for norms of elements in normed additive commutative
groups, using monotonicity of `log‚Å∫` and the triangle inequality.
-/
lemma posLog_norm_sum_le {E : Type*} [NormedAddCommGroup E]
    {Œ± : Type*} (s : Finset Œ±) (f : Œ± ‚Üí E) :
    log‚Å∫ ‚Äñ‚àë t ‚àà s, f t‚Äñ ‚â§ log s.card + ‚àë t ‚àà s, log‚Å∫ ‚Äñf t‚Äñ := by
  calc log‚Å∫ ‚Äñ‚àë t ‚àà s, f t‚Äñ
  _ ‚â§ log‚Å∫ (‚àë t ‚àà s, ‚Äñf t‚Äñ) := by
    apply monotoneOn_posLog (by simp) _ (norm_sum_le s f)
    simp [Finset.sum_nonneg (fun  i hi ‚Ü¶ norm_nonneg (f i))]
  _ ‚â§ log s.card + ‚àë t ‚àà s, log‚Å∫ ‚Äñf t‚Äñ :=
    posLog_sum s fun t ‚Ü¶ ‚Äñf t‚Äñ

/-- Circle averages commute with addition. -/
theorem circleAverage_add_fun {c : ‚ÑÇ} {R : ‚Ñù} {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ} (hf‚ÇÅ : CircleIntegrable f‚ÇÅ c R)
    (hf‚ÇÇ : CircleIntegrable f‚ÇÇ c R) :
    circleAverage (fun z ‚Ü¶ f‚ÇÅ z + f‚ÇÇ z) c R = circleAverage f‚ÇÅ c R + circleAverage f‚ÇÇ c R :=
  circleAverage_add hf‚ÇÅ hf‚ÇÇ

namespace ValueDistribution

variable [ProperSpace ùïú] [NormedSpace ‚ÑÇ E]

/--
The proximity function of `f + g` at `‚ä§` is less than or equal to the sum of the
proximity functions of `f` and `g`, plus `log 2`.
-/
theorem proximity_top_add_le {f‚ÇÅ f‚ÇÇ : ‚ÑÇ ‚Üí E} (h‚ÇÅf‚ÇÅ : MeromorphicOn f‚ÇÅ Set.univ)
    (h‚ÇÅf‚ÇÇ : MeromorphicOn f‚ÇÇ Set.univ) :
    proximity (f‚ÇÅ + f‚ÇÇ) ‚ä§ ‚â§ (proximity f‚ÇÅ ‚ä§) + (proximity f‚ÇÇ ‚ä§) + (fun _ ‚Ü¶ log 2) := by
  simp only [proximity, reduceDIte, Pi.add_apply]
  intro r
  have h‚ÇÇf‚ÇÅ : MeromorphicOn f‚ÇÅ (sphere 0 |r|) := fun x _ ‚Ü¶ h‚ÇÅf‚ÇÅ x trivial
  have h‚ÇÇf‚ÇÇ : MeromorphicOn f‚ÇÇ (sphere 0 |r|) := fun x _ ‚Ü¶ h‚ÇÅf‚ÇÇ x trivial
  have h‚ÇÉf‚ÇÅ := circleIntegrable_posLog_norm_meromorphicOn h‚ÇÇf‚ÇÅ
  have h‚ÇÉf‚ÇÇ := circleIntegrable_posLog_norm_meromorphicOn h‚ÇÇf‚ÇÇ
  calc circleAverage (fun x ‚Ü¶ log‚Å∫ ‚Äñf‚ÇÅ x + f‚ÇÇ x‚Äñ) 0 r
  _ ‚â§ circleAverage (fun x ‚Ü¶ log‚Å∫ ‚Äñf‚ÇÅ x‚Äñ + log‚Å∫ ‚Äñf‚ÇÇ x‚Äñ + log 2) 0 r :=
    circleAverage_mono (circleIntegrable_posLog_norm_meromorphicOn (fun_add h‚ÇÇf‚ÇÅ h‚ÇÇf‚ÇÇ))
      ((h‚ÇÉf‚ÇÅ.add h‚ÇÉf‚ÇÇ).add (circleIntegrable_const (log 2) 0 r))
      fun x _ ‚Ü¶ posLog_norm_add_le (f‚ÇÅ x) (f‚ÇÇ x)
  _ = circleAverage (log‚Å∫ ‚Äñf‚ÇÅ ¬∑‚Äñ) 0 r + circleAverage (log‚Å∫ ‚Äñf‚ÇÇ ¬∑‚Äñ) 0 r + log 2 := by
    rw [‚Üê circleAverage_add h‚ÇÉf‚ÇÅ h‚ÇÉf‚ÇÇ, ‚Üê circleAverage_const (log 2),
      ‚Üê circleAverage_add (h‚ÇÉf‚ÇÅ.add h‚ÇÉf‚ÇÇ) (circleIntegrable_const (log 2) 0 r)]
    congr 1
    ext
    simp [circleAverage_const]

/--
The proximity function of a sum of functions at `‚ä§` is less than or equal to the
sum of the proximity functions of the summand, plus `log` of the number of
summands.
-/
theorem proximity_top_sum_le {Œ± : Type*} (s : Finset Œ±) (f : Œ± ‚Üí ‚ÑÇ ‚Üí E)
    (hf : ‚àÄ a, MeromorphicOn (f a) Set.univ) :
    proximity (‚àë a ‚àà s, f a) ‚ä§ ‚â§ ‚àë a ‚àà s, (proximity (f a) ‚ä§) + (fun _ ‚Ü¶ log s.card) := by
  simp only [proximity, reduceDIte, Finset.sum_apply]
  intro r
  have h‚ÇÇf : ‚àÄ i ‚àà s, CircleIntegrable (log‚Å∫ ‚Äñf i ¬∑‚Äñ) 0 r :=
    fun i _ ‚Ü¶ circleIntegrable_posLog_norm_meromorphicOn (fun x _ ‚Ü¶ hf i x trivial)
  simp only [Pi.add_apply, Finset.sum_apply]
  calc circleAverage (log‚Å∫ ‚Äñ‚àë c ‚àà s, f c ¬∑‚Äñ) 0 r
  _ ‚â§ circleAverage (‚àë c ‚àà s, log‚Å∫ ‚Äñf c ¬∑‚Äñ + log s.card) 0 r := by
    apply circleAverage_mono
    ¬∑ apply circleIntegrable_posLog_norm_meromorphicOn
      apply MeromorphicOn.mono_set (MeromorphicOn.fun_sum (hf ¬∑)) (by tauto)
    ¬∑ apply CircleIntegrable.add (CircleIntegrable.fun_sum s h‚ÇÇf)
        (circleIntegrable_const (log s.card) 0 r)
    ¬∑ intro x hx
      rw [add_comm]
      apply posLog_norm_sum_le
  _ = ‚àë c ‚àà s, circleAverage (log‚Å∫ ‚Äñf c ¬∑‚Äñ) 0 r + log s.card := by
    nth_rw 2 [‚Üê circleAverage_const (log s.card) 0 r]
    rw [‚Üê circleAverage_sum h‚ÇÇf, ‚Üê circleAverage_add (CircleIntegrable.sum s h‚ÇÇf)
      (circleIntegrable_const (log s.card) 0 r)]
    congr 1
    ext x
    simp

end ValueDistribution
